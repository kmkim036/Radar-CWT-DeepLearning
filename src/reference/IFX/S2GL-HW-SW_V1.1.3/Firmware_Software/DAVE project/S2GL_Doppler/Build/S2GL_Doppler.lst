
S2GL_Doppler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000367d  10001000  10001000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  10004680  10004680  00004680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .VENEER_Code  00000138  2000000c  10004688  0000800c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 Stack         00000404  20000144  00000000  00000144  2**0
                  ALLOC
  4 .data         0000038c  20000548  100047c0  00008548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000181c  200008d4  10004b4c  000088d4  2**2
                  ALLOC
  6 .no_init      00000004  20003ffc  10008274  000088d4  2**2
                  ALLOC
  7 .debug_aranges 00000ca8  00000000  00000000  000088d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0001cc68  00000000  00000000  00009580  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000045e2  00000000  00000000  000261e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00008962  00000000  00000000  0002a7ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00002294  00000000  00000000  0003312c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000a1b3  00000000  00000000  000353c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000082c5  00000000  00000000  0003f573  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001230  00000000  00000000  00047838  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .build_attributes 00000c49  00000000  00000000  00048a68  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

10001000 <__Vectors>:
10001000:	48 05 00 20 19 10 00 10 00 00 00 00 99 10 00 10     H.. ............
10001010:	00 04 01 00 00 01 00 00                             ........

10001018 <Reset_Handler>:
    .thumb_func 
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler: 
/* Initialize interrupt veneer */
	ldr	r1, =eROData
10001018:	4911      	ldr	r1, [pc, #68]	; (10001060 <__copy_data+0xe>)
	ldr	r2, =VeneerStart
1000101a:	4a12      	ldr	r2, [pc, #72]	; (10001064 <__copy_data+0x12>)
	ldr	r3, =VeneerEnd
1000101c:	4b12      	ldr	r3, [pc, #72]	; (10001068 <__copy_data+0x16>)
	bl  __copy_data
1000101e:	f000 f818 	bl	10001052 <__copy_data>

    ldr  r0, =SystemInit
10001022:	4812      	ldr	r0, [pc, #72]	; (1000106c <__copy_data+0x1a>)
    blx  r0
10001024:	4780      	blx	r0
	
/* Initialize data */
	ldr	r1, =DataLoadAddr
10001026:	4912      	ldr	r1, [pc, #72]	; (10001070 <__copy_data+0x1e>)
	ldr	r2, =__data_start
10001028:	4a12      	ldr	r2, [pc, #72]	; (10001074 <__copy_data+0x22>)
	ldr	r3, =__data_end
1000102a:	4b13      	ldr	r3, [pc, #76]	; (10001078 <__copy_data+0x26>)
	bl  __copy_data
1000102c:	f000 f811 	bl	10001052 <__copy_data>

/* RAM code */
	ldr	r1, =__ram_code_load
10001030:	4912      	ldr	r1, [pc, #72]	; (1000107c <__copy_data+0x2a>)
	ldr	r2, =__ram_code_start
10001032:	4a13      	ldr	r2, [pc, #76]	; (10001080 <__copy_data+0x2e>)
	ldr	r3, =__ram_code_end
10001034:	4b13      	ldr	r3, [pc, #76]	; (10001084 <__copy_data+0x32>)
	bl  __copy_data
10001036:	f000 f80c 	bl	10001052 <__copy_data>
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
#ifndef __SKIP_BSS_CLEAR
	ldr	r1, =__bss_start
1000103a:	4913      	ldr	r1, [pc, #76]	; (10001088 <__copy_data+0x36>)
	ldr	r2, =__bss_end
1000103c:	4a13      	ldr	r2, [pc, #76]	; (1000108c <__copy_data+0x3a>)

	movs	r0, 0
1000103e:	2000      	movs	r0, #0

	subs	r2, r1
10001040:	1a52      	subs	r2, r2, r1
	ble	.L_loop3_done
10001042:	dd02      	ble.n	1000104a <Reset_Handler+0x32>

.L_loop3:
	subs	r2, #4
10001044:	3a04      	subs	r2, #4
	str	r0, [r1, r2]
10001046:	5088      	str	r0, [r1, r2]
	bgt	.L_loop3
10001048:	dcfc      	bgt.n	10001044 <Reset_Handler+0x2c>
.L_loop3_done:
#endif /* __SKIP_BSS_CLEAR */

#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
1000104a:	4811      	ldr	r0, [pc, #68]	; (10001090 <__copy_data+0x3e>)
    blx  r0
1000104c:	4780      	blx	r0
#endif

    ldr  r0, =main
1000104e:	4811      	ldr	r0, [pc, #68]	; (10001094 <__copy_data+0x42>)
    blx  r0
10001050:	4780      	blx	r0

10001052 <__copy_data>:
 *    r3: end of the section to copy to
 *
 *  All addresses must be aligned to 4 bytes boundary.
 *  Uses r0
 */
	subs	r3, r2
10001052:	1a9b      	subs	r3, r3, r2
	ble	.L_loop_done
10001054:	dd03      	ble.n	1000105e <__copy_data+0xc>

.L_loop:
	subs	r3, #4
10001056:	3b04      	subs	r3, #4
	ldr	r0, [r1,r3]
10001058:	58c8      	ldr	r0, [r1, r3]
	str	r0, [r2,r3]
1000105a:	50d0      	str	r0, [r2, r3]
	bgt	.L_loop
1000105c:	dcfb      	bgt.n	10001056 <__copy_data+0x4>

.L_loop_done:
	bx  lr
1000105e:	4770      	bx	lr
    .thumb_func 
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler: 
/* Initialize interrupt veneer */
	ldr	r1, =eROData
10001060:	10004688 	.word	0x10004688
	ldr	r2, =VeneerStart
10001064:	2000000c 	.word	0x2000000c
	ldr	r3, =VeneerEnd
10001068:	20000144 	.word	0x20000144
	bl  __copy_data

    ldr  r0, =SystemInit
1000106c:	100010ed 	.word	0x100010ed
    blx  r0
	
/* Initialize data */
	ldr	r1, =DataLoadAddr
10001070:	100047c0 	.word	0x100047c0
	ldr	r2, =__data_start
10001074:	20000548 	.word	0x20000548
	ldr	r3, =__data_end
10001078:	200008d4 	.word	0x200008d4
	bl  __copy_data

/* RAM code */
	ldr	r1, =__ram_code_load
1000107c:	10004b4c 	.word	0x10004b4c
	ldr	r2, =__ram_code_start
10001080:	200008d4 	.word	0x200008d4
	ldr	r3, =__ram_code_end
10001084:	200008d4 	.word	0x200008d4
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
#ifndef __SKIP_BSS_CLEAR
	ldr	r1, =__bss_start
10001088:	200008d4 	.word	0x200008d4
	ldr	r2, =__bss_end
1000108c:	200020f0 	.word	0x200020f0
	bgt	.L_loop3
.L_loop3_done:
#endif /* __SKIP_BSS_CLEAR */

#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
10001090:	10003b25 	.word	0x10003b25
    blx  r0
#endif

    ldr  r0, =main
10001094:	1000269d 	.word	0x1000269d

10001098 <BCCU0_0_IRQHandler>:
    
    .thumb_func
    .weak Default_handler
    .type Default_handler, %function
Default_handler:
    b  .
10001098:	e7fe      	b.n	10001098 <BCCU0_0_IRQHandler>
	...

1000109c <SystemCoreClockUpdate>:

__WEAK void SystemCoreClockUpdate(void)
{
  static uint32_t IDIV, FDIV;

  IDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
1000109c:	4a0d      	ldr	r2, [pc, #52]	; (100010d4 <SystemCoreClockUpdate+0x38>)

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
1000109e:	b508      	push	{r3, lr}
  static uint32_t IDIV, FDIV;

  IDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
100010a0:	6813      	ldr	r3, [r2, #0]
100010a2:	490d      	ldr	r1, [pc, #52]	; (100010d8 <SystemCoreClockUpdate+0x3c>)
100010a4:	041b      	lsls	r3, r3, #16
100010a6:	0e1b      	lsrs	r3, r3, #24
100010a8:	600b      	str	r3, [r1, #0]
  FDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_FDIV_Msk) >> SCU_CLK_CLKCR_FDIV_Pos;
100010aa:	21ff      	movs	r1, #255	; 0xff
100010ac:	6812      	ldr	r2, [r2, #0]
100010ae:	4011      	ands	r1, r2
100010b0:	4a0a      	ldr	r2, [pc, #40]	; (100010dc <SystemCoreClockUpdate+0x40>)
100010b2:	6011      	str	r1, [r2, #0]
  
  if (IDIV != 0)
100010b4:	2b00      	cmp	r3, #0
100010b6:	d103      	bne.n	100010c0 <SystemCoreClockUpdate+0x24>
    SystemCoreClock = ((DCO1_FREQUENCY << 6U) / ((IDIV << 8) + FDIV)) << 1U;
  }
  else
  {
    /* Fractional divider bypassed. Simply divide DCO_DCLK by 2 */
    SystemCoreClock = DCO1_FREQUENCY >> 1U;
100010b8:	4a09      	ldr	r2, [pc, #36]	; (100010e0 <SystemCoreClockUpdate+0x44>)
100010ba:	4b0a      	ldr	r3, [pc, #40]	; (100010e4 <SystemCoreClockUpdate+0x48>)
100010bc:	601a      	str	r2, [r3, #0]
  }
}
100010be:	bd08      	pop	{r3, pc}
  FDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_FDIV_Msk) >> SCU_CLK_CLKCR_FDIV_Pos;
  
  if (IDIV != 0)
  {
    /* Fractional divider is enabled and used */
    SystemCoreClock = ((DCO1_FREQUENCY << 6U) / ((IDIV << 8) + FDIV)) << 1U;
100010c0:	021b      	lsls	r3, r3, #8
100010c2:	1859      	adds	r1, r3, r1
100010c4:	4808      	ldr	r0, [pc, #32]	; (100010e8 <SystemCoreClockUpdate+0x4c>)
100010c6:	f000 f9f9 	bl	100014bc <__aeabi_uidiv>
100010ca:	4b06      	ldr	r3, [pc, #24]	; (100010e4 <SystemCoreClockUpdate+0x48>)
100010cc:	0040      	lsls	r0, r0, #1
100010ce:	6018      	str	r0, [r3, #0]
100010d0:	e7f5      	b.n	100010be <SystemCoreClockUpdate+0x22>
100010d2:	46c0      	nop			; (mov r8, r8)
100010d4:	40010300 	.word	0x40010300
100010d8:	200008d4 	.word	0x200008d4
100010dc:	200008d8 	.word	0x200008d8
100010e0:	01e84800 	.word	0x01e84800
100010e4:	20003ffc 	.word	0x20003ffc
100010e8:	f4240000 	.word	0xf4240000

100010ec <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{    
100010ec:	b508      	push	{r3, lr}
  SystemCoreSetup();
100010ee:	f001 f8f5 	bl	100022dc <SystemCoreSetup>
  SystemCoreClockSetup();
100010f2:	f001 f8fd 	bl	100022f0 <SystemCoreClockSetup>
}
100010f6:	bd08      	pop	{r3, pc}

100010f8 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
100010f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
  XMC_ASSERT("XMC_GPIO_Init: Invalid input hysteresis", XMC_GPIO_CHECK_INPUT_HYSTERESIS(config->input_hysteresis));
  
  /* Switch to input */
  port->IOCR[pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
100010fa:	2403      	movs	r4, #3
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
100010fc:	4647      	mov	r7, r8
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
  XMC_ASSERT("XMC_GPIO_Init: Invalid input hysteresis", XMC_GPIO_CHECK_INPUT_HYSTERESIS(config->input_hysteresis));
  
  /* Switch to input */
  port->IOCR[pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
100010fe:	1c26      	adds	r6, r4, #0
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
10001100:	b480      	push	{r7}
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
  XMC_ASSERT("XMC_GPIO_Init: Invalid input hysteresis", XMC_GPIO_CHECK_INPUT_HYSTERESIS(config->input_hysteresis));
  
  /* Switch to input */
  port->IOCR[pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
10001102:	27f8      	movs	r7, #248	; 0xf8
10001104:	400e      	ands	r6, r1
10001106:	00f6      	lsls	r6, r6, #3
10001108:	40b7      	lsls	r7, r6
1000110a:	088b      	lsrs	r3, r1, #2
1000110c:	009b      	lsls	r3, r3, #2
1000110e:	18c3      	adds	r3, r0, r3
10001110:	691d      	ldr	r5, [r3, #16]
10001112:	46b0      	mov	r8, r6
10001114:	43bd      	bics	r5, r7

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
10001116:	004f      	lsls	r7, r1, #1
10001118:	40bc      	lsls	r4, r7
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
  XMC_ASSERT("XMC_GPIO_Init: Invalid input hysteresis", XMC_GPIO_CHECK_INPUT_HYSTERESIS(config->input_hysteresis));
  
  /* Switch to input */
  port->IOCR[pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
1000111a:	611d      	str	r5, [r3, #16]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
1000111c:	6f45      	ldr	r5, [r0, #116]	; 0x74

  /* Set input hysteresis */
  port->PHCR[(uint32_t)pin >> 3U] &= ~(uint32_t)((uint32_t)PORT_PHCR_Msk << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U)));
1000111e:	2604      	movs	r6, #4
  
  /* Switch to input */
  port->IOCR[pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
10001120:	43a5      	bics	r5, r4
10001122:	6745      	str	r5, [r0, #116]	; 0x74

  /* Set input hysteresis */
  port->PHCR[(uint32_t)pin >> 3U] &= ~(uint32_t)((uint32_t)PORT_PHCR_Msk << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U)));
10001124:	2507      	movs	r5, #7
10001126:	400d      	ands	r5, r1
10001128:	00ad      	lsls	r5, r5, #2
1000112a:	40ae      	lsls	r6, r5
1000112c:	08cc      	lsrs	r4, r1, #3
1000112e:	00a4      	lsls	r4, r4, #2
10001130:	1904      	adds	r4, r0, r4
10001132:	6c27      	ldr	r7, [r4, #64]	; 0x40
10001134:	43b7      	bics	r7, r6
10001136:	6427      	str	r7, [r4, #64]	; 0x40
  port->PHCR[(uint32_t)pin >> 3U] |= (uint32_t)config->input_hysteresis << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U));
10001138:	7856      	ldrb	r6, [r2, #1]
1000113a:	6c27      	ldr	r7, [r4, #64]	; 0x40
1000113c:	40ae      	lsls	r6, r5
1000113e:	1c35      	adds	r5, r6, #0
10001140:	433d      	orrs	r5, r7
10001142:	6425      	str	r5, [r4, #64]	; 0x40
    
  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
10001144:	4c0a      	ldr	r4, [pc, #40]	; (10001170 <XMC_GPIO_Init+0x78>)
10001146:	42a0      	cmp	r0, r4
10001148:	d00c      	beq.n	10001164 <XMC_GPIO_Init+0x6c>
  {    
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
  }
  /* Set output level */
  port->OMR = (uint32_t)config->output_level << pin;
1000114a:	6854      	ldr	r4, [r2, #4]
  
  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << (PORT_IOCR_PC_Size * (pin & 0x3U));
1000114c:	7812      	ldrb	r2, [r2, #0]
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
  {    
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
  }
  /* Set output level */
  port->OMR = (uint32_t)config->output_level << pin;
1000114e:	408c      	lsls	r4, r1
10001150:	6044      	str	r4, [r0, #4]
  
  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << (PORT_IOCR_PC_Size * (pin & 0x3U));
10001152:	4640      	mov	r0, r8
10001154:	4082      	lsls	r2, r0
10001156:	1c16      	adds	r6, r2, #0
10001158:	6919      	ldr	r1, [r3, #16]
1000115a:	430e      	orrs	r6, r1
1000115c:	611e      	str	r6, [r3, #16]
}
1000115e:	bc04      	pop	{r2}
10001160:	4690      	mov	r8, r2
10001162:	bdf0      	pop	{r4, r5, r6, r7, pc}
  port->PHCR[(uint32_t)pin >> 3U] |= (uint32_t)config->input_hysteresis << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U));
    
  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
  {    
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
10001164:	2501      	movs	r5, #1
10001166:	408d      	lsls	r5, r1
10001168:	6e04      	ldr	r4, [r0, #96]	; 0x60
1000116a:	43ac      	bics	r4, r5
1000116c:	6604      	str	r4, [r0, #96]	; 0x60
1000116e:	e7ec      	b.n	1000114a <XMC_GPIO_Init+0x52>
10001170:	40040200 	.word	0x40040200

10001174 <XMC_RTC_Init>:
 * \par<b>Related APIs:</b><br>
 * XMC_RTC_Start(), XMC_RTC_Stop()
 */ 
__STATIC_INLINE bool XMC_RTC_IsRunning(void)
{
  return (bool)(RTC->CTR & RTC_CTR_ENB_Msk);
10001174:	4b15      	ldr	r3, [pc, #84]	; (100011cc <XMC_RTC_Init+0x58>)
 *********************************************************************************************************************/
/*
 * Initialize the RTC peripheral
 */
XMC_RTC_STATUS_t XMC_RTC_Init(const XMC_RTC_CONFIG_t *const config)
{
10001176:	b510      	push	{r4, lr}
10001178:	685b      	ldr	r3, [r3, #4]
  if (XMC_RTC_IsRunning() == false)
1000117a:	07db      	lsls	r3, r3, #31
1000117c:	d501      	bpl.n	10001182 <XMC_RTC_Init+0xe>
    }
    RTC->ATIM0 = config->alarm.raw0;	
    RTC->ATIM1 = config->alarm.raw1;    
  }
  return XMC_RTC_STATUS_OK;
}
1000117e:	2000      	movs	r0, #0
10001180:	bd10      	pop	{r4, pc}
10001182:	1c04      	adds	r4, r0, #0
/*
 * Checks RTC peripheral is enabled for programming to its registers
 */
bool XMC_RTC_IsEnabled(void)
{
  return !XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_RTC);
10001184:	2080      	movs	r0, #128	; 0x80
10001186:	00c0      	lsls	r0, r0, #3
10001188:	f000 f858 	bl	1000123c <XMC_SCU_CLOCK_IsPeripheralClockGated>
 */
XMC_RTC_STATUS_t XMC_RTC_Init(const XMC_RTC_CONFIG_t *const config)
{
  if (XMC_RTC_IsRunning() == false)
  {
    if (XMC_RTC_IsEnabled() == false)
1000118c:	2800      	cmp	r0, #0
1000118e:	d117      	bne.n	100011c0 <XMC_RTC_Init+0x4c>
    {
      XMC_RTC_Enable();
	}
	
    XMC_RTC_SetPrescaler(config->prescaler);
10001190:	8a20      	ldrh	r0, [r4, #16]
10001192:	f000 f9d1 	bl	10001538 <XMC_RTC_SetPrescaler>

	while ((XMC_SCU_GetMirrorStatus() & (SCU_GENERAL_MIRRSTS_RTC_TIM0_Msk | SCU_GENERAL_MIRRSTS_RTC_TIM1_Msk)) != 0U)
10001196:	2218      	movs	r2, #24
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
  return(SCU_GENERAL->MIRRSTS);
10001198:	490d      	ldr	r1, [pc, #52]	; (100011d0 <XMC_RTC_Init+0x5c>)
1000119a:	6c8b      	ldr	r3, [r1, #72]	; 0x48
1000119c:	421a      	tst	r2, r3
1000119e:	d1fc      	bne.n	1000119a <XMC_RTC_Init+0x26>
	{
      /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
    }
    RTC->TIM0 = config->time.raw0;
100011a0:	6822      	ldr	r2, [r4, #0]
100011a2:	4b0a      	ldr	r3, [pc, #40]	; (100011cc <XMC_RTC_Init+0x58>)
100011a4:	490a      	ldr	r1, [pc, #40]	; (100011d0 <XMC_RTC_Init+0x5c>)
100011a6:	621a      	str	r2, [r3, #32]
    RTC->TIM1 = config->time.raw1;
100011a8:	6862      	ldr	r2, [r4, #4]
100011aa:	625a      	str	r2, [r3, #36]	; 0x24
	
    while ((XMC_SCU_GetMirrorStatus() & (SCU_GENERAL_MIRRSTS_RTC_ATIM0_Msk | SCU_GENERAL_MIRRSTS_RTC_ATIM1_Msk)) != 0U)
100011ac:	2206      	movs	r2, #6
100011ae:	6c8b      	ldr	r3, [r1, #72]	; 0x48
100011b0:	421a      	tst	r2, r3
100011b2:	d1fc      	bne.n	100011ae <XMC_RTC_Init+0x3a>
    {
      /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
    }
    RTC->ATIM0 = config->alarm.raw0;	
100011b4:	68a2      	ldr	r2, [r4, #8]
100011b6:	4b05      	ldr	r3, [pc, #20]	; (100011cc <XMC_RTC_Init+0x58>)
100011b8:	619a      	str	r2, [r3, #24]
    RTC->ATIM1 = config->alarm.raw1;    
100011ba:	68e2      	ldr	r2, [r4, #12]
100011bc:	61da      	str	r2, [r3, #28]
100011be:	e7de      	b.n	1000117e <XMC_RTC_Init+0xa>
/*
 * Ungates a clock node for RTC
 */ 
void XMC_RTC_Enable(void)
{
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_RTC);
100011c0:	2080      	movs	r0, #128	; 0x80
100011c2:	00c0      	lsls	r0, r0, #3
100011c4:	f000 f822 	bl	1000120c <XMC_SCU_CLOCK_UngatePeripheralClock>
100011c8:	e7e2      	b.n	10001190 <XMC_RTC_Init+0x1c>
100011ca:	46c0      	nop			; (mov r8, r8)
100011cc:	40010a00 	.word	0x40010a00
100011d0:	40010000 	.word	0x40010000

100011d4 <XMC_RTC_EnableEvent>:
/*
 * Enable RTC periodic and alarm event(s)
 */ 
void XMC_RTC_EnableEvent(const uint32_t event)
{
  RTC->MSKSR |= event;
100011d4:	4a02      	ldr	r2, [pc, #8]	; (100011e0 <XMC_RTC_EnableEvent+0xc>)
100011d6:	6913      	ldr	r3, [r2, #16]
100011d8:	4318      	orrs	r0, r3
100011da:	6110      	str	r0, [r2, #16]
}
100011dc:	4770      	bx	lr
100011de:	46c0      	nop			; (mov r8, r8)
100011e0:	40010a00 	.word	0x40010a00

100011e4 <XMC_SCU_CLOCK_GatePeripheralClock>:
}

/* API to make protected bitfields available for modification */
void XMC_SCU_UnlockProtectedBits(void)
{
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_DISABLE;
100011e4:	23c0      	movs	r3, #192	; 0xc0

  while(((SCU_GENERAL->PASSWD) & SCU_GENERAL_PASSWD_PROTS_Msk))
100011e6:	2104      	movs	r1, #4
}

/* API to make protected bitfields available for modification */
void XMC_SCU_UnlockProtectedBits(void)
{
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_DISABLE;
100011e8:	4a06      	ldr	r2, [pc, #24]	; (10001204 <XMC_SCU_CLOCK_GatePeripheralClock+0x20>)
100011ea:	6253      	str	r3, [r2, #36]	; 0x24

  while(((SCU_GENERAL->PASSWD) & SCU_GENERAL_PASSWD_PROTS_Msk))
100011ec:	6a53      	ldr	r3, [r2, #36]	; 0x24
100011ee:	4219      	tst	r1, r3
100011f0:	d1fc      	bne.n	100011ec <XMC_SCU_CLOCK_GatePeripheralClock+0x8>

/* API which gates a clock node at its source */
void XMC_SCU_CLOCK_GatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
  XMC_SCU_UnlockProtectedBits();
  SCU_CLK->CGATSET0 |= (uint32_t)peripheral;
100011f2:	4a05      	ldr	r2, [pc, #20]	; (10001208 <XMC_SCU_CLOCK_GatePeripheralClock+0x24>)
100011f4:	68d3      	ldr	r3, [r2, #12]
100011f6:	4318      	orrs	r0, r3
100011f8:	60d0      	str	r0, [r2, #12]
}

/* API to lock protected bitfields from being modified */
void XMC_SCU_LockProtectedBits(void)
{
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_ENABLE;
100011fa:	22c3      	movs	r2, #195	; 0xc3
100011fc:	4b01      	ldr	r3, [pc, #4]	; (10001204 <XMC_SCU_CLOCK_GatePeripheralClock+0x20>)
100011fe:	625a      	str	r2, [r3, #36]	; 0x24
void XMC_SCU_CLOCK_GatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
  XMC_SCU_UnlockProtectedBits();
  SCU_CLK->CGATSET0 |= (uint32_t)peripheral;
  XMC_SCU_LockProtectedBits();
}
10001200:	4770      	bx	lr
10001202:	46c0      	nop			; (mov r8, r8)
10001204:	40010000 	.word	0x40010000
10001208:	40010300 	.word	0x40010300

1000120c <XMC_SCU_CLOCK_UngatePeripheralClock>:
}

/* API to make protected bitfields available for modification */
void XMC_SCU_UnlockProtectedBits(void)
{
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_DISABLE;
1000120c:	23c0      	movs	r3, #192	; 0xc0

  while(((SCU_GENERAL->PASSWD) & SCU_GENERAL_PASSWD_PROTS_Msk))
1000120e:	2104      	movs	r1, #4
}

/* API to make protected bitfields available for modification */
void XMC_SCU_UnlockProtectedBits(void)
{
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_DISABLE;
10001210:	4a08      	ldr	r2, [pc, #32]	; (10001234 <XMC_SCU_CLOCK_UngatePeripheralClock+0x28>)
10001212:	6253      	str	r3, [r2, #36]	; 0x24

  while(((SCU_GENERAL->PASSWD) & SCU_GENERAL_PASSWD_PROTS_Msk))
10001214:	6a53      	ldr	r3, [r2, #36]	; 0x24
10001216:	4219      	tst	r1, r3
10001218:	d1fc      	bne.n	10001214 <XMC_SCU_CLOCK_UngatePeripheralClock+0x8>
/* API which ungates a clock note at its source */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
  XMC_SCU_UnlockProtectedBits();
  SCU_CLK->CGATCLR0 |= (uint32_t)peripheral;
  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
1000121a:	2180      	movs	r1, #128	; 0x80

/* API which ungates a clock note at its source */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
  XMC_SCU_UnlockProtectedBits();
  SCU_CLK->CGATCLR0 |= (uint32_t)peripheral;
1000121c:	4a06      	ldr	r2, [pc, #24]	; (10001238 <XMC_SCU_CLOCK_UngatePeripheralClock+0x2c>)
  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
1000121e:	05c9      	lsls	r1, r1, #23

/* API which ungates a clock note at its source */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
  XMC_SCU_UnlockProtectedBits();
  SCU_CLK->CGATCLR0 |= (uint32_t)peripheral;
10001220:	6913      	ldr	r3, [r2, #16]
10001222:	4318      	orrs	r0, r3
10001224:	6110      	str	r0, [r2, #16]
  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
10001226:	6813      	ldr	r3, [r2, #0]
10001228:	420b      	tst	r3, r1
1000122a:	d1fc      	bne.n	10001226 <XMC_SCU_CLOCK_UngatePeripheralClock+0x1a>
}

/* API to lock protected bitfields from being modified */
void XMC_SCU_LockProtectedBits(void)
{
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_ENABLE;
1000122c:	22c3      	movs	r2, #195	; 0xc3
1000122e:	4b01      	ldr	r3, [pc, #4]	; (10001234 <XMC_SCU_CLOCK_UngatePeripheralClock+0x28>)
10001230:	625a      	str	r2, [r3, #36]	; 0x24
  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
  {
    /* Wait voltage suply stabilization */
  }
  XMC_SCU_LockProtectedBits();
}
10001232:	4770      	bx	lr
10001234:	40010000 	.word	0x40010000
10001238:	40010300 	.word	0x40010300

1000123c <XMC_SCU_CLOCK_IsPeripheralClockGated>:

/* Checks the status of peripheral clock gating */
bool XMC_SCU_CLOCK_IsPeripheralClockGated(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
  return (bool)((SCU_CLK->CGATSTAT0 & peripheral) != 0);
1000123c:	4b03      	ldr	r3, [pc, #12]	; (1000124c <XMC_SCU_CLOCK_IsPeripheralClockGated+0x10>)
1000123e:	689b      	ldr	r3, [r3, #8]
10001240:	4018      	ands	r0, r3
10001242:	1e43      	subs	r3, r0, #1
10001244:	4198      	sbcs	r0, r3
10001246:	b2c0      	uxtb	r0, r0
}
10001248:	4770      	bx	lr
1000124a:	46c0      	nop			; (mov r8, r8)
1000124c:	40010300 	.word	0x40010300

10001250 <XMC_SCU_CLOCK_ScaleMCLKFrequency>:
}


/* A utility routine which updates the fractional dividers in steps */
void XMC_SCU_CLOCK_ScaleMCLKFrequency(uint32_t idiv, uint32_t fdiv)
{
10001250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
}

/* API to make protected bitfields available for modification */
void XMC_SCU_UnlockProtectedBits(void)
{
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_DISABLE;
10001252:	23c0      	movs	r3, #192	; 0xc0

  while(((SCU_GENERAL->PASSWD) & SCU_GENERAL_PASSWD_PROTS_Msk))
10001254:	2404      	movs	r4, #4
}

/* API to make protected bitfields available for modification */
void XMC_SCU_UnlockProtectedBits(void)
{
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_DISABLE;
10001256:	4a2d      	ldr	r2, [pc, #180]	; (1000130c <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xbc>)
10001258:	6253      	str	r3, [r2, #36]	; 0x24

  while(((SCU_GENERAL->PASSWD) & SCU_GENERAL_PASSWD_PROTS_Msk))
1000125a:	6a53      	ldr	r3, [r2, #36]	; 0x24
1000125c:	421c      	tst	r4, r3
1000125e:	d1fc      	bne.n	1000125a <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xa>
  uint32_t curr_idiv;

  XMC_SCU_UnlockProtectedBits();

  /* Take a snapshot of value already programmed into IDIV */
  curr_idiv = (SCU_CLK->CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
10001260:	4a2b      	ldr	r2, [pc, #172]	; (10001310 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xc0>)

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
                   (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
                   (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
#else
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001262:	4d2c      	ldr	r5, [pc, #176]	; (10001314 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xc4>)
  uint32_t curr_idiv;

  XMC_SCU_UnlockProtectedBits();

  /* Take a snapshot of value already programmed into IDIV */
  curr_idiv = (SCU_CLK->CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
10001264:	6814      	ldr	r4, [r2, #0]

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
                   (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
                   (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
#else
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001266:	6813      	ldr	r3, [r2, #0]
  uint32_t curr_idiv;

  XMC_SCU_UnlockProtectedBits();

  /* Take a snapshot of value already programmed into IDIV */
  curr_idiv = (SCU_CLK->CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
10001268:	0424      	lsls	r4, r4, #16

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
                   (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
                   (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
#else
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
1000126a:	401d      	ands	r5, r3
1000126c:	4b2a      	ldr	r3, [pc, #168]	; (10001318 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xc8>)
  uint32_t curr_idiv;

  XMC_SCU_UnlockProtectedBits();

  /* Take a snapshot of value already programmed into IDIV */
  curr_idiv = (SCU_CLK->CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
1000126e:	0e24      	lsrs	r4, r4, #24
10001270:	432b      	orrs	r3, r5
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
                   (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
                   (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
#else
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
                   (uint32_t)(fdiv << SCU_CLK_CLKCR_FDIV_Pos) |
10001272:	430b      	orrs	r3, r1
                   (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
#endif

  while ((SCU_CLK->CLKCR)& SCU_CLK_CLKCR_VDDC2LOW_Msk)
10001274:	2180      	movs	r1, #128	; 0x80

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
                   (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
                   (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
#else
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001276:	6013      	str	r3, [r2, #0]
                   (uint32_t)(fdiv << SCU_CLK_CLKCR_FDIV_Pos) |
                   (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
#endif

  while ((SCU_CLK->CLKCR)& SCU_CLK_CLKCR_VDDC2LOW_Msk)
10001278:	05c9      	lsls	r1, r1, #23
1000127a:	6813      	ldr	r3, [r2, #0]
1000127c:	420b      	tst	r3, r1
1000127e:	d1fc      	bne.n	1000127a <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x2a>
  {
    /* Spin until the core supply stabilizes */
  }

  if(curr_idiv <= idiv)
10001280:	4284      	cmp	r4, r0
10001282:	d929      	bls.n	100012d8 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x88>

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) | 
                     (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
10001284:	2180      	movs	r1, #128	; 0x80
{
  while (curr_idiv > (target_idiv * 4UL))
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001286:	4b25      	ldr	r3, [pc, #148]	; (1000131c <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xcc>)
10001288:	0086      	lsls	r6, r0, #2
1000128a:	4a21      	ldr	r2, [pc, #132]	; (10001310 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xc0>)
1000128c:	469c      	mov	ip, r3
1000128e:	4f22      	ldr	r7, [pc, #136]	; (10001318 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xc8>)
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) | 
                     (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
10001290:	05c9      	lsls	r1, r1, #23
}

/* Utility routine to perform frequency up scaling */
static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
  while (curr_idiv > (target_idiv * 4UL))
10001292:	42b4      	cmp	r4, r6
10001294:	d90c      	bls.n	100012b0 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x60>
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001296:	4665      	mov	r5, ip
10001298:	6813      	ldr	r3, [r2, #0]
/* Utility routine to perform frequency up scaling */
static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
  while (curr_idiv > (target_idiv * 4UL))
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */
1000129a:	08a4      	lsrs	r4, r4, #2

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
1000129c:	402b      	ands	r3, r5
1000129e:	433b      	orrs	r3, r7
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) | 
100012a0:	0225      	lsls	r5, r4, #8
100012a2:	432b      	orrs	r3, r5
{
  while (curr_idiv > (target_idiv * 4UL))
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100012a4:	6013      	str	r3, [r2, #0]
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) | 
                     (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
100012a6:	6813      	ldr	r3, [r2, #0]
100012a8:	420b      	tst	r3, r1
100012aa:	d1fc      	bne.n	100012a6 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x56>
}

/* Utility routine to perform frequency up scaling */
static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
  while (curr_idiv > (target_idiv * 4UL))
100012ac:	42b4      	cmp	r4, r6
100012ae:	d8f2      	bhi.n	10001296 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x46>
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100012b0:	4a17      	ldr	r2, [pc, #92]	; (10001310 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xc0>)
100012b2:	4b1a      	ldr	r3, [pc, #104]	; (1000131c <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xcc>)
100012b4:	6811      	ldr	r1, [r2, #0]
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
100012b6:	0200      	lsls	r0, r0, #8
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100012b8:	400b      	ands	r3, r1
100012ba:	4917      	ldr	r1, [pc, #92]	; (10001318 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xc8>)
100012bc:	430b      	orrs	r3, r1
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
100012be:	2180      	movs	r1, #128	; 0x80
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
100012c0:	4303      	orrs	r3, r0
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100012c2:	6013      	str	r3, [r2, #0]
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
100012c4:	05c9      	lsls	r1, r1, #23
100012c6:	6813      	ldr	r3, [r2, #0]
100012c8:	420b      	tst	r3, r1
100012ca:	d1fc      	bne.n	100012c6 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x76>
}

/* API to lock protected bitfields from being modified */
void XMC_SCU_LockProtectedBits(void)
{
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_ENABLE;
100012cc:	22c3      	movs	r2, #195	; 0xc3
100012ce:	4b0f      	ldr	r3, [pc, #60]	; (1000130c <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xbc>)
100012d0:	625a      	str	r2, [r3, #36]	; 0x24
    /* Wait voltage suply stabilization */
  }

  XMC_SCU_LockProtectedBits();

  SystemCoreClockUpdate();
100012d2:	f7ff fee3 	bl	1000109c <SystemCoreClockUpdate>

}
100012d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
                     (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
100012d8:	2180      	movs	r1, #128	; 0x80
    if(0U == curr_idiv)
    {
      curr_idiv = 1U;
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100012da:	4a0d      	ldr	r2, [pc, #52]	; (10001310 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xc0>)
100012dc:	4f0f      	ldr	r7, [pc, #60]	; (1000131c <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xcc>)
100012de:	4e0e      	ldr	r6, [pc, #56]	; (10001318 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xc8>)
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
                     (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
100012e0:	05c9      	lsls	r1, r1, #23

/* Utility routine to perform frequency down scaling */
static void XMC_SCU_CLOCK_lFrequencyDownScaling(uint32_t curr_idiv, uint32_t target_idiv)
{

  while ((curr_idiv * 4UL) < target_idiv)
100012e2:	00a3      	lsls	r3, r4, #2
100012e4:	4298      	cmp	r0, r3
100012e6:	d9e3      	bls.n	100012b0 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x60>
  {
    if(0U == curr_idiv)
100012e8:	2c00      	cmp	r4, #0
100012ea:	d00a      	beq.n	10001302 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xb2>
100012ec:	02a5      	lsls	r5, r4, #10
100012ee:	1c1c      	adds	r4, r3, #0
    {
      curr_idiv = 1U;
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100012f0:	6813      	ldr	r3, [r2, #0]
100012f2:	403b      	ands	r3, r7
100012f4:	4333      	orrs	r3, r6
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
100012f6:	432b      	orrs	r3, r5
    if(0U == curr_idiv)
    {
      curr_idiv = 1U;
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100012f8:	6013      	str	r3, [r2, #0]
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
                     (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
100012fa:	6813      	ldr	r3, [r2, #0]
100012fc:	420b      	tst	r3, r1
100012fe:	d1fc      	bne.n	100012fa <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xaa>
10001300:	e7ef      	b.n	100012e2 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x92>
static void XMC_SCU_CLOCK_lFrequencyDownScaling(uint32_t curr_idiv, uint32_t target_idiv)
{

  while ((curr_idiv * 4UL) < target_idiv)
  {
    if(0U == curr_idiv)
10001302:	2580      	movs	r5, #128	; 0x80
10001304:	2404      	movs	r4, #4
10001306:	00ed      	lsls	r5, r5, #3
10001308:	e7f2      	b.n	100012f0 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xa0>
1000130a:	46c0      	nop			; (mov r8, r8)
1000130c:	40010000 	.word	0x40010000
10001310:	40010300 	.word	0x40010300
10001314:	c00fff00 	.word	0xc00fff00
10001318:	3ff00000 	.word	0x3ff00000
1000131c:	c00f00ff 	.word	0xc00f00ff

10001320 <XMC_SCU_CLOCK_Init>:
}

/* API to make protected bitfields available for modification */
void XMC_SCU_UnlockProtectedBits(void)
{
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_DISABLE;
10001320:	23c0      	movs	r3, #192	; 0xc0

  while(((SCU_GENERAL->PASSWD) & SCU_GENERAL_PASSWD_PROTS_Msk))
10001322:	2104      	movs	r1, #4
}

/* API to make protected bitfields available for modification */
void XMC_SCU_UnlockProtectedBits(void)
{
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_DISABLE;
10001324:	4a0b      	ldr	r2, [pc, #44]	; (10001354 <XMC_SCU_CLOCK_Init+0x34>)
}


/* API which initializes the clock tree ofthe device */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
10001326:	b510      	push	{r4, lr}
}

/* API to make protected bitfields available for modification */
void XMC_SCU_UnlockProtectedBits(void)
{
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_DISABLE;
10001328:	6253      	str	r3, [r2, #36]	; 0x24

  while(((SCU_GENERAL->PASSWD) & SCU_GENERAL_PASSWD_PROTS_Msk))
1000132a:	6a53      	ldr	r3, [r2, #36]	; 0x24
1000132c:	4219      	tst	r1, r3
1000132e:	d1fc      	bne.n	1000132a <XMC_SCU_CLOCK_Init+0xa>
10001330:	6882      	ldr	r2, [r0, #8]
10001332:	6841      	ldr	r1, [r0, #4]
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
10001334:	4c08      	ldr	r4, [pc, #32]	; (10001358 <XMC_SCU_CLOCK_Init+0x38>)
10001336:	4311      	orrs	r1, r2
10001338:	6823      	ldr	r3, [r4, #0]
1000133a:	4a08      	ldr	r2, [pc, #32]	; (1000135c <XMC_SCU_CLOCK_Init+0x3c>)
1000133c:	4013      	ands	r3, r2
}

/* API to lock protected bitfields from being modified */
void XMC_SCU_LockProtectedBits(void)
{
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_ENABLE;
1000133e:	22c3      	movs	r2, #195	; 0xc3
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
                   config->rtc_src |
10001340:	430b      	orrs	r3, r1
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
10001342:	6023      	str	r3, [r4, #0]
}

/* API to lock protected bitfields from being modified */
void XMC_SCU_LockProtectedBits(void)
{
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_ENABLE;
10001344:	4b03      	ldr	r3, [pc, #12]	; (10001354 <XMC_SCU_CLOCK_Init+0x34>)
10001346:	625a      	str	r2, [r3, #36]	; 0x24

  /* Close the lock opened above. */
  XMC_SCU_LockProtectedBits();

  /* Update the dividers now */
  XMC_SCU_CLOCK_ScaleMCLKFrequency(config->idiv, config->fdiv);
10001348:	7843      	ldrb	r3, [r0, #1]
1000134a:	7801      	ldrb	r1, [r0, #0]
1000134c:	1c18      	adds	r0, r3, #0
1000134e:	f7ff ff7f 	bl	10001250 <XMC_SCU_CLOCK_ScaleMCLKFrequency>

}
10001352:	bd10      	pop	{r4, pc}
10001354:	40010000 	.word	0x40010000
10001358:	40010300 	.word	0x40010300
1000135c:	fff0ffff 	.word	0xfff0ffff

10001360 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (SystemCoreClock);
10001360:	4b01      	ldr	r3, [pc, #4]	; (10001368 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x8>)
10001362:	6818      	ldr	r0, [r3, #0]
}
10001364:	4770      	bx	lr
10001366:	46c0      	nop			; (mov r8, r8)
10001368:	20003ffc 	.word	0x20003ffc

1000136c <XMC_SCU_INTERRUPT_SetEventHandler>:

/*
 * API to assign the event handler function to be executed on occurrence of the selected event
 */
XMC_SCU_STATUS_t XMC_SCU_INTERRUPT_SetEventHandler(XMC_SCU_INTERRUPT_EVENT_t event, XMC_SCU_INTERRUPT_EVENT_HANDLER_t handler)
{
1000136c:	b510      	push	{r4, lr}
  XMC_ASSERT("XMC_SCU_INTERRUPT_SetEventHandler: Invalid event", XMC_SCU_INTERRUPT_IsValidEvent(event));
  XMC_ASSERT("XMC_SCU_INTERRUPT_SetEventHandler: Invalid handler", handler != NULL);

  index = 0U;

  while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
1000136e:	07c3      	lsls	r3, r0, #31
10001370:	d413      	bmi.n	1000139a <XMC_SCU_INTERRUPT_SetEventHandler+0x2e>
10001372:	2300      	movs	r3, #0
10001374:	2401      	movs	r4, #1
10001376:	e001      	b.n	1000137c <XMC_SCU_INTERRUPT_SetEventHandler+0x10>
10001378:	2b20      	cmp	r3, #32
1000137a:	d00c      	beq.n	10001396 <XMC_SCU_INTERRUPT_SetEventHandler+0x2a>
1000137c:	1c02      	adds	r2, r0, #0
  {
    index++;
1000137e:	3301      	adds	r3, #1
  XMC_ASSERT("XMC_SCU_INTERRUPT_SetEventHandler: Invalid event", XMC_SCU_INTERRUPT_IsValidEvent(event));
  XMC_ASSERT("XMC_SCU_INTERRUPT_SetEventHandler: Invalid handler", handler != NULL);

  index = 0U;

  while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
10001380:	40da      	lsrs	r2, r3
10001382:	4214      	tst	r4, r2
10001384:	d0f8      	beq.n	10001378 <XMC_SCU_INTERRUPT_SetEventHandler+0xc>
    index++;
  }

  if (index == XMC_SCU_INTERRUPT_EVENT_MAX)
  {
    status = XMC_SCU_STATUS_ERROR;
10001386:	2001      	movs	r0, #1
  while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
  {
    index++;
  }

  if (index == XMC_SCU_INTERRUPT_EVENT_MAX)
10001388:	2b20      	cmp	r3, #32
1000138a:	d003      	beq.n	10001394 <XMC_SCU_INTERRUPT_SetEventHandler+0x28>
    status = XMC_SCU_STATUS_ERROR;
  }
  else
  {
    event_handler_list[index] = handler;
    status = XMC_SCU_STATUS_OK;
1000138c:	2000      	movs	r0, #0
  {
    status = XMC_SCU_STATUS_ERROR;
  }
  else
  {
    event_handler_list[index] = handler;
1000138e:	4a04      	ldr	r2, [pc, #16]	; (100013a0 <XMC_SCU_INTERRUPT_SetEventHandler+0x34>)
10001390:	009b      	lsls	r3, r3, #2
10001392:	5099      	str	r1, [r3, r2]
    status = XMC_SCU_STATUS_OK;
  }

  return (status);
}
10001394:	bd10      	pop	{r4, pc}
    index++;
  }

  if (index == XMC_SCU_INTERRUPT_EVENT_MAX)
  {
    status = XMC_SCU_STATUS_ERROR;
10001396:	2001      	movs	r0, #1
10001398:	e7fc      	b.n	10001394 <XMC_SCU_INTERRUPT_SetEventHandler+0x28>
  XMC_SCU_STATUS_t status;

  XMC_ASSERT("XMC_SCU_INTERRUPT_SetEventHandler: Invalid event", XMC_SCU_INTERRUPT_IsValidEvent(event));
  XMC_ASSERT("XMC_SCU_INTERRUPT_SetEventHandler: Invalid handler", handler != NULL);

  index = 0U;
1000139a:	2300      	movs	r3, #0
1000139c:	e7f6      	b.n	1000138c <XMC_SCU_INTERRUPT_SetEventHandler+0x20>
1000139e:	46c0      	nop			; (mov r8, r8)
100013a0:	200008dc 	.word	0x200008dc

100013a4 <XMC_SCU_IRQHandler>:

/*
 * A common function to execute callback functions for multiple events
 */
void XMC_SCU_IRQHandler(uint32_t sr_num)
{
100013a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t index;
  XMC_SCU_INTERRUPT_EVENT_t event;
  XMC_SCU_INTERRUPT_EVENT_HANDLER_t event_handler;

  index = 0U;
  event = XMC_SCU_INTERUPT_GetEventStatus() & event_masks[sr_num];
100013a6:	4910      	ldr	r1, [pc, #64]	; (100013e8 <XMC_SCU_IRQHandler+0x44>)
/* API to get the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
  XMC_SCU_INTERRUPT_EVENT_t tmp;

  tmp = SCU_INTERRUPT->SRRAW;
100013a8:	4b10      	ldr	r3, [pc, #64]	; (100013ec <XMC_SCU_IRQHandler+0x48>)
  uint32_t index;
  XMC_SCU_INTERRUPT_EVENT_t event;
  XMC_SCU_INTERRUPT_EVENT_HANDLER_t event_handler;

  index = 0U;
  event = XMC_SCU_INTERUPT_GetEventStatus() & event_masks[sr_num];
100013aa:	0080      	lsls	r0, r0, #2
/* API to get the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
  XMC_SCU_INTERRUPT_EVENT_t tmp;

  tmp = SCU_INTERRUPT->SRRAW;
100013ac:	681a      	ldr	r2, [r3, #0]
  uint32_t index;
  XMC_SCU_INTERRUPT_EVENT_t event;
  XMC_SCU_INTERRUPT_EVENT_HANDLER_t event_handler;

  index = 0U;
  event = XMC_SCU_INTERUPT_GetEventStatus() & event_masks[sr_num];
100013ae:	5845      	ldr	r5, [r0, r1]
  XMC_SCU_INTERRUPT_ClearEventStatus(event);

  while ((event != 0) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
100013b0:	2400      	movs	r4, #0
  uint32_t index;
  XMC_SCU_INTERRUPT_EVENT_t event;
  XMC_SCU_INTERRUPT_EVENT_HANDLER_t event_handler;

  index = 0U;
  event = XMC_SCU_INTERUPT_GetEventStatus() & event_masks[sr_num];
100013b2:	4015      	ands	r5, r2
}

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
  SCU_INTERRUPT->SRCLR |= (uint32_t)event;
100013b4:	689a      	ldr	r2, [r3, #8]
100013b6:	432a      	orrs	r2, r5
100013b8:	609a      	str	r2, [r3, #8]

  index = 0U;
  event = XMC_SCU_INTERUPT_GetEventStatus() & event_masks[sr_num];
  XMC_SCU_INTERRUPT_ClearEventStatus(event);

  while ((event != 0) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
100013ba:	2d00      	cmp	r5, #0
100013bc:	d013      	beq.n	100013e6 <XMC_SCU_IRQHandler+0x42>
  {
    if ((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) != 0U)
100013be:	2601      	movs	r6, #1
    {
      event &= ~((XMC_SCU_INTERRUPT_EVENT_t)1 << index);
      event_handler = event_handler_list[index];
100013c0:	4f0b      	ldr	r7, [pc, #44]	; (100013f0 <XMC_SCU_IRQHandler+0x4c>)
100013c2:	e001      	b.n	100013c8 <XMC_SCU_IRQHandler+0x24>

  index = 0U;
  event = XMC_SCU_INTERUPT_GetEventStatus() & event_masks[sr_num];
  XMC_SCU_INTERRUPT_ClearEventStatus(event);

  while ((event != 0) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
100013c4:	2c20      	cmp	r4, #32
100013c6:	d00e      	beq.n	100013e6 <XMC_SCU_IRQHandler+0x42>
  {
    if ((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) != 0U)
100013c8:	1c2b      	adds	r3, r5, #0
100013ca:	40e3      	lsrs	r3, r4
100013cc:	421e      	tst	r6, r3
100013ce:	d007      	beq.n	100013e0 <XMC_SCU_IRQHandler+0x3c>
    {
      event &= ~((XMC_SCU_INTERRUPT_EVENT_t)1 << index);
100013d0:	1c33      	adds	r3, r6, #0
100013d2:	40a3      	lsls	r3, r4
100013d4:	439d      	bics	r5, r3
100013d6:	00a3      	lsls	r3, r4, #2
      event_handler = event_handler_list[index];
100013d8:	59db      	ldr	r3, [r3, r7]
      if (event_handler != NULL)
100013da:	2b00      	cmp	r3, #0
100013dc:	d000      	beq.n	100013e0 <XMC_SCU_IRQHandler+0x3c>
      {
        event_handler();
100013de:	4798      	blx	r3
      }

      /* break; XMC1: Only PULSE interrupts */
    }
    index++;
100013e0:	3401      	adds	r4, #1

  index = 0U;
  event = XMC_SCU_INTERUPT_GetEventStatus() & event_masks[sr_num];
  XMC_SCU_INTERRUPT_ClearEventStatus(event);

  while ((event != 0) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
100013e2:	2d00      	cmp	r5, #0
100013e4:	d1ee      	bne.n	100013c4 <XMC_SCU_IRQHandler+0x20>

      /* break; XMC1: Only PULSE interrupts */
    }
    index++;
  }
}
100013e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100013e8:	10004384 	.word	0x10004384
100013ec:	40010038 	.word	0x40010038
100013f0:	200008dc 	.word	0x200008dc

100013f4 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
100013f4:	b538      	push	{r3, r4, r5, lr}
  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
  switch ((uint32_t)module)
100013f6:	4b0a      	ldr	r3, [pc, #40]	; (10001420 <XMC_CCU4_Init+0x2c>)
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
100013f8:	1c04      	adds	r4, r0, #0
100013fa:	1c0d      	adds	r5, r1, #0
  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
  switch ((uint32_t)module)
100013fc:	4298      	cmp	r0, r3
100013fe:	d102      	bne.n	10001406 <XMC_CCU4_Init+0x12>
  {
    case (uint32_t)CCU40:
      XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
10001400:	2004      	movs	r0, #4
10001402:	f7ff ff03 	bl	1000120c <XMC_SCU_CLOCK_UngatePeripheralClock>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
10001406:	2280      	movs	r2, #128	; 0x80
10001408:	68e3      	ldr	r3, [r4, #12]
1000140a:	0052      	lsls	r2, r2, #1
1000140c:	4313      	orrs	r3, r2
1000140e:	60e3      	str	r3, [r4, #12]
  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
  
  gctrl = module->GCTRL;
10001410:	6821      	ldr	r1, [r4, #0]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
10001412:	4b04      	ldr	r3, [pc, #16]	; (10001424 <XMC_CCU4_Init+0x30>)
10001414:	400b      	ands	r3, r1
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
10001416:	03a9      	lsls	r1, r5, #14
10001418:	4319      	orrs	r1, r3
  
  module->GCTRL = gctrl;
1000141a:	6021      	str	r1, [r4, #0]
}
1000141c:	bd38      	pop	{r3, r4, r5, pc}
1000141e:	46c0      	nop			; (mov r8, r8)
10001420:	48040000 	.word	0x48040000
10001424:	ffff3fff 	.word	0xffff3fff

10001428 <XMC_CCU4_SLICE_CompareInit>:
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
10001428:	680b      	ldr	r3, [r1, #0]
1000142a:	6143      	str	r3, [r0, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
1000142c:	794b      	ldrb	r3, [r1, #5]
1000142e:	069b      	lsls	r3, r3, #26
10001430:	0fdb      	lsrs	r3, r3, #31
10001432:	051b      	lsls	r3, r3, #20
10001434:	6043      	str	r3, [r0, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
10001436:	790b      	ldrb	r3, [r1, #4]
10001438:	071b      	lsls	r3, r3, #28
1000143a:	0f1b      	lsrs	r3, r3, #28
1000143c:	6243      	str	r3, [r0, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
1000143e:	794b      	ldrb	r3, [r1, #5]
10001440:	071b      	lsls	r3, r3, #28
10001442:	0f1b      	lsrs	r3, r3, #28
10001444:	6203      	str	r3, [r0, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
10001446:	794b      	ldrb	r3, [r1, #5]
10001448:	06db      	lsls	r3, r3, #27
1000144a:	0fdb      	lsrs	r3, r3, #31
1000144c:	6183      	str	r3, [r0, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
1000144e:	790b      	ldrb	r3, [r1, #4]
10001450:	091b      	lsrs	r3, r3, #4
10001452:	62c3      	str	r3, [r0, #44]	; 0x2c
}
10001454:	4770      	bx	lr
10001456:	46c0      	nop			; (mov r8, r8)

10001458 <XMC_CCU4_SLICE_SetPrescaler>:
{
  uint32_t fpc;
  
  XMC_ASSERT("XMC_CCU4_SLICE_SetPrescaler:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));

  fpc = slice->FPC;
10001458:	6a82      	ldr	r2, [r0, #40]	; 0x28
  fpc &= ~((uint32_t) CCU4_CC4_FPC_PVAL_Msk);
1000145a:	4b03      	ldr	r3, [pc, #12]	; (10001468 <XMC_CCU4_SLICE_SetPrescaler+0x10>)
1000145c:	4013      	ands	r3, r2
  fpc |= ((uint32_t) div_val) << CCU4_CC4_FPC_PVAL_Pos;
1000145e:	020a      	lsls	r2, r1, #8
10001460:	4313      	orrs	r3, r2
  slice->FPC = fpc;
10001462:	6283      	str	r3, [r0, #40]	; 0x28
  /* 
   * In any case, update the initial value of the divider which is to be loaded once the prescaler increments to the 
   * compare value.
   */
  slice->PSC = (uint32_t) div_val;
10001464:	6241      	str	r1, [r0, #36]	; 0x24
}
10001466:	4770      	bx	lr
10001468:	fffff0ff 	.word	0xfffff0ff

1000146c <XMC_CCU4_SLICE_SetInterruptNode>:

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
1000146c:	23a8      	movs	r3, #168	; 0xa8

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
1000146e:	b530      	push	{r4, r5, lr}

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
10001470:	58c5      	ldr	r5, [r0, r3]
10001472:	2909      	cmp	r1, #9
10001474:	d80b      	bhi.n	1000148e <XMC_CCU4_SLICE_SetInterruptNode+0x22>
10001476:	4b07      	ldr	r3, [pc, #28]	; (10001494 <XMC_CCU4_SLICE_SetInterruptNode+0x28>)
10001478:	0089      	lsls	r1, r1, #2
1000147a:	58cc      	ldr	r4, [r1, r3]
1000147c:	43e3      	mvns	r3, r4
1000147e:	4c06      	ldr	r4, [pc, #24]	; (10001498 <XMC_CCU4_SLICE_SetInterruptNode+0x2c>)
10001480:	5909      	ldr	r1, [r1, r4]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
      break;
  }
  
  srs &= ~mask; 
  srs |= (uint32_t)sr << pos;
10001482:	408a      	lsls	r2, r1
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
      pos  = CCU4_CC4_SRS_E2SR_Pos;
      break;
  }
  
  srs &= ~mask; 
10001484:	402b      	ands	r3, r5
  srs |= (uint32_t)sr << pos;
10001486:	431a      	orrs	r2, r3
  slice->SRS = srs;
10001488:	23a8      	movs	r3, #168	; 0xa8
1000148a:	50c2      	str	r2, [r0, r3]
}
1000148c:	bd30      	pop	{r4, r5, pc}

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
1000148e:	210c      	movs	r1, #12
10001490:	4b02      	ldr	r3, [pc, #8]	; (1000149c <XMC_CCU4_SLICE_SetInterruptNode+0x30>)
10001492:	e7f6      	b.n	10001482 <XMC_CCU4_SLICE_SetInterruptNode+0x16>
10001494:	100043b8 	.word	0x100043b8
10001498:	10004390 	.word	0x10004390
1000149c:	ffffcfff 	.word	0xffffcfff

100014a0 <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
100014a0:	b510      	push	{r4, lr}
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
100014a2:	2403      	movs	r4, #3
100014a4:	0049      	lsls	r1, r1, #1
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
100014a6:	408a      	lsls	r2, r1
void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
100014a8:	408c      	lsls	r4, r1
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
100014aa:	1c11      	adds	r1, r2, #0
void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
100014ac:	6f43      	ldr	r3, [r0, #116]	; 0x74
100014ae:	43a3      	bics	r3, r4
100014b0:	6743      	str	r3, [r0, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
100014b2:	6f43      	ldr	r3, [r0, #116]	; 0x74
100014b4:	4319      	orrs	r1, r3
100014b6:	6741      	str	r1, [r0, #116]	; 0x74
}
100014b8:	bd10      	pop	{r4, pc}
100014ba:	46c0      	nop			; (mov r8, r8)

100014bc <__aeabi_uidiv>:
 * API IMPLEMENTATION - aeabi routines
 **********************************************************************************************************************/
/* This function performs unsigned integer division */
uint32_t __aeabi_uidiv(uint32_t dividend, uint32_t divisor)
{
  MATH->DIVCON  = XMC_MATH_UNSIGNED_DIVISION;
100014bc:	2204      	movs	r2, #4
100014be:	4b03      	ldr	r3, [pc, #12]	; (100014cc <__aeabi_uidiv+0x10>)
100014c0:	635a      	str	r2, [r3, #52]	; 0x34
  MATH->DVD     = dividend;
100014c2:	6218      	str	r0, [r3, #32]
  MATH->DVS     = divisor;
100014c4:	6259      	str	r1, [r3, #36]	; 0x24

  return ((uint32_t) MATH->QUOT);
100014c6:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
100014c8:	4770      	bx	lr
100014ca:	46c0      	nop			; (mov r8, r8)
100014cc:	40030000 	.word	0x40030000

100014d0 <__aeabi_idiv>:

/* This function performs signed integer division */
int32_t __aeabi_idiv(int32_t dividend, int32_t divisor)
{
  MATH->DIVCON  = XMC_MATH_SIGNED_DIVISION;
100014d0:	2200      	movs	r2, #0
100014d2:	4b03      	ldr	r3, [pc, #12]	; (100014e0 <__aeabi_idiv+0x10>)
100014d4:	635a      	str	r2, [r3, #52]	; 0x34
  MATH->DVD     = dividend;
100014d6:	6218      	str	r0, [r3, #32]
  MATH->DVS     = divisor;
100014d8:	6259      	str	r1, [r3, #36]	; 0x24

  return ((int32_t) MATH->QUOT);
100014da:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
100014dc:	4770      	bx	lr
100014de:	46c0      	nop			; (mov r8, r8)
100014e0:	40030000 	.word	0x40030000

100014e4 <__aeabi_uidivmod>:
/* This function performs unsigned integer division modulo */
uint64_t __aeabi_uidivmod(uint32_t dividend, uint32_t divisor)
{
  uint64_t remainder;

  MATH->DIVCON  = XMC_MATH_UNSIGNED_DIVISION;
100014e4:	2204      	movs	r2, #4
100014e6:	4b03      	ldr	r3, [pc, #12]	; (100014f4 <__aeabi_uidivmod+0x10>)
100014e8:	635a      	str	r2, [r3, #52]	; 0x34
  MATH->DVD     = dividend;
100014ea:	6218      	str	r0, [r3, #32]
  MATH->DVS     = divisor;
100014ec:	6259      	str	r1, [r3, #36]	; 0x24

  remainder = ((uint64_t) MATH->RMD) << 32U;
100014ee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  return (remainder | MATH->QUOT);
100014f0:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
100014f2:	4770      	bx	lr
100014f4:	40030000 	.word	0x40030000

100014f8 <XMC_RTC_Start>:
/*
 * Enables RTC peripheral to start counting time
 */
void XMC_RTC_Start(void)
{
  while((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_CTR_Msk) != 0U)
100014f8:	2201      	movs	r2, #1
100014fa:	4905      	ldr	r1, [pc, #20]	; (10001510 <XMC_RTC_Start+0x18>)
100014fc:	6c8b      	ldr	r3, [r1, #72]	; 0x48
100014fe:	421a      	tst	r2, r3
10001500:	d1fc      	bne.n	100014fc <XMC_RTC_Start+0x4>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->CTR |= (uint32_t)RTC_CTR_ENB_Msk;
10001502:	2301      	movs	r3, #1
10001504:	4a03      	ldr	r2, [pc, #12]	; (10001514 <XMC_RTC_Start+0x1c>)
10001506:	6851      	ldr	r1, [r2, #4]
10001508:	430b      	orrs	r3, r1
1000150a:	6053      	str	r3, [r2, #4]
}
1000150c:	4770      	bx	lr
1000150e:	46c0      	nop			; (mov r8, r8)
10001510:	40010000 	.word	0x40010000
10001514:	40010a00 	.word	0x40010a00

10001518 <XMC_RTC_Stop>:
/*
 * Disables RTC peripheral to start counting time
 */
void XMC_RTC_Stop(void)
{
  while((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_CTR_Msk) != 0U)
10001518:	2201      	movs	r2, #1
1000151a:	4905      	ldr	r1, [pc, #20]	; (10001530 <XMC_RTC_Stop+0x18>)
1000151c:	6c8b      	ldr	r3, [r1, #72]	; 0x48
1000151e:	421a      	tst	r2, r3
10001520:	d1fc      	bne.n	1000151c <XMC_RTC_Stop+0x4>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->CTR &= ~(uint32_t)RTC_CTR_ENB_Msk;
10001522:	2101      	movs	r1, #1
10001524:	4a03      	ldr	r2, [pc, #12]	; (10001534 <XMC_RTC_Stop+0x1c>)
10001526:	6853      	ldr	r3, [r2, #4]
10001528:	438b      	bics	r3, r1
1000152a:	6053      	str	r3, [r2, #4]
}
1000152c:	4770      	bx	lr
1000152e:	46c0      	nop			; (mov r8, r8)
10001530:	40010000 	.word	0x40010000
10001534:	40010a00 	.word	0x40010a00

10001538 <XMC_RTC_SetPrescaler>:
 */
void XMC_RTC_SetPrescaler(uint16_t prescaler)
{
  XMC_ASSERT("XMC_RTC_SetPrescaler:Wrong prescaler value", (prescaler < XMC_RTC_MAXPRESCALER));
  
  while((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_CTR_Msk) != 0U)
10001538:	2201      	movs	r2, #1
1000153a:	4906      	ldr	r1, [pc, #24]	; (10001554 <XMC_RTC_SetPrescaler+0x1c>)
1000153c:	6c8b      	ldr	r3, [r1, #72]	; 0x48
1000153e:	421a      	tst	r2, r3
10001540:	d1fc      	bne.n	1000153c <XMC_RTC_SetPrescaler+0x4>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->CTR = (RTC->CTR & ~(uint32_t)RTC_CTR_DIV_Msk) |
10001542:	4a05      	ldr	r2, [pc, #20]	; (10001558 <XMC_RTC_SetPrescaler+0x20>)
             ((uint32_t)prescaler << (uint32_t)RTC_CTR_DIV_Pos);
10001544:	0400      	lsls	r0, r0, #16
  
  while((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_CTR_Msk) != 0U)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->CTR = (RTC->CTR & ~(uint32_t)RTC_CTR_DIV_Msk) |
10001546:	6853      	ldr	r3, [r2, #4]
10001548:	041b      	lsls	r3, r3, #16
1000154a:	0c1b      	lsrs	r3, r3, #16
1000154c:	4318      	orrs	r0, r3
1000154e:	6050      	str	r0, [r2, #4]
             ((uint32_t)prescaler << (uint32_t)RTC_CTR_DIV_Pos);
}
10001550:	4770      	bx	lr
10001552:	46c0      	nop			; (mov r8, r8)
10001554:	40010000 	.word	0x40010000
10001558:	40010a00 	.word	0x40010a00

1000155c <XMC_UART_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_Init(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config)
{
1000155c:	b570      	push	{r4, r5, r6, lr}
1000155e:	1c0d      	adds	r5, r1, #0
10001560:	1c04      	adds	r4, r0, #0
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
10001562:	f000 f85d 	bl	10001620 <XMC_USIC_CH_Enable>
  
  if(config->oversampling != 0U)
10001566:	79ea      	ldrb	r2, [r5, #7]
10001568:	2a00      	cmp	r2, #0
1000156a:	d026      	beq.n	100015ba <XMC_UART_CH_Init+0x5e>
1000156c:	0856      	lsrs	r6, r2, #1
1000156e:	3601      	adds	r6, #1
10001570:	0236      	lsls	r6, r6, #8
  {
    oversampling = (uint32_t)config->oversampling;
  }
  
  /* Configure baud rate */
  (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
10001572:	1c20      	adds	r0, r4, #0
10001574:	6829      	ldr	r1, [r5, #0]
10001576:	f000 f86d 	bl	10001654 <XMC_USIC_CH_SetBaudrate>
1000157a:	2201      	movs	r2, #1
   * Configure the number of stop bits
   * Pulse length is set to 0 to have standard UART signaling, 
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
1000157c:	79ab      	ldrb	r3, [r5, #6]
1000157e:	3b01      	subs	r3, #1
10001580:	005b      	lsls	r3, r3, #1
10001582:	4313      	orrs	r3, r2
10001584:	431e      	orrs	r6, r3
10001586:	63e6      	str	r6, [r4, #60]	; 0x3c
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
10001588:	792b      	ldrb	r3, [r5, #4]
1000158a:	3202      	adds	r2, #2
1000158c:	3b01      	subs	r3, #1
1000158e:	061b      	lsls	r3, r3, #24
10001590:	32ff      	adds	r2, #255	; 0xff
10001592:	4313      	orrs	r3, r2
10001594:	6363      	str	r3, [r4, #52]	; 0x34
		              ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
10001596:	796b      	ldrb	r3, [r5, #5]
10001598:	2b00      	cmp	r3, #0
1000159a:	d112      	bne.n	100015c2 <XMC_UART_CH_Init+0x66>
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
  }
  else
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
1000159c:	792a      	ldrb	r2, [r5, #4]
1000159e:	6b61      	ldr	r1, [r4, #52]	; 0x34
100015a0:	1e53      	subs	r3, r2, #1
100015a2:	041b      	lsls	r3, r3, #16
100015a4:	430b      	orrs	r3, r1
100015a6:	6363      	str	r3, [r4, #52]	; 0x34
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
100015a8:	23a0      	movs	r3, #160	; 0xa0
100015aa:	00db      	lsls	r3, r3, #3
100015ac:	63a3      	str	r3, [r4, #56]	; 0x38
                  USIC_CH_TCSR_TDSSM_Msk;

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
100015ae:	2301      	movs	r3, #1
100015b0:	425b      	negs	r3, r3
100015b2:	64e3      	str	r3, [r4, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
100015b4:	892b      	ldrh	r3, [r5, #8]
100015b6:	6423      	str	r3, [r4, #64]	; 0x40
}
100015b8:	bd70      	pop	{r4, r5, r6, pc}
100015ba:	2690      	movs	r6, #144	; 0x90
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_Init(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config)
{
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;
100015bc:	2210      	movs	r2, #16
100015be:	0136      	lsls	r6, r6, #4
100015c0:	e7d7      	b.n	10001572 <XMC_UART_CH_Init+0x16>
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
		              ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
100015c2:	6b62      	ldr	r2, [r4, #52]	; 0x34
100015c4:	3b01      	subs	r3, #1
100015c6:	041b      	lsls	r3, r3, #16
100015c8:	4313      	orrs	r3, r2
100015ca:	6363      	str	r3, [r4, #52]	; 0x34
100015cc:	e7ec      	b.n	100015a8 <XMC_UART_CH_Init+0x4c>
100015ce:	46c0      	nop			; (mov r8, r8)

100015d0 <XMC_UART_CH_Transmit>:
}

void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data)
{
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
100015d0:	2384      	movs	r3, #132	; 0x84
100015d2:	005b      	lsls	r3, r3, #1
100015d4:	58c2      	ldr	r2, [r0, r3]
100015d6:	23e0      	movs	r3, #224	; 0xe0
100015d8:	04db      	lsls	r3, r3, #19
100015da:	421a      	tst	r2, r3
100015dc:	d10b      	bne.n	100015f6 <XMC_UART_CH_Transmit+0x26>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
100015de:	227f      	movs	r2, #127	; 0x7f
100015e0:	6b83      	ldr	r3, [r0, #56]	; 0x38
100015e2:	4393      	bics	r3, r2
  {
    /* Wait till the Transmit Buffer is free for transmission */
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
100015e4:	b2db      	uxtb	r3, r3
100015e6:	2b80      	cmp	r3, #128	; 0x80
100015e8:	d0fa      	beq.n	100015e0 <XMC_UART_CH_Transmit+0x10>
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
  channel->PSCR = flag;
100015ea:	2380      	movs	r3, #128	; 0x80
100015ec:	019b      	lsls	r3, r3, #6
100015ee:	64c3      	str	r3, [r0, #76]	; 0x4c
  
    /* Clear the Transmit Buffer indication flag */
    XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
  
    /*Transmit data */
    channel->TBUF[0U] = data;
100015f0:	2380      	movs	r3, #128	; 0x80
100015f2:	50c1      	str	r1, [r0, r3]
  }
  else
  {
    channel->IN[0U] = data;
  }
}
100015f4:	4770      	bx	lr
    /*Transmit data */
    channel->TBUF[0U] = data;
  }
  else
  {
    channel->IN[0U] = data;
100015f6:	23c0      	movs	r3, #192	; 0xc0
100015f8:	005b      	lsls	r3, r3, #1
100015fa:	50c1      	str	r1, [r0, r3]
100015fc:	e7fa      	b.n	100015f4 <XMC_UART_CH_Transmit+0x24>
100015fe:	46c0      	nop			; (mov r8, r8)

10001600 <XMC_UART_CH_GetReceivedData>:
uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
10001600:	2386      	movs	r3, #134	; 0x86
10001602:	005b      	lsls	r3, r3, #1
10001604:	58c2      	ldr	r2, [r0, r3]
10001606:	23e0      	movs	r3, #224	; 0xe0
10001608:	04db      	lsls	r3, r3, #19
1000160a:	421a      	tst	r2, r3
1000160c:	d004      	beq.n	10001618 <XMC_UART_CH_GetReceivedData+0x18>
  {
    retval = (uint16_t)channel->RBUF;
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
1000160e:	238e      	movs	r3, #142	; 0x8e
10001610:	005b      	lsls	r3, r3, #1
10001612:	58c0      	ldr	r0, [r0, r3]
10001614:	b280      	uxth	r0, r0
  }

  return retval;
}
10001616:	4770      	bx	lr
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
  {
    retval = (uint16_t)channel->RBUF;
10001618:	6d40      	ldr	r0, [r0, #84]	; 0x54
1000161a:	b280      	uxth	r0, r0
1000161c:	e7fb      	b.n	10001616 <XMC_UART_CH_GetReceivedData+0x16>
1000161e:	46c0      	nop			; (mov r8, r8)

10001620 <XMC_USIC_CH_Enable>:

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
10001620:	2390      	movs	r3, #144	; 0x90
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
10001622:	b510      	push	{r4, lr}
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
10001624:	05db      	lsls	r3, r3, #23
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
10001626:	1e04      	subs	r4, r0, #0
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
10001628:	429c      	cmp	r4, r3
1000162a:	d00d      	beq.n	10001648 <XMC_USIC_CH_Enable+0x28>
1000162c:	4b08      	ldr	r3, [pc, #32]	; (10001650 <XMC_USIC_CH_Enable+0x30>)
1000162e:	4298      	cmp	r0, r3
10001630:	d00a      	beq.n	10001648 <XMC_USIC_CH_Enable+0x28>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
10001632:	2303      	movs	r3, #3
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
10001634:	2201      	movs	r2, #1
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
10001636:	60e3      	str	r3, [r4, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
10001638:	68e3      	ldr	r3, [r4, #12]
1000163a:	421a      	tst	r2, r3
1000163c:	d0fc      	beq.n	10001638 <XMC_USIC_CH_Enable+0x18>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
1000163e:	220f      	movs	r2, #15
10001640:	6c23      	ldr	r3, [r4, #64]	; 0x40
10001642:	4393      	bics	r3, r2
10001644:	6423      	str	r3, [r4, #64]	; 0x40
}
10001646:	bd10      	pop	{r4, pc}
void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
  if (usic == USIC0)
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
10001648:	2008      	movs	r0, #8
1000164a:	f7ff fddf 	bl	1000120c <XMC_SCU_CLOCK_UngatePeripheralClock>
1000164e:	e7f0      	b.n	10001632 <XMC_USIC_CH_Enable+0x12>
10001650:	48000200 	.word	0x48000200

10001654 <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
10001654:	b5f0      	push	{r4, r5, r6, r7, lr}
10001656:	465f      	mov	r7, fp
10001658:	4656      	mov	r6, sl
1000165a:	464d      	mov	r5, r9
1000165c:	4644      	mov	r4, r8
1000165e:	b4f0      	push	{r4, r5, r6, r7}
                    
    status = XMC_USIC_CH_STATUS_OK;
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
10001660:	2301      	movs	r3, #1
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
10001662:	b083      	sub	sp, #12
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
10001664:	2963      	cmp	r1, #99	; 0x63
10001666:	d901      	bls.n	1000166c <XMC_USIC_CH_SetBaudrate+0x18>
10001668:	2a00      	cmp	r2, #0
1000166a:	d107      	bne.n	1000167c <XMC_USIC_CH_SetBaudrate+0x28>
  {
    status = XMC_USIC_CH_STATUS_ERROR;
  }
  
  return status;
}
1000166c:	1c18      	adds	r0, r3, #0
1000166e:	b003      	add	sp, #12
10001670:	bc3c      	pop	{r2, r3, r4, r5}
10001672:	4690      	mov	r8, r2
10001674:	4699      	mov	r9, r3
10001676:	46a2      	mov	sl, r4
10001678:	46ab      	mov	fp, r5
1000167a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000167c:	1c17      	adds	r7, r2, #0
1000167e:	1c0c      	adds	r4, r1, #0
10001680:	9201      	str	r2, [sp, #4]
10001682:	9000      	str	r0, [sp, #0]
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
10001684:	f7ff fe6c 	bl	10001360 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
10001688:	2164      	movs	r1, #100	; 0x64
1000168a:	f7ff ff17 	bl	100014bc <__aeabi_uidiv>
    rate = rate / 100U;
1000168e:	2164      	movs	r1, #100	; 0x64
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
10001690:	1c06      	adds	r6, r0, #0
    rate = rate / 100U;
10001692:	1c20      	adds	r0, r4, #0
10001694:	f7ff ff12 	bl	100014bc <__aeabi_uidiv>

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;
10001698:	4b17      	ldr	r3, [pc, #92]	; (100016f8 <XMC_USIC_CH_SetBaudrate+0xa4>)
1000169a:	4347      	muls	r7, r0
1000169c:	4699      	mov	r9, r3
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
    rate = rate / 100U;

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
1000169e:	2301      	movs	r3, #1
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
100016a0:	464c      	mov	r4, r9
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
    rate = rate / 100U;

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
100016a2:	469a      	mov	sl, r3
  if ((rate >= 100U) && (oversampling != 0U))
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
    rate = rate / 100U;

    clock_divider_min = 1U;
100016a4:	469b      	mov	fp, r3
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
      pdiv_int = pdiv >> 10U;
      pdiv_frac = pdiv & 0x3ffU;

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
100016a6:	46c8      	mov	r8, r9
100016a8:	02b5      	lsls	r5, r6, #10
100016aa:	1bad      	subs	r5, r5, r6
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
100016ac:	1c28      	adds	r0, r5, #0
100016ae:	1c39      	adds	r1, r7, #0
100016b0:	f7ff ff04 	bl	100014bc <__aeabi_uidiv>
      pdiv_int = pdiv >> 10U;
100016b4:	0a83      	lsrs	r3, r0, #10
      pdiv_frac = pdiv & 0x3ffU;

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
100016b6:	4543      	cmp	r3, r8
100016b8:	d806      	bhi.n	100016c8 <XMC_USIC_CH_SetBaudrate+0x74>

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
      pdiv_int = pdiv >> 10U;
      pdiv_frac = pdiv & 0x3ffU;
100016ba:	0580      	lsls	r0, r0, #22
100016bc:	0d80      	lsrs	r0, r0, #22

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
100016be:	4548      	cmp	r0, r9
100016c0:	d202      	bcs.n	100016c8 <XMC_USIC_CH_SetBaudrate+0x74>
100016c2:	4681      	mov	r9, r0
100016c4:	469a      	mov	sl, r3
100016c6:	46a3      	mov	fp, r4

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
100016c8:	3c01      	subs	r4, #1
100016ca:	1bad      	subs	r5, r5, r6
100016cc:	2c00      	cmp	r4, #0
100016ce:	d1ed      	bne.n	100016ac <XMC_USIC_CH_SetBaudrate+0x58>
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
100016d0:	2380      	movs	r3, #128	; 0x80
100016d2:	465a      	mov	r2, fp
100016d4:	9800      	ldr	r0, [sp, #0]
100016d6:	021b      	lsls	r3, r3, #8
100016d8:	4313      	orrs	r3, r2
100016da:	6103      	str	r3, [r0, #16]

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
100016dc:	9a01      	ldr	r2, [sp, #4]
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
100016de:	6941      	ldr	r1, [r0, #20]
100016e0:	4b06      	ldr	r3, [pc, #24]	; (100016fc <XMC_USIC_CH_SetBaudrate+0xa8>)
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
100016e2:	3a01      	subs	r2, #1
100016e4:	0292      	lsls	r2, r2, #10
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
100016e6:	400b      	ands	r3, r1
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
100016e8:	4313      	orrs	r3, r2
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
100016ea:	4652      	mov	r2, sl
100016ec:	3a01      	subs	r2, #1
100016ee:	0412      	lsls	r2, r2, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
100016f0:	4313      	orrs	r3, r2
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
100016f2:	6143      	str	r3, [r0, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
                    
    status = XMC_USIC_CH_STATUS_OK;
100016f4:	2300      	movs	r3, #0
100016f6:	e7b9      	b.n	1000166c <XMC_USIC_CH_SetBaudrate+0x18>
100016f8:	000003ff 	.word	0x000003ff
100016fc:	fc0080ef 	.word	0xfc0080ef

10001700 <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
10001700:	b570      	push	{r4, r5, r6, lr}
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
10001702:	2584      	movs	r5, #132	; 0x84
10001704:	006d      	lsls	r5, r5, #1
10001706:	5946      	ldr	r6, [r0, r5]
10001708:	4c06      	ldr	r4, [pc, #24]	; (10001724 <XMC_USIC_CH_TXFIFO_Configure+0x24>)
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
1000170a:	0612      	lsls	r2, r2, #24
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
1000170c:	4034      	ands	r4, r6
1000170e:	5144      	str	r4, [r0, r5]
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
10001710:	5946      	ldr	r6, [r0, r5]
10001712:	4c05      	ldr	r4, [pc, #20]	; (10001728 <XMC_USIC_CH_TXFIFO_Configure+0x28>)
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
10001714:	021b      	lsls	r3, r3, #8
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
10001716:	4034      	ands	r4, r6
10001718:	4321      	orrs	r1, r4
1000171a:	430a      	orrs	r2, r1
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
1000171c:	4313      	orrs	r3, r2
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
1000171e:	5143      	str	r3, [r0, r5]
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
10001720:	bd70      	pop	{r4, r5, r6, pc}
10001722:	46c0      	nop			; (mov r8, r8)
10001724:	f8ffffff 	.word	0xf8ffffff
10001728:	f8ffc0c0 	.word	0xf8ffc0c0

1000172c <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
1000172c:	b570      	push	{r4, r5, r6, lr}
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
1000172e:	2686      	movs	r6, #134	; 0x86
10001730:	0076      	lsls	r6, r6, #1
10001732:	5985      	ldr	r5, [r0, r6]
10001734:	4c07      	ldr	r4, [pc, #28]	; (10001754 <XMC_USIC_CH_RXFIFO_Configure+0x28>)
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
10001736:	0612      	lsls	r2, r2, #24
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
10001738:	402c      	ands	r4, r5
1000173a:	5184      	str	r4, [r0, r6]

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
1000173c:	5984      	ldr	r4, [r0, r6]
1000173e:	4d06      	ldr	r5, [pc, #24]	; (10001758 <XMC_USIC_CH_RXFIFO_Configure+0x2c>)
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
10001740:	021b      	lsls	r3, r3, #8
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
10001742:	4025      	ands	r5, r4
10001744:	2480      	movs	r4, #128	; 0x80
10001746:	0564      	lsls	r4, r4, #21
10001748:	432c      	orrs	r4, r5
1000174a:	4321      	orrs	r1, r4
1000174c:	430a      	orrs	r2, r1
1000174e:	4313      	orrs	r3, r2
10001750:	5183      	str	r3, [r0, r6]
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                   (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
10001752:	bd70      	pop	{r4, r5, r6, pc}
10001754:	f8ffffff 	.word	0xf8ffffff
10001758:	efffc0c0 	.word	0xefffc0c0

1000175c <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>:
}

void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
                                            const XMC_USIC_CH_FIFO_SIZE_t size,
                                            const uint32_t limit)
{
1000175c:	b530      	push	{r4, r5, lr}
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
1000175e:	2486      	movs	r4, #134	; 0x86

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
10001760:	0212      	lsls	r2, r2, #8
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos));
10001762:	0609      	lsls	r1, r1, #24
10001764:	4311      	orrs	r1, r2
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
10001766:	1c0a      	adds	r2, r1, #0
void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
                                            const XMC_USIC_CH_FIFO_SIZE_t size,
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
10001768:	0064      	lsls	r4, r4, #1
1000176a:	5905      	ldr	r5, [r0, r4]
1000176c:	4b04      	ldr	r3, [pc, #16]	; (10001780 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit+0x24>)
1000176e:	402b      	ands	r3, r5
10001770:	5103      	str	r3, [r0, r4]

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
10001772:	5905      	ldr	r5, [r0, r4]
10001774:	4b03      	ldr	r3, [pc, #12]	; (10001784 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit+0x28>)
10001776:	402b      	ands	r3, r5
10001778:	431a      	orrs	r2, r3
1000177a:	5102      	str	r2, [r0, r4]
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos));
}
1000177c:	bd30      	pop	{r4, r5, pc}
1000177e:	46c0      	nop			; (mov r8, r8)
10001780:	f8ffffff 	.word	0xf8ffffff
10001784:	ffffc0ff 	.word	0xffffc0ff

10001788 <XMC_USIC_CH_SetInterruptNodePointer>:

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
10001788:	b510      	push	{r4, lr}
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
1000178a:	2407      	movs	r4, #7
1000178c:	408c      	lsls	r4, r1
                  (service_request << (uint32_t)interrupt_node));
1000178e:	408a      	lsls	r2, r1

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
10001790:	6983      	ldr	r3, [r0, #24]
10001792:	43a3      	bics	r3, r4
10001794:	4313      	orrs	r3, r2
10001796:	6183      	str	r3, [r0, #24]
                  (service_request << (uint32_t)interrupt_node));
}
10001798:	bd10      	pop	{r4, pc}
1000179a:	46c0      	nop			; (mov r8, r8)

1000179c <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
1000179c:	b530      	push	{r4, r5, lr}
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
1000179e:	2407      	movs	r4, #7
100017a0:	2584      	movs	r5, #132	; 0x84
100017a2:	408c      	lsls	r4, r1
                   (service_request << (uint32_t)interrupt_node));
100017a4:	408a      	lsls	r2, r1

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
100017a6:	006d      	lsls	r5, r5, #1
100017a8:	5943      	ldr	r3, [r0, r5]
100017aa:	43a3      	bics	r3, r4
100017ac:	4313      	orrs	r3, r2
100017ae:	5143      	str	r3, [r0, r5]
                   (service_request << (uint32_t)interrupt_node));
}
100017b0:	bd30      	pop	{r4, r5, pc}
100017b2:	46c0      	nop			; (mov r8, r8)

100017b4 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
100017b4:	b530      	push	{r4, r5, lr}
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
100017b6:	2407      	movs	r4, #7
100017b8:	2586      	movs	r5, #134	; 0x86
100017ba:	408c      	lsls	r4, r1
                   (service_request << (uint32_t)interrupt_node));
100017bc:	408a      	lsls	r2, r1

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
100017be:	006d      	lsls	r5, r5, #1
100017c0:	5943      	ldr	r3, [r0, r5]
100017c2:	43a3      	bics	r3, r4
100017c4:	4313      	orrs	r3, r2
100017c6:	5143      	str	r3, [r0, r5]
                   (service_request << (uint32_t)interrupt_node));
}
100017c8:	bd30      	pop	{r4, r5, pc}
100017ca:	46c0      	nop			; (mov r8, r8)

100017cc <XMC_VADC_GLOBAL_Init>:
   * Please refer to the XMC1000 Errata sheet V1.4 released 2014-06 Errata ID : ADC_AI.003 Additonal bit to enable ADC
   * function
   */

#if defined (COMPARATOR)
  COMPARATOR->ORCCTRL = (uint32_t)0xFF;
100017cc:	22ff      	movs	r2, #255	; 0xff
}


/* API to initialize global resources */
void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *config)
{
100017ce:	b538      	push	{r3, r4, r5, lr}
100017d0:	1c0d      	adds	r5, r1, #0
100017d2:	1c04      	adds	r4, r0, #0
   * Please refer to the XMC1000 Errata sheet V1.4 released 2014-06 Errata ID : ADC_AI.003 Additonal bit to enable ADC
   * function
   */

#if defined (COMPARATOR)
  COMPARATOR->ORCCTRL = (uint32_t)0xFF;
100017d4:	4b0d      	ldr	r3, [pc, #52]	; (1000180c <XMC_VADC_GLOBAL_Init+0x40>)
#endif

#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
100017d6:	2001      	movs	r0, #1
   * Please refer to the XMC1000 Errata sheet V1.4 released 2014-06 Errata ID : ADC_AI.003 Additonal bit to enable ADC
   * function
   */

#if defined (COMPARATOR)
  COMPARATOR->ORCCTRL = (uint32_t)0xFF;
100017d8:	601a      	str	r2, [r3, #0]
#endif

#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
100017da:	f7ff fd17 	bl	1000120c <XMC_SCU_CLOCK_UngatePeripheralClock>
  XMC_ASSERT("XMC_VADC_GLOBAL_Init:Wrong Module Pointer", (global_ptr == VADC))

  /* Enable the VADC module*/
  XMC_VADC_GLOBAL_EnableModule();

  global_ptr->CLC = (uint32_t)(config->clc);
100017de:	696b      	ldr	r3, [r5, #20]
100017e0:	6023      	str	r3, [r4, #0]

  /* Clock configuration */

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  global_ptr->GLOBCFG  = (uint32_t)(config->clock_config.globcfg | (uint32_t)(VADC_GLOBCFG_DIVWC_Msk));
100017e2:	2380      	movs	r3, #128	; 0x80
100017e4:	686a      	ldr	r2, [r5, #4]
100017e6:	021b      	lsls	r3, r3, #8
100017e8:	4313      	orrs	r3, r2
100017ea:	2280      	movs	r2, #128	; 0x80
100017ec:	50a3      	str	r3, [r4, r2]
#endif

  /* ICLASS-0 configuration */
  global_ptr->GLOBICLASS[0] = (uint32_t)(config->class0.globiclass);
100017ee:	23a0      	movs	r3, #160	; 0xa0
100017f0:	68aa      	ldr	r2, [r5, #8]
100017f2:	50e2      	str	r2, [r4, r3]

  /* ICLASS-1 configuration */
  global_ptr->GLOBICLASS[1] = (uint32_t)(config->class1.globiclass);
100017f4:	68ea      	ldr	r2, [r5, #12]
100017f6:	3304      	adds	r3, #4
100017f8:	50e2      	str	r2, [r4, r3]


  /*Result generation related configuration */
  global_ptr->GLOBRCR = (uint32_t)(config->globrcr);
100017fa:	692a      	ldr	r2, [r5, #16]
100017fc:	33dd      	adds	r3, #221	; 0xdd
100017fe:	33ff      	adds	r3, #255	; 0xff
10001800:	50e2      	str	r2, [r4, r3]

#if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)

  /* Boundaries */
  global_ptr->GLOBBOUND = (uint32_t)(config->globbound);
10001802:	682a      	ldr	r2, [r5, #0]
10001804:	3bc9      	subs	r3, #201	; 0xc9
10001806:	3bff      	subs	r3, #255	; 0xff
10001808:	50e2      	str	r2, [r4, r3]

  /* From the Errata sheet of XMC1100 V1.7*/
  XMC_VADC_CONV_ENABLE_FOR_XMC11 = 1U;
#endif

}
1000180a:	bd38      	pop	{r3, r4, r5, pc}
1000180c:	40010500 	.word	0x40010500

10001810 <XMC_VADC_GLOBAL_InputClassInit>:
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Conversion Type", ((conv_type) <= XMC_VADC_GROUP_CONV_EMUX))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong ICLASS set number", (set_num < XMC_VADC_MAX_ICLASS_SET))

#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  if (conv_type == XMC_VADC_GROUP_CONV_STD )
10001810:	2a00      	cmp	r2, #0
10001812:	d005      	beq.n	10001820 <XMC_VADC_GLOBAL_InputClassInit+0x10>
                                      (uint32_t)(VADC_GLOBICLASS_CMS_Msk | VADC_GLOBICLASS_STCS_Msk);
#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  }
  else
  {
    global_ptr->GLOBICLASS[set_num] = config.globiclass & (uint32_t)(VADC_GLOBICLASS_CME_Msk | VADC_GLOBICLASS_STCE_Msk);
10001814:	4a05      	ldr	r2, [pc, #20]	; (1000182c <XMC_VADC_GLOBAL_InputClassInit+0x1c>)
10001816:	3328      	adds	r3, #40	; 0x28
10001818:	4011      	ands	r1, r2
1000181a:	009b      	lsls	r3, r3, #2
1000181c:	5019      	str	r1, [r3, r0]
  }
#endif
}
1000181e:	4770      	bx	lr

#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  if (conv_type == XMC_VADC_GROUP_CONV_STD )
  {
#endif
    global_ptr->GLOBICLASS[set_num] = config.globiclass &
10001820:	4a03      	ldr	r2, [pc, #12]	; (10001830 <XMC_VADC_GLOBAL_InputClassInit+0x20>)
10001822:	3328      	adds	r3, #40	; 0x28
10001824:	4011      	ands	r1, r2
10001826:	009b      	lsls	r3, r3, #2
10001828:	5019      	str	r1, [r3, r0]
1000182a:	e7f8      	b.n	1000181e <XMC_VADC_GLOBAL_InputClassInit+0xe>
1000182c:	071f0000 	.word	0x071f0000
10001830:	0000071f 	.word	0x0000071f

10001834 <XMC_VADC_GLOBAL_StartupCalibration>:
  VADC_G_TypeDef *group_ptr;
#endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_StartupCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;
10001834:	2380      	movs	r3, #128	; 0x80
10001836:	2180      	movs	r1, #128	; 0x80
10001838:	58c2      	ldr	r2, [r0, r3]
1000183a:	0609      	lsls	r1, r1, #24
1000183c:	430a      	orrs	r2, r1
1000183e:	50c2      	str	r2, [r0, r3]
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
  {
    group_ptr = g_xmc_vadc_group_array[i];
    if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
10001840:	4a0c      	ldr	r2, [pc, #48]	; (10001874 <XMC_VADC_GLOBAL_StartupCalibration+0x40>)
10001842:	58d1      	ldr	r1, [r2, r3]
10001844:	23c0      	movs	r3, #192	; 0xc0
10001846:	029b      	lsls	r3, r3, #10
10001848:	4219      	tst	r1, r3
1000184a:	d005      	beq.n	10001858 <XMC_VADC_GLOBAL_StartupCalibration+0x24>
    {
      /* This group is active. Loop until it finishes calibration */
      while((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
1000184c:	2180      	movs	r1, #128	; 0x80
1000184e:	2080      	movs	r0, #128	; 0x80
10001850:	0549      	lsls	r1, r1, #21
10001852:	5813      	ldr	r3, [r2, r0]
10001854:	420b      	tst	r3, r1
10001856:	d1fc      	bne.n	10001852 <XMC_VADC_GLOBAL_StartupCalibration+0x1e>
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
  {
    group_ptr = g_xmc_vadc_group_array[i];
    if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
10001858:	2380      	movs	r3, #128	; 0x80
1000185a:	4a07      	ldr	r2, [pc, #28]	; (10001878 <XMC_VADC_GLOBAL_StartupCalibration+0x44>)
1000185c:	58d1      	ldr	r1, [r2, r3]
1000185e:	23c0      	movs	r3, #192	; 0xc0
10001860:	029b      	lsls	r3, r3, #10
10001862:	4219      	tst	r1, r3
10001864:	d005      	beq.n	10001872 <XMC_VADC_GLOBAL_StartupCalibration+0x3e>
    {
      /* This group is active. Loop until it finishes calibration */
      while((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
10001866:	2180      	movs	r1, #128	; 0x80
10001868:	2080      	movs	r0, #128	; 0x80
1000186a:	0549      	lsls	r1, r1, #21
1000186c:	5813      	ldr	r3, [r2, r0]
1000186e:	420b      	tst	r3, r1
10001870:	d1fc      	bne.n	1000186c <XMC_VADC_GLOBAL_StartupCalibration+0x38>
         XMC_VADC_SHS_START_UP_CAL_ACTIVE )
  {
    /* NOP */
  }
#endif
}
10001872:	4770      	bx	lr
10001874:	48030400 	.word	0x48030400
10001878:	48030800 	.word	0x48030800

1000187c <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode>:
  global_ptr->GLOBEVNP |= (uint32_t)(node << VADC_GLOBEVNP_REV0NP_Pos);
}

/* API to bind request source event with a service request line */
void XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t sr)
{
1000187c:	b510      	push	{r4, lr}
  uint32_t node;
  
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:Wrong Module Pointer", (global_ptr == VADC))

  if (sr >= XMC_VADC_SR_SHARED_SR0)
1000187e:	2903      	cmp	r1, #3
10001880:	d900      	bls.n	10001884 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode+0x8>
  {
    node = (uint32_t)sr - (uint32_t)XMC_VADC_SR_SHARED_SR0;
10001882:	3904      	subs	r1, #4
  else
  {
    node = (uint32_t)sr;
  }

  global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_SEV0NP_Msk);
10001884:	23a0      	movs	r3, #160	; 0xa0
10001886:	240f      	movs	r4, #15
10001888:	005b      	lsls	r3, r3, #1
1000188a:	58c2      	ldr	r2, [r0, r3]
1000188c:	43a2      	bics	r2, r4
1000188e:	50c2      	str	r2, [r0, r3]
  global_ptr->GLOBEVNP |= (uint32_t) (node << VADC_GLOBEVNP_SEV0NP_Pos);
10001890:	58c2      	ldr	r2, [r0, r3]
10001892:	4311      	orrs	r1, r2
10001894:	50c1      	str	r1, [r0, r3]
}
10001896:	bd10      	pop	{r4, pc}

10001898 <XMC_VADC_GROUP_Init>:
    sample_time      = (uint32_t) config.sampling_phase_emux_channel;
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
  }

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];
10001898:	23a0      	movs	r3, #160	; 0xa0
1000189a:	58c2      	ldr	r2, [r0, r3]
1000189c:	469c      	mov	ip, r3

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
1000189e:	4b30      	ldr	r3, [pc, #192]	; (10001960 <XMC_VADC_GROUP_Init+0xc8>)
}

/* API to initialize an instance of group of VADC hardware */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)  
void XMC_VADC_GROUP_Init( XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config)
{
100018a0:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
100018a2:	401a      	ands	r2, r3
100018a4:	1c14      	adds	r4, r2, #0
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
  conv_class &= ~(sample_time_mask);
100018a6:	271f      	movs	r7, #31
100018a8:	794a      	ldrb	r2, [r1, #5]

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
100018aa:	4d2e      	ldr	r5, [pc, #184]	; (10001964 <XMC_VADC_GROUP_Init+0xcc>)
100018ac:	0752      	lsls	r2, r2, #29
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
100018ae:	0d52      	lsrs	r2, r2, #21
100018b0:	4322      	orrs	r2, r4
100018b2:	790c      	ldrb	r4, [r1, #4]
  conv_class &= ~(sample_time_mask);
100018b4:	43ba      	bics	r2, r7
100018b6:	06e4      	lsls	r4, r4, #27
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
    sample_time      = (uint32_t) config.sample_time_std_conv;
100018b8:	0ee4      	lsrs	r4, r4, #27

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
  conv_class &= ~(sample_time_mask);
  conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
100018ba:	4322      	orrs	r2, r4
  group_ptr->ICLASS[set_num] = conv_class;
100018bc:	4664      	mov	r4, ip
100018be:	5102      	str	r2, [r0, r4]
    sample_time      = (uint32_t) config.sampling_phase_emux_channel;
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
  }

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];
100018c0:	5902      	ldr	r2, [r0, r4]

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
  conv_class &= ~(sample_time_mask);
100018c2:	4e29      	ldr	r6, [pc, #164]	; (10001968 <XMC_VADC_GROUP_Init+0xd0>)

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
100018c4:	402a      	ands	r2, r5
100018c6:	1c14      	adds	r4, r2, #0
100018c8:	79ca      	ldrb	r2, [r1, #7]
  group_ptr->BOUND = config->g_bound;

  /* External mux configuration */
  XMC_VADC_GROUP_ExternalMuxControlInit(group_ptr,config->emux_config);

}
100018ca:	0752      	lsls	r2, r2, #29
  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
100018cc:	0952      	lsrs	r2, r2, #5
100018ce:	4322      	orrs	r2, r4
100018d0:	798c      	ldrb	r4, [r1, #6]
  conv_class &= ~(sample_time_mask);
100018d2:	4032      	ands	r2, r6
100018d4:	06e4      	lsls	r4, r4, #27
  conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
100018d6:	0ae4      	lsrs	r4, r4, #11
100018d8:	4322      	orrs	r2, r4
  group_ptr->ICLASS[set_num] = conv_class;
100018da:	4664      	mov	r4, ip
100018dc:	5102      	str	r2, [r0, r4]
    sample_time      = (uint32_t) config.sampling_phase_emux_channel;
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
  }

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];
100018de:	3404      	adds	r4, #4
100018e0:	5902      	ldr	r2, [r0, r4]

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
100018e2:	401a      	ands	r2, r3
100018e4:	7a4b      	ldrb	r3, [r1, #9]
100018e6:	075b      	lsls	r3, r3, #29
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
100018e8:	0d5b      	lsrs	r3, r3, #21
100018ea:	4313      	orrs	r3, r2
100018ec:	7a0a      	ldrb	r2, [r1, #8]
  conv_class &= ~(sample_time_mask);
100018ee:	43bb      	bics	r3, r7
100018f0:	06d2      	lsls	r2, r2, #27
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
    sample_time      = (uint32_t) config.sample_time_std_conv;
100018f2:	0ed2      	lsrs	r2, r2, #27

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
  conv_class &= ~(sample_time_mask);
  conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
100018f4:	4313      	orrs	r3, r2
  group_ptr->ICLASS[set_num] = conv_class;
100018f6:	5103      	str	r3, [r0, r4]
    sample_time      = (uint32_t) config.sampling_phase_emux_channel;
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
  }

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];
100018f8:	5903      	ldr	r3, [r0, r4]
100018fa:	7a8a      	ldrb	r2, [r1, #10]

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
100018fc:	401d      	ands	r5, r3
100018fe:	7acb      	ldrb	r3, [r1, #11]
10001900:	06d2      	lsls	r2, r2, #27
10001902:	075b      	lsls	r3, r3, #29
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
10001904:	095b      	lsrs	r3, r3, #5
10001906:	432b      	orrs	r3, r5
  conv_class &= ~(sample_time_mask);
10001908:	4033      	ands	r3, r6
  conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
1000190a:	0ad2      	lsrs	r2, r2, #11
1000190c:	4313      	orrs	r3, r2
  group_ptr->ICLASS[set_num] = conv_class;
1000190e:	5103      	str	r3, [r0, r4]
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_STD, 0U);
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_EMUX, 0U);
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_STD, 1U);
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_EMUX, 1U);

  group_ptr->ARBCFG = config->g_arbcfg;
10001910:	2380      	movs	r3, #128	; 0x80
10001912:	690a      	ldr	r2, [r1, #16]
10001914:	50c2      	str	r2, [r0, r3]

  group_ptr->BOUND = config->g_bound;
10001916:	68ca      	ldr	r2, [r1, #12]
10001918:	3338      	adds	r3, #56	; 0x38
1000191a:	50c2      	str	r2, [r0, r3]
1000191c:	78cb      	ldrb	r3, [r1, #3]
1000191e:	071d      	lsls	r5, r3, #28
10001920:	06df      	lsls	r7, r3, #27
10001922:	069c      	lsls	r4, r3, #26
10001924:	065b      	lsls	r3, r3, #25
10001926:	0fda      	lsrs	r2, r3, #31
10001928:	884b      	ldrh	r3, [r1, #2]
1000192a:	0fff      	lsrs	r7, r7, #31
1000192c:	059b      	lsls	r3, r3, #22
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
1000192e:	099e      	lsrs	r6, r3, #6
10001930:	780b      	ldrb	r3, [r1, #0]
10001932:	2180      	movs	r1, #128	; 0x80
10001934:	075b      	lsls	r3, r3, #29
{
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
10001936:	0f5b      	lsrs	r3, r3, #29
10001938:	4333      	orrs	r3, r6
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
1000193a:	26f8      	movs	r6, #248	; 0xf8
1000193c:	0076      	lsls	r6, r6, #1
1000193e:	5183      	str	r3, [r0, r6]
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);

#if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
  emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_Pos);
#endif
  group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
10001940:	5983      	ldr	r3, [r0, r6]
10001942:	0609      	lsls	r1, r1, #24

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
10001944:	073f      	lsls	r7, r7, #28
10001946:	430b      	orrs	r3, r1
10001948:	0fad      	lsrs	r5, r5, #30
1000194a:	433b      	orrs	r3, r7
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
1000194c:	06ad      	lsls	r5, r5, #26
1000194e:	0fe4      	lsrs	r4, r4, #31
10001950:	432b      	orrs	r3, r5
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);
10001952:	0764      	lsls	r4, r4, #29
10001954:	4323      	orrs	r3, r4
10001956:	1c19      	adds	r1, r3, #0

#if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
  emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_Pos);
10001958:	0793      	lsls	r3, r2, #30
#endif
  group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
1000195a:	430b      	orrs	r3, r1
1000195c:	5183      	str	r3, [r0, r6]

  /* External mux configuration */
  XMC_VADC_GROUP_ExternalMuxControlInit(group_ptr,config->emux_config);

}
1000195e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001960:	fffff8ff 	.word	0xfffff8ff
10001964:	f8ffffff 	.word	0xf8ffffff
10001968:	ffe0ffff 	.word	0xffe0ffff

1000196c <XMC_VADC_GROUP_SetPowerMode>:
  uint32_t arbcfg;

  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMODE_NORMAL))

  arbcfg = group_ptr->ARBCFG;
1000196c:	2280      	movs	r2, #128	; 0x80
  group_ptr->ICLASS[set_num] = conv_class;
}

/* API which sets the power mode of analog converter of a VADC group */
void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_t power_mode)
{
1000196e:	b510      	push	{r4, lr}
  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMODE_NORMAL))

  arbcfg = group_ptr->ARBCFG;

  arbcfg &= ~((uint32_t)VADC_G_ARBCFG_ANONC_Msk);
10001970:	2403      	movs	r4, #3
  uint32_t arbcfg;

  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMODE_NORMAL))

  arbcfg = group_ptr->ARBCFG;
10001972:	5883      	ldr	r3, [r0, r2]

  arbcfg &= ~((uint32_t)VADC_G_ARBCFG_ANONC_Msk);
10001974:	43a3      	bics	r3, r4
  arbcfg |= (uint32_t)power_mode;
10001976:	4319      	orrs	r1, r3

  group_ptr->ARBCFG = arbcfg;
10001978:	5081      	str	r1, [r0, r2]
}
1000197a:	bd10      	pop	{r4, pc}

1000197c <XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode>:
  XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:Wrong SHS Pointer",
             (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
  XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:Wrong Index number",(group_num <= XMC_VADC_GROUP_INDEX_1))

  /* Set the converted to Accelerated mode from compatible mode*/
  if (group_num == XMC_VADC_GROUP_INDEX_0 )
1000197c:	2900      	cmp	r1, #0
1000197e:	d007      	beq.n	10001990 <XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode+0x14>
  {
    shs_ptr->TIMCFG0 |= (uint32_t)SHS_TIMCFG0_AT_Msk;
  }
  else if (group_num == XMC_VADC_GROUP_INDEX_1 )
10001980:	2901      	cmp	r1, #1
10001982:	d000      	beq.n	10001986 <XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode+0xa>
  }
  else
  {
    /* for MISRA*/
  }
}
10001984:	4770      	bx	lr
  {
    shs_ptr->TIMCFG0 |= (uint32_t)SHS_TIMCFG0_AT_Msk;
  }
  else if (group_num == XMC_VADC_GROUP_INDEX_1 )
  {
    shs_ptr->TIMCFG1 |= (uint32_t)SHS_TIMCFG1_AT_Msk;
10001986:	2384      	movs	r3, #132	; 0x84
10001988:	58c2      	ldr	r2, [r0, r3]
1000198a:	4311      	orrs	r1, r2
1000198c:	50c1      	str	r1, [r0, r3]
1000198e:	e7f9      	b.n	10001984 <XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode+0x8>
  XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:Wrong Index number",(group_num <= XMC_VADC_GROUP_INDEX_1))

  /* Set the converted to Accelerated mode from compatible mode*/
  if (group_num == XMC_VADC_GROUP_INDEX_0 )
  {
    shs_ptr->TIMCFG0 |= (uint32_t)SHS_TIMCFG0_AT_Msk;
10001990:	2280      	movs	r2, #128	; 0x80
10001992:	2301      	movs	r3, #1
10001994:	5881      	ldr	r1, [r0, r2]
10001996:	430b      	orrs	r3, r1
10001998:	5083      	str	r3, [r0, r2]
1000199a:	e7f3      	b.n	10001984 <XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode+0x8>

1000199c <XMC_VADC_GLOBAL_BackgroundInit>:
 *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN2_Msk);
1000199c:	4b27      	ldr	r3, [pc, #156]	; (10001a3c <XMC_VADC_GLOBAL_BackgroundInit+0xa0>)
}
#endif /* XMC_VADC_GSCAN_AVAILABLE */

/* API to initialize background scan request source hardware */
void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_CONFIG_t *config)
{
1000199e:	b5f0      	push	{r4, r5, r6, r7, lr}
100019a0:	4646      	mov	r6, r8
100019a2:	4698      	mov	r8, r3
100019a4:	2284      	movs	r2, #132	; 0x84
100019a6:	464f      	mov	r7, r9
100019a8:	4644      	mov	r4, r8
100019aa:	468c      	mov	ip, r1
100019ac:	5899      	ldr	r1, [r3, r2]
100019ae:	4b24      	ldr	r3, [pc, #144]	; (10001a40 <XMC_VADC_GLOBAL_BackgroundInit+0xa4>)
100019b0:	b4c0      	push	{r6, r7}
100019b2:	4019      	ands	r1, r3
100019b4:	50a1      	str	r1, [r4, r2]
100019b6:	4923      	ldr	r1, [pc, #140]	; (10001a44 <XMC_VADC_GLOBAL_BackgroundInit+0xa8>)
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }
  
  conv_start_mask = (uint32_t) 0;
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
100019b8:	2703      	movs	r7, #3
100019ba:	588c      	ldr	r4, [r1, r2]
  
  for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
  {
    reg = g_xmc_vadc_group_array[i]->ARBPR;

    reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);
100019bc:	4e22      	ldr	r6, [pc, #136]	; (10001a48 <XMC_VADC_GLOBAL_BackgroundInit+0xac>)
100019be:	4023      	ands	r3, r4
100019c0:	508b      	str	r3, [r1, r2]
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }
  
  conv_start_mask = (uint32_t) 0;
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
100019c2:	4663      	mov	r3, ip
100019c4:	781b      	ldrb	r3, [r3, #0]
  
  for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
  {
    reg = g_xmc_vadc_group_array[i]->ARBPR;

    reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);
100019c6:	46b1      	mov	r9, r6
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }
  
  conv_start_mask = (uint32_t) 0;
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
100019c8:	401f      	ands	r7, r3
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
100019ca:	1c3d      	adds	r5, r7, #0
100019cc:	1e6c      	subs	r4, r5, #1
100019ce:	41a5      	sbcs	r5, r4
  }
  
  for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
  {
    reg = g_xmc_vadc_group_array[i]->ARBPR;
100019d0:	4644      	mov	r4, r8
100019d2:	58a4      	ldr	r4, [r4, r2]

    reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);

    /* Program the priority of the request source */
    reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO2_Pos);
100019d4:	071b      	lsls	r3, r3, #28
  
  for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
  {
    reg = g_xmc_vadc_group_array[i]->ARBPR;

    reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);
100019d6:	4034      	ands	r4, r6
    reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO2_Pos);
  
    /* Program the start mode */
    reg |= conv_start_mask;

    g_xmc_vadc_group_array[i]->ARBPR = reg;
100019d8:	4646      	mov	r6, r8
    reg = g_xmc_vadc_group_array[i]->ARBPR;

    reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);

    /* Program the priority of the request source */
    reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO2_Pos);
100019da:	0f9b      	lsrs	r3, r3, #30
100019dc:	021b      	lsls	r3, r3, #8
  }
  
  conv_start_mask = (uint32_t) 0;
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
100019de:	02ed      	lsls	r5, r5, #11
    reg = g_xmc_vadc_group_array[i]->ARBPR;

    reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);

    /* Program the priority of the request source */
    reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO2_Pos);
100019e0:	431c      	orrs	r4, r3
  
    /* Program the start mode */
    reg |= conv_start_mask;
100019e2:	432c      	orrs	r4, r5

    g_xmc_vadc_group_array[i]->ARBPR = reg;
100019e4:	50b4      	str	r4, [r6, r2]
  
  for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
  {
    reg = g_xmc_vadc_group_array[i]->ARBPR;

    reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);
100019e6:	464e      	mov	r6, r9
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
  }
  
  for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
  {
    reg = g_xmc_vadc_group_array[i]->ARBPR;
100019e8:	588c      	ldr	r4, [r1, r2]

    reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);
100019ea:	4026      	ands	r6, r4

    /* Program the priority of the request source */
    reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO2_Pos);
100019ec:	4333      	orrs	r3, r6
  
    /* Program the start mode */
    reg |= conv_start_mask;
100019ee:	432b      	orrs	r3, r5

    g_xmc_vadc_group_array[i]->ARBPR = reg;
100019f0:	508b      	str	r3, [r1, r2]
  
  }
  #endif

  /* program BRSCTRL register */
  global_ptr->BRSCTRL = (uint32_t)(config->asctrl | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VADC_BRSCTRL_GTWC_Msk);
100019f2:	4662      	mov	r2, ip
100019f4:	4b15      	ldr	r3, [pc, #84]	; (10001a4c <XMC_VADC_GLOBAL_BackgroundInit+0xb0>)
100019f6:	6852      	ldr	r2, [r2, #4]
100019f8:	4313      	orrs	r3, r2
100019fa:	2280      	movs	r2, #128	; 0x80
100019fc:	0092      	lsls	r2, r2, #2
100019fe:	5083      	str	r3, [r0, r2]

  /* program BRSMR register */
  global_ptr->BRSMR = (uint32_t)((config->asmr)| (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VADC_BRSMR_ENGT_Pos));
10001a00:	4663      	mov	r3, ip
10001a02:	2201      	movs	r2, #1
10001a04:	689b      	ldr	r3, [r3, #8]
10001a06:	4313      	orrs	r3, r2
10001a08:	2281      	movs	r2, #129	; 0x81
10001a0a:	0092      	lsls	r2, r2, #2
10001a0c:	5083      	str	r3, [r0, r2]
  
#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
10001a0e:	2f02      	cmp	r7, #2
10001a10:	d00e      	beq.n	10001a30 <XMC_VADC_GLOBAL_BackgroundInit+0x94>
 *  XMC_VADC_GROUP_BackgroundDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN2_Msk;
10001a12:	2384      	movs	r3, #132	; 0x84
10001a14:	2080      	movs	r0, #128	; 0x80
10001a16:	4a09      	ldr	r2, [pc, #36]	; (10001a3c <XMC_VADC_GLOBAL_BackgroundInit+0xa0>)
10001a18:	04c0      	lsls	r0, r0, #19
10001a1a:	58d1      	ldr	r1, [r2, r3]
10001a1c:	4301      	orrs	r1, r0
10001a1e:	50d1      	str	r1, [r2, r3]
10001a20:	4908      	ldr	r1, [pc, #32]	; (10001a44 <XMC_VADC_GLOBAL_BackgroundInit+0xa8>)
10001a22:	58ca      	ldr	r2, [r1, r3]
10001a24:	4302      	orrs	r2, r0
10001a26:	50ca      	str	r2, [r1, r3]
  {
    XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }
  #endif
  
}
10001a28:	bc0c      	pop	{r2, r3}
10001a2a:	4690      	mov	r8, r2
10001a2c:	4699      	mov	r9, r3
10001a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  global_ptr->BRSMR = (uint32_t)((config->asmr)| (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VADC_BRSMR_ENGT_Pos));
  
#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
  {
    global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
10001a30:	2180      	movs	r1, #128	; 0x80
10001a32:	5883      	ldr	r3, [r0, r2]
10001a34:	0249      	lsls	r1, r1, #9
10001a36:	430b      	orrs	r3, r1
10001a38:	5083      	str	r3, [r0, r2]
10001a3a:	e7ea      	b.n	10001a12 <XMC_VADC_GLOBAL_BackgroundInit+0x76>
10001a3c:	48030400 	.word	0x48030400
10001a40:	fbffffff 	.word	0xfbffffff
10001a44:	48030800 	.word	0x48030800
10001a48:	fffffcff 	.word	0xfffffcff
10001a4c:	00808000 	.word	0x00808000

10001a50 <XMC_VADC_GROUP_ChannelInit>:

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
/* API to initialize a channel unit */
void XMC_VADC_GROUP_ChannelInit(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num,
                                        const XMC_VADC_CHANNEL_CONFIG_t *config)
{
10001a50:	b570      	push	{r4, r5, r6, lr}
  
  prio  = (uint32_t)config->channel_priority;

  /* Priority channel */
  ch_assign  = group_ptr->CHASS;
  ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
10001a52:	2401      	movs	r4, #1
  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
  
  prio  = (uint32_t)config->channel_priority;

  /* Priority channel */
  ch_assign  = group_ptr->CHASS;
10001a54:	2588      	movs	r5, #136	; 0x88
  ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
10001a56:	408c      	lsls	r4, r1
  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
  
  prio  = (uint32_t)config->channel_priority;

  /* Priority channel */
  ch_assign  = group_ptr->CHASS;
10001a58:	5943      	ldr	r3, [r0, r5]
  ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
10001a5a:	43a3      	bics	r3, r4


  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
  
  prio  = (uint32_t)config->channel_priority;
10001a5c:	7b14      	ldrb	r4, [r2, #12]

  /* Priority channel */
  ch_assign  = group_ptr->CHASS;
  ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
  ch_assign |= (uint32_t)(prio << ch_num);
10001a5e:	408c      	lsls	r4, r1
10001a60:	4323      	orrs	r3, r4
  group_ptr->CHASS = ch_assign;
10001a62:	5143      	str	r3, [r0, r5]

  /* Alias channel */
  if (config->alias_channel >= (int32_t)0)
10001a64:	7b53      	ldrb	r3, [r2, #13]
10001a66:	b25c      	sxtb	r4, r3
10001a68:	2c00      	cmp	r4, #0
10001a6a:	db0c      	blt.n	10001a86 <XMC_VADC_GROUP_ChannelInit+0x36>
  {
    mask = (uint32_t)0;
    if ((uint32_t)1 == ch_num)
10001a6c:	2901      	cmp	r1, #1
10001a6e:	d021      	beq.n	10001ab4 <XMC_VADC_GROUP_ChannelInit+0x64>
    {
      mask = VADC_G_ALIAS_ALIAS1_Pos;
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
    }
    else if ((uint32_t)0 == ch_num)
10001a70:	2900      	cmp	r1, #0
10001a72:	d017      	beq.n	10001aa4 <XMC_VADC_GROUP_ChannelInit+0x54>
10001a74:	1c1c      	adds	r4, r3, #0
10001a76:	2300      	movs	r3, #0
    {
      mask = VADC_G_ALIAS_ALIAS0_Pos;
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
    }

    group_ptr->ALIAS |= (uint32_t)(config->alias_channel << mask);
10001a78:	b264      	sxtb	r4, r4
10001a7a:	409c      	lsls	r4, r3
10001a7c:	26b0      	movs	r6, #176	; 0xb0
10001a7e:	1c23      	adds	r3, r4, #0
10001a80:	5985      	ldr	r5, [r0, r6]
10001a82:	432b      	orrs	r3, r5
10001a84:	5183      	str	r3, [r0, r6]
  }

  group_ptr->BFL |= config->bfl;
10001a86:	24c8      	movs	r4, #200	; 0xc8
10001a88:	6855      	ldr	r5, [r2, #4]
10001a8a:	5903      	ldr	r3, [r0, r4]

#if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
  group_ptr->BFLC |= config->bflc;
#endif
  /* Program the CHCTR register */
  group_ptr->CHCTR[ch_num] = config->chctr;
10001a8c:	3180      	adds	r1, #128	; 0x80
    }

    group_ptr->ALIAS |= (uint32_t)(config->alias_channel << mask);
  }

  group_ptr->BFL |= config->bfl;
10001a8e:	432b      	orrs	r3, r5
10001a90:	5103      	str	r3, [r0, r4]

#if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
  group_ptr->BFLC |= config->bflc;
10001a92:	3408      	adds	r4, #8
10001a94:	6895      	ldr	r5, [r2, #8]
10001a96:	5903      	ldr	r3, [r0, r4]
#endif
  /* Program the CHCTR register */
  group_ptr->CHCTR[ch_num] = config->chctr;
10001a98:	0089      	lsls	r1, r1, #2
  }

  group_ptr->BFL |= config->bfl;

#if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
  group_ptr->BFLC |= config->bflc;
10001a9a:	432b      	orrs	r3, r5
10001a9c:	5103      	str	r3, [r0, r4]
#endif
  /* Program the CHCTR register */
  group_ptr->CHCTR[ch_num] = config->chctr;
10001a9e:	6813      	ldr	r3, [r2, #0]
10001aa0:	500b      	str	r3, [r1, r0]

}
10001aa2:	bd70      	pop	{r4, r5, r6, pc}
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
    }
    else if ((uint32_t)0 == ch_num)
    {
      mask = VADC_G_ALIAS_ALIAS0_Pos;
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
10001aa4:	24b0      	movs	r4, #176	; 0xb0
10001aa6:	251f      	movs	r5, #31
10001aa8:	5903      	ldr	r3, [r0, r4]
10001aaa:	43ab      	bics	r3, r5
10001aac:	5103      	str	r3, [r0, r4]
10001aae:	7b54      	ldrb	r4, [r2, #13]
10001ab0:	2300      	movs	r3, #0
10001ab2:	e7e1      	b.n	10001a78 <XMC_VADC_GROUP_ChannelInit+0x28>
  {
    mask = (uint32_t)0;
    if ((uint32_t)1 == ch_num)
    {
      mask = VADC_G_ALIAS_ALIAS1_Pos;
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
10001ab4:	24b0      	movs	r4, #176	; 0xb0
10001ab6:	4b03      	ldr	r3, [pc, #12]	; (10001ac4 <XMC_VADC_GROUP_ChannelInit+0x74>)
10001ab8:	5905      	ldr	r5, [r0, r4]
10001aba:	402b      	ands	r3, r5
10001abc:	5103      	str	r3, [r0, r4]
10001abe:	7b54      	ldrb	r4, [r2, #13]
10001ac0:	2308      	movs	r3, #8
10001ac2:	e7d9      	b.n	10001a78 <XMC_VADC_GROUP_ChannelInit+0x28>
10001ac4:	ffffe0ff 	.word	0xffffe0ff

10001ac8 <_sbrk>:
caddr_t _sbrk(int nbytes)
{
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
10001ac8:	4a0c      	ldr	r2, [pc, #48]	; (10001afc <_sbrk+0x34>)

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
10001aca:	b508      	push	{r3, lr}
10001acc:	1c03      	adds	r3, r0, #0
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
10001ace:	6810      	ldr	r0, [r2, #0]
10001ad0:	2800      	cmp	r0, #0
10001ad2:	d00f      	beq.n	10001af4 <_sbrk+0x2c>
  }

  base = heap_ptr;

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
10001ad4:	2103      	movs	r1, #3
10001ad6:	3303      	adds	r3, #3
10001ad8:	438b      	bics	r3, r1
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
10001ada:	4909      	ldr	r1, [pc, #36]	; (10001b00 <_sbrk+0x38>)
10001adc:	18c3      	adds	r3, r0, r3
10001ade:	428b      	cmp	r3, r1
10001ae0:	d201      	bcs.n	10001ae6 <_sbrk+0x1e>
  {
    heap_ptr += nbytes;
10001ae2:	6013      	str	r3, [r2, #0]
  {
    /* Heap overflow */
    errno = ENOMEM;
    return ((caddr_t)-1);
  }
}
10001ae4:	bd08      	pop	{r3, pc}
    return (base);
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
10001ae6:	f002 f817 	bl	10003b18 <__errno>
10001aea:	230c      	movs	r3, #12
10001aec:	6003      	str	r3, [r0, #0]
    return ((caddr_t)-1);
10001aee:	2001      	movs	r0, #1
10001af0:	4240      	negs	r0, r0
10001af2:	e7f7      	b.n	10001ae4 <_sbrk+0x1c>
{
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
10001af4:	4803      	ldr	r0, [pc, #12]	; (10001b04 <_sbrk+0x3c>)
10001af6:	6010      	str	r0, [r2, #0]
10001af8:	e7ec      	b.n	10001ad4 <_sbrk+0xc>
10001afa:	46c0      	nop			; (mov r8, r8)
10001afc:	2000095c 	.word	0x2000095c
10001b00:	20003ffc 	.word	0x20003ffc
10001b04:	200020f0 	.word	0x200020f0

10001b08 <_init>:
  }
}

/* Init */
void _init(void)
{}
10001b08:	4770      	bx	lr
10001b0a:	46c0      	nop			; (mov r8, r8)

10001b0c <send_data>:
   2. EXPORTED FUNCTIONS
==============================================================================
 */

void send_data(char *tx_buffer)
{
10001b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
10001b0e:	4647      	mov	r7, r8
10001b10:	b480      	push	{r7}
	uint32_t index = 0;

	while (tx_buffer[index] != 0)
10001b12:	7801      	ldrb	r1, [r0, #0]
10001b14:	2900      	cmp	r1, #0
10001b16:	d018      	beq.n	10001b4a <send_data+0x3e>
	{
		UART_TransmitWord(&UART_0, tx_buffer[index]);
		index++;

		/* Wait for dump buffer interrupt to fill it again with remaining data */
		while ((UART_GetTXFIFOStatus(&UART_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0);
10001b18:	2480      	movs	r4, #128	; 0x80
10001b1a:	1c06      	adds	r6, r0, #0
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_ClearEvent() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_USIC_CH_TXFIFO_GetEvent(XMC_USIC_CH_t *const channel)
{
  return (uint32_t)((channel->TRBSR) & (USIC_CH_TRBSR_STBI_Msk |
10001b1c:	258a      	movs	r5, #138	; 0x8a
10001b1e:	0064      	lsls	r4, r4, #1
10001b20:	46a0      	mov	r8, r4
10001b22:	4f0b      	ldr	r7, [pc, #44]	; (10001b50 <send_data+0x44>)
10001b24:	3601      	adds	r6, #1
10001b26:	6838      	ldr	r0, [r7, #0]
10001b28:	006d      	lsls	r5, r5, #1
 *
 */
__STATIC_INLINE void UART_TransmitWord(const UART_t* const handle, uint8_t data)
{
  XMC_ASSERT("UART APP handle invalid", (handle != NULL))
  XMC_UART_CH_Transmit(handle->channel, (uint16_t)data);
10001b2a:	b289      	uxth	r1, r1
10001b2c:	f7ff fd50 	bl	100015d0 <XMC_UART_CH_Transmit>
10001b30:	6838      	ldr	r0, [r7, #0]
10001b32:	5943      	ldr	r3, [r0, r5]
10001b34:	4223      	tst	r3, r4
10001b36:	d0fc      	beq.n	10001b32 <send_data+0x26>
 * XMC_USIC_CH_TXFIFO_GetEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_ClearEvent(XMC_USIC_CH_t *const channel,
                                                   const uint32_t event)
{
  channel->TRBSCR = event;
10001b38:	238c      	movs	r3, #140	; 0x8c
10001b3a:	4642      	mov	r2, r8
10001b3c:	005b      	lsls	r3, r3, #1
10001b3e:	3601      	adds	r6, #1
10001b40:	50c2      	str	r2, [r0, r3]
10001b42:	1e73      	subs	r3, r6, #1

void send_data(char *tx_buffer)
{
	uint32_t index = 0;

	while (tx_buffer[index] != 0)
10001b44:	7819      	ldrb	r1, [r3, #0]
10001b46:	2900      	cmp	r1, #0
10001b48:	d1ef      	bne.n	10001b2a <send_data+0x1e>
		/* Wait for dump buffer interrupt to fill it again with remaining data */
		while ((UART_GetTXFIFOStatus(&UART_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0);

		UART_ClearTXFIFOStatus(&UART_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
	}
}
10001b4a:	bc04      	pop	{r2}
10001b4c:	4690      	mov	r8, r2
10001b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001b50:	20000548 	.word	0x20000548

10001b54 <dump_arr_uint16>:
}

//===========================================================================

void dump_arr_uint16(uint16_t *txArray, uint16_t nsamples)
{
10001b54:	b5f0      	push	{r4, r5, r6, r7, lr}
10001b56:	4647      	mov	r7, r8
10001b58:	b480      	push	{r7}
	uint16_t display_rows = ((nsamples - 1) / COL_LENGTH) + 1;
10001b5a:	3901      	subs	r1, #1
10001b5c:	0909      	lsrs	r1, r1, #4

	char line_buffer[200];

	uint16_t i = 0, j = 0;

	for (i = 0; i < display_rows; i++)
10001b5e:	4b11      	ldr	r3, [pc, #68]	; (10001ba4 <dump_arr_uint16+0x50>)
10001b60:	b28a      	uxth	r2, r1
}

//===========================================================================

void dump_arr_uint16(uint16_t *txArray, uint16_t nsamples)
{
10001b62:	b0b2      	sub	sp, #200	; 0xc8

	char line_buffer[200];

	uint16_t i = 0, j = 0;

	for (i = 0; i < display_rows; i++)
10001b64:	429a      	cmp	r2, r3
10001b66:	d019      	beq.n	10001b9c <dump_arr_uint16+0x48>
10001b68:	4b0f      	ldr	r3, [pc, #60]	; (10001ba8 <dump_arr_uint16+0x54>)
10001b6a:	1c04      	adds	r4, r0, #0
10001b6c:	4698      	mov	r8, r3
10001b6e:	040f      	lsls	r7, r1, #16
10001b70:	0aff      	lsrs	r7, r7, #11
10001b72:	3720      	adds	r7, #32
10001b74:	4e0d      	ldr	r6, [pc, #52]	; (10001bac <dump_arr_uint16+0x58>)
10001b76:	19c7      	adds	r7, r0, r7
10001b78:	1c25      	adds	r5, r4, #0
10001b7a:	3520      	adds	r5, #32
	{
		for (j = 0; j < COL_LENGTH; j++)
		{
			sprintf(line_buffer, "%" PRIu16 " ", txArray[i * COL_LENGTH + j]);
10001b7c:	8822      	ldrh	r2, [r4, #0]
10001b7e:	1c31      	adds	r1, r6, #0
10001b80:	4668      	mov	r0, sp
10001b82:	f001 ffff 	bl	10003b84 <siprintf>
10001b86:	3402      	adds	r4, #2

			send_data(line_buffer);
10001b88:	4668      	mov	r0, sp
10001b8a:	f7ff ffbf 	bl	10001b0c <send_data>

	uint16_t i = 0, j = 0;

	for (i = 0; i < display_rows; i++)
	{
		for (j = 0; j < COL_LENGTH; j++)
10001b8e:	42a5      	cmp	r5, r4
10001b90:	d1f4      	bne.n	10001b7c <dump_arr_uint16+0x28>
		{
			sprintf(line_buffer, "%" PRIu16 " ", txArray[i * COL_LENGTH + j]);

			send_data(line_buffer);
		}
		send_data("\n\r");
10001b92:	4640      	mov	r0, r8
10001b94:	f7ff ffba 	bl	10001b0c <send_data>

	char line_buffer[200];

	uint16_t i = 0, j = 0;

	for (i = 0; i < display_rows; i++)
10001b98:	42bc      	cmp	r4, r7
10001b9a:	d1ed      	bne.n	10001b78 <dump_arr_uint16+0x24>

			send_data(line_buffer);
		}
		send_data("\n\r");
	}
}
10001b9c:	b032      	add	sp, #200	; 0xc8
10001b9e:	bc04      	pop	{r2}
10001ba0:	4690      	mov	r8, r2
10001ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001ba4:	0000ffff 	.word	0x0000ffff
10001ba8:	100043e4 	.word	0x100043e4
10001bac:	100043e8 	.word	0x100043e8

10001bb0 <dumpRawIQ_uint16>:
}

//===========================================================================

void dumpRawIQ_uint16(uint16_t *raw_adc_i, uint16_t *raw_adc_q, uint16_t nsamples)
{
10001bb0:	b570      	push	{r4, r5, r6, lr}
10001bb2:	1c14      	adds	r4, r2, #0
10001bb4:	1c06      	adds	r6, r0, #0
10001bb6:	1c0d      	adds	r5, r1, #0
	send_data("\n  ------------- I raw samples ------------- \n\r");
10001bb8:	4807      	ldr	r0, [pc, #28]	; (10001bd8 <dumpRawIQ_uint16+0x28>)
10001bba:	f7ff ffa7 	bl	10001b0c <send_data>
	dump_arr_uint16(raw_adc_i, nsamples);
10001bbe:	1c30      	adds	r0, r6, #0
10001bc0:	1c21      	adds	r1, r4, #0
10001bc2:	f7ff ffc7 	bl	10001b54 <dump_arr_uint16>
	send_data("\n  ------------- Q raw samples ------------- \n\r");
10001bc6:	4805      	ldr	r0, [pc, #20]	; (10001bdc <dumpRawIQ_uint16+0x2c>)
10001bc8:	f7ff ffa0 	bl	10001b0c <send_data>
	dump_arr_uint16(raw_adc_q, nsamples);
10001bcc:	1c28      	adds	r0, r5, #0
10001bce:	1c21      	adds	r1, r4, #0
10001bd0:	f7ff ffc0 	bl	10001b54 <dump_arr_uint16>
}
10001bd4:	bd70      	pop	{r4, r5, r6, pc}
10001bd6:	46c0      	nop			; (mov r8, r8)
10001bd8:	100043ec 	.word	0x100043ec
10001bdc:	1000441c 	.word	0x1000441c

10001be0 <UART_Init>:
 *          UART_SUCCESS: for successful UART initialization.<BR>
 *          UART_STATUS_FAILURE  : If UART initialization fails.<BR>
 *
 */
UART_STATUS_t UART_Init(const UART_t *const handle)
{
10001be0:	b508      	push	{r3, lr}
  XMC_ASSERT("UART_Init : UART APP handle invalid", (((handle != NULL)&&
      (handle->config != NULL)) &&((handle->config->fptr_uart_config != NULL)&&
      (handle->runtime != NULL))))

  /*Initialize the multiplexers required for UART configuration*/
  status = handle->config->fptr_uart_config();
10001be2:	6843      	ldr	r3, [r0, #4]
10001be4:	685b      	ldr	r3, [r3, #4]
10001be6:	4798      	blx	r3

  return status;
}
10001be8:	bd08      	pop	{r3, pc}
10001bea:	46c0      	nop			; (mov r8, r8)

10001bec <UART_lTransmitHandler>:
 *  * param[in]  handle UART APP handle pointer of type UART_t*
 *
 *  * return void
 */
void UART_lTransmitHandler(const UART_t * const handle)
{
10001bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
10001bee:	6884      	ldr	r4, [r0, #8]
 *  * param[in]  handle UART APP handle pointer of type UART_t*
 *
 *  * return void
 */
void UART_lTransmitHandler(const UART_t * const handle)
{
10001bf0:	1c05      	adds	r5, r0, #0
  UART_RUNTIME_t * ptr_runtime = handle->runtime;

  if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
10001bf2:	68e3      	ldr	r3, [r4, #12]
10001bf4:	68a2      	ldr	r2, [r4, #8]
10001bf6:	4293      	cmp	r3, r2
10001bf8:	d21d      	bcs.n	10001c36 <UART_lTransmitHandler+0x4a>
  {
    if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
10001bfa:	222b      	movs	r2, #43	; 0x2b
10001bfc:	6841      	ldr	r1, [r0, #4]
    {
      /*When Transmit FIFO is enabled*/
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
10001bfe:	6800      	ldr	r0, [r0, #0]
{
  UART_RUNTIME_t * ptr_runtime = handle->runtime;

  if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
  {
    if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
10001c00:	5c8a      	ldrb	r2, [r1, r2]
10001c02:	2a00      	cmp	r2, #0
10001c04:	d03b      	beq.n	10001c7e <UART_lTransmitHandler+0x92>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
10001c06:	268a      	movs	r6, #138	; 0x8a
10001c08:	2280      	movs	r2, #128	; 0x80
10001c0a:	0076      	lsls	r6, r6, #1
10001c0c:	5981      	ldr	r1, [r0, r6]
10001c0e:	0152      	lsls	r2, r2, #5
10001c10:	1c17      	adds	r7, r2, #0
    {
      /*When Transmit FIFO is enabled*/
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
10001c12:	4211      	tst	r1, r2
10001c14:	d003      	beq.n	10001c1e <UART_lTransmitHandler+0x32>
10001c16:	e00d      	b.n	10001c34 <UART_lTransmitHandler+0x48>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
10001c18:	68a2      	ldr	r2, [r4, #8]
10001c1a:	429a      	cmp	r2, r3
10001c1c:	d90a      	bls.n	10001c34 <UART_lTransmitHandler+0x48>
        {
          /*Load the FIFO byte by byte till either FIFO is full or all data is loaded*/
          XMC_UART_CH_Transmit(handle->channel,(uint16_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
10001c1e:	6822      	ldr	r2, [r4, #0]
10001c20:	5cd1      	ldrb	r1, [r2, r3]
10001c22:	f7ff fcd5 	bl	100015d0 <XMC_UART_CH_Transmit>
  {
    if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
    {
      /*When Transmit FIFO is enabled*/
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
10001c26:	6828      	ldr	r0, [r5, #0]
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
        {
          /*Load the FIFO byte by byte till either FIFO is full or all data is loaded*/
          XMC_UART_CH_Transmit(handle->channel,(uint16_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
          (ptr_runtime->tx_data_index)++;
10001c28:	68e3      	ldr	r3, [r4, #12]
10001c2a:	5982      	ldr	r2, [r0, r6]
10001c2c:	3301      	adds	r3, #1
10001c2e:	60e3      	str	r3, [r4, #12]
  {
    if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
    {
      /*When Transmit FIFO is enabled*/
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
10001c30:	423a      	tst	r2, r7
10001c32:	d0f1      	beq.n	10001c18 <UART_lTransmitHandler+0x2c>
        /*Execute the callback function provided in the UART APP UI*/
        handle->config->tx_cbhandler();
      }
    }
  }
}
10001c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
10001c36:	238a      	movs	r3, #138	; 0x8a
      (ptr_runtime->tx_data_index)++;
    }
  }
  else
  {
    if (XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel) == true)
10001c38:	6802      	ldr	r2, [r0, #0]
10001c3a:	005b      	lsls	r3, r3, #1
10001c3c:	58d3      	ldr	r3, [r2, r3]
10001c3e:	051b      	lsls	r3, r3, #20
10001c40:	d5f8      	bpl.n	10001c34 <UART_lTransmitHandler+0x48>
    {
      if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
10001c42:	232b      	movs	r3, #43	; 0x2b
10001c44:	6840      	ldr	r0, [r0, #4]
10001c46:	5cc3      	ldrb	r3, [r0, r3]
10001c48:	2b00      	cmp	r3, #0
10001c4a:	d013      	beq.n	10001c74 <UART_lTransmitHandler+0x88>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->TBCTR &= (uint32_t)~event;
10001c4c:	2184      	movs	r1, #132	; 0x84
10001c4e:	0049      	lsls	r1, r1, #1
10001c50:	5855      	ldr	r5, [r2, r1]
10001c52:	4b0f      	ldr	r3, [pc, #60]	; (10001c90 <UART_lTransmitHandler+0xa4>)
10001c54:	402b      	ands	r3, r5
10001c56:	5053      	str	r3, [r2, r1]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
10001c58:	217f      	movs	r1, #127	; 0x7f
10001c5a:	6b93      	ldr	r3, [r2, #56]	; 0x38
10001c5c:	438b      	bics	r3, r1
        /*Disable the standard transmit event*/
        XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
      }

      /*Wait for the transmit buffer to be free to ensure that all data is transmitted*/
      while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
10001c5e:	b2db      	uxtb	r3, r3
10001c60:	2b80      	cmp	r3, #128	; 0x80
10001c62:	d0fa      	beq.n	10001c5a <UART_lTransmitHandler+0x6e>
      {

      }
      /*All data is transmitted*/
      ptr_runtime->tx_busy = false;
10001c64:	2300      	movs	r3, #0
10001c66:	7623      	strb	r3, [r4, #24]
      ptr_runtime->tx_data = NULL;
10001c68:	6023      	str	r3, [r4, #0]

      if (handle->config->tx_cbhandler != NULL)
10001c6a:	6883      	ldr	r3, [r0, #8]
10001c6c:	2b00      	cmp	r3, #0
10001c6e:	d0e1      	beq.n	10001c34 <UART_lTransmitHandler+0x48>
      {
        /*Execute the callback function provided in the UART APP UI*/
        handle->config->tx_cbhandler();
10001c70:	4798      	blx	r3
10001c72:	e7df      	b.n	10001c34 <UART_lTransmitHandler+0x48>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR &= (uint32_t)~event;
10001c74:	6c11      	ldr	r1, [r2, #64]	; 0x40
10001c76:	4b07      	ldr	r3, [pc, #28]	; (10001c94 <UART_lTransmitHandler+0xa8>)
10001c78:	400b      	ands	r3, r1
10001c7a:	6413      	str	r3, [r2, #64]	; 0x40
10001c7c:	e7ec      	b.n	10001c58 <UART_lTransmitHandler+0x6c>
      }
    }
    else
    {
      /*When Transmit FIFO is disabled*/
      XMC_UART_CH_Transmit(handle->channel,(uint16_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
10001c7e:	6822      	ldr	r2, [r4, #0]
10001c80:	5cd1      	ldrb	r1, [r2, r3]
10001c82:	f7ff fca5 	bl	100015d0 <XMC_UART_CH_Transmit>
      (ptr_runtime->tx_data_index)++;
10001c86:	68e3      	ldr	r3, [r4, #12]
10001c88:	3301      	adds	r3, #1
10001c8a:	60e3      	str	r3, [r4, #12]
10001c8c:	e7d2      	b.n	10001c34 <UART_lTransmitHandler+0x48>
10001c8e:	46c0      	nop			; (mov r8, r8)
10001c90:	bfffffff 	.word	0xbfffffff
10001c94:	ffffdfff 	.word	0xffffdfff

10001c98 <UART_lReceiveHandler>:
 * param[in]  handle UART APP handle pointer of type UART_t*
 *
 * return void
 */
void UART_lReceiveHandler(const UART_t * const handle)
{
10001c98:	b5f0      	push	{r4, r5, r6, r7, lr}
10001c9a:	4647      	mov	r7, r8
  UART_RUNTIME_t * ptr_runtime = handle->runtime;

  if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
10001c9c:	232c      	movs	r3, #44	; 0x2c
 * param[in]  handle UART APP handle pointer of type UART_t*
 *
 * return void
 */
void UART_lReceiveHandler(const UART_t * const handle)
{
10001c9e:	b480      	push	{r7}
  UART_RUNTIME_t * ptr_runtime = handle->runtime;

  if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
10001ca0:	6842      	ldr	r2, [r0, #4]
 * param[in]  handle UART APP handle pointer of type UART_t*
 *
 * return void
 */
void UART_lReceiveHandler(const UART_t * const handle)
{
10001ca2:	1c07      	adds	r7, r0, #0
  UART_RUNTIME_t * ptr_runtime = handle->runtime;

  if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
10001ca4:	5cd3      	ldrb	r3, [r2, r3]
 *
 * return void
 */
void UART_lReceiveHandler(const UART_t * const handle)
{
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
10001ca6:	6885      	ldr	r5, [r0, #8]

  if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
10001ca8:	2b00      	cmp	r3, #0
10001caa:	d02f      	beq.n	10001d0c <UART_lReceiveHandler+0x74>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
10001cac:	218a      	movs	r1, #138	; 0x8a
10001cae:	0049      	lsls	r1, r1, #1
10001cb0:	696b      	ldr	r3, [r5, #20]
10001cb2:	692a      	ldr	r2, [r5, #16]
10001cb4:	6800      	ldr	r0, [r0, #0]
10001cb6:	4688      	mov	r8, r1
10001cb8:	2608      	movs	r6, #8
10001cba:	e001      	b.n	10001cc0 <UART_lReceiveHandler+0x28>
        /*Read all the content of Receive FIFO */
        ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
        (ptr_runtime->rx_data_index)++;
      }

      if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
10001cbc:	429a      	cmp	r2, r3
10001cbe:	d011      	beq.n	10001ce4 <UART_lReceiveHandler+0x4c>
10001cc0:	4641      	mov	r1, r8
10001cc2:	5841      	ldr	r1, [r0, r1]
  UART_RUNTIME_t * ptr_runtime = handle->runtime;

  if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
  {
    /*When Receive FIFO is enabled*/
    while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
10001cc4:	420e      	tst	r6, r1
10001cc6:	d11c      	bne.n	10001d02 <UART_lReceiveHandler+0x6a>
    {
      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
10001cc8:	4293      	cmp	r3, r2
10001cca:	d2f7      	bcs.n	10001cbc <UART_lReceiveHandler+0x24>
      {
        /*Read all the content of Receive FIFO */
        ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
10001ccc:	686a      	ldr	r2, [r5, #4]
10001cce:	18d4      	adds	r4, r2, r3
10001cd0:	f7ff fc96 	bl	10001600 <XMC_UART_CH_GetReceivedData>
10001cd4:	7020      	strb	r0, [r4, #0]
        (ptr_runtime->rx_data_index)++;
10001cd6:	696b      	ldr	r3, [r5, #20]
10001cd8:	692a      	ldr	r2, [r5, #16]
10001cda:	3301      	adds	r3, #1
10001cdc:	616b      	str	r3, [r5, #20]
10001cde:	6838      	ldr	r0, [r7, #0]
      }

      if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
10001ce0:	429a      	cmp	r2, r3
10001ce2:	d1ed      	bne.n	10001cc0 <UART_lReceiveHandler+0x28>
      {
        /*Reception complete*/
        ptr_runtime->rx_busy = false;
10001ce4:	2300      	movs	r3, #0
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->RBCTR &= (uint32_t)~event;
10001ce6:	2286      	movs	r2, #134	; 0x86
10001ce8:	766b      	strb	r3, [r5, #25]
10001cea:	0052      	lsls	r2, r2, #1
10001cec:	5881      	ldr	r1, [r0, r2]
10001cee:	4b1e      	ldr	r3, [pc, #120]	; (10001d68 <UART_lReceiveHandler+0xd0>)
10001cf0:	400b      	ands	r3, r1
10001cf2:	5083      	str	r3, [r0, r2]
        /*Disable both standard receive and alternative receive FIFO events*/
        XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,
            (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
            (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
        if (handle->config->rx_cbhandler != NULL)
10001cf4:	687b      	ldr	r3, [r7, #4]
10001cf6:	68db      	ldr	r3, [r3, #12]
10001cf8:	2b00      	cmp	r3, #0
10001cfa:	d004      	beq.n	10001d06 <UART_lReceiveHandler+0x6e>
        {
          /*Execute the 'End of reception' callback function*/
          handle->config->rx_cbhandler();
10001cfc:	4798      	blx	r3
10001cfe:	696b      	ldr	r3, [r5, #20]
10001d00:	692a      	ldr	r2, [r5, #16]
        }
        break;
      }
    }
    /*Set the trigger limit if data still to be received*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
10001d02:	429a      	cmp	r2, r3
10001d04:	d815      	bhi.n	10001d32 <UART_lReceiveHandler+0x9a>
        /*Execute the 'End of reception' callback function*/
        handle->config->rx_cbhandler();
      }
    }
  }
}
10001d06:	bc04      	pop	{r2}
10001d08:	4690      	mov	r8, r2
10001d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    }
  }
  else
  {
    /*When RxFIFO is disabled*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
10001d0c:	696b      	ldr	r3, [r5, #20]
10001d0e:	692a      	ldr	r2, [r5, #16]
10001d10:	4293      	cmp	r3, r2
10001d12:	d31b      	bcc.n	10001d4c <UART_lReceiveHandler+0xb4>
    {
      ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
      (ptr_runtime->rx_data_index)++;
    }

    if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
10001d14:	429a      	cmp	r2, r3
10001d16:	d1f6      	bne.n	10001d06 <UART_lReceiveHandler+0x6e>
    {
      /*Reception complete*/
      ptr_runtime->rx_busy = false;
10001d18:	2300      	movs	r3, #0
      /*Disable both standard receive and alternative receive FIFO events*/
      XMC_USIC_CH_DisableEvent(handle->channel,
10001d1a:	683a      	ldr	r2, [r7, #0]
    }

    if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
    {
      /*Reception complete*/
      ptr_runtime->rx_busy = false;
10001d1c:	766b      	strb	r3, [r5, #25]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR &= (uint32_t)~event;
10001d1e:	6c11      	ldr	r1, [r2, #64]	; 0x40
10001d20:	4b12      	ldr	r3, [pc, #72]	; (10001d6c <UART_lReceiveHandler+0xd4>)
10001d22:	400b      	ands	r3, r1
10001d24:	6413      	str	r3, [r2, #64]	; 0x40
      /*Disable both standard receive and alternative receive FIFO events*/
      XMC_USIC_CH_DisableEvent(handle->channel,
          (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE | (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));

      if (handle->config->rx_cbhandler != NULL)
10001d26:	687b      	ldr	r3, [r7, #4]
10001d28:	68db      	ldr	r3, [r3, #12]
10001d2a:	2b00      	cmp	r3, #0
10001d2c:	d0eb      	beq.n	10001d06 <UART_lReceiveHandler+0x6e>
      {
        /*Execute the 'End of reception' callback function*/
        handle->config->rx_cbhandler();
10001d2e:	4798      	blx	r3
10001d30:	e7e9      	b.n	10001d06 <UART_lReceiveHandler+0x6e>
      }
    }
    /*Set the trigger limit if data still to be received*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
    {
      UART_lReconfigureRxFIFO(handle,
10001d32:	1ad3      	subs	r3, r2, r3
{
  uint32_t fifo_size;
  uint32_t ret_limit_val = 0U;

  /*Get FIFO size in bytes*/
  fifo_size = (uint32_t)(0x01UL << (uint8_t)(handle->config->rx_fifo_size));
10001d34:	222c      	movs	r2, #44	; 0x2c
10001d36:	cf03      	ldmia	r7!, {r0, r1}
10001d38:	2401      	movs	r4, #1
10001d3a:	5c89      	ldrb	r1, [r1, r2]
10001d3c:	408c      	lsls	r4, r1
  {
    ret_limit_val = (uint32_t)(data_size - 1U);
  }
  else
  {
    ret_limit_val = (uint32_t)(fifo_size - 1U);
10001d3e:	1e62      	subs	r2, r4, #1
  uint32_t ret_limit_val = 0U;

  /*Get FIFO size in bytes*/
  fifo_size = (uint32_t)(0x01UL << (uint8_t)(handle->config->rx_fifo_size));
  /*If data size is more than FIFO size, configure the limit to the FIFO size*/
  if (data_size < fifo_size)
10001d40:	42a3      	cmp	r3, r4
10001d42:	d200      	bcs.n	10001d46 <UART_lReceiveHandler+0xae>
  {
    ret_limit_val = (uint32_t)(data_size - 1U);
10001d44:	1e5a      	subs	r2, r3, #1
  else
  {
    ret_limit_val = (uint32_t)(fifo_size - 1U);
  }
  /*Set the limit value*/
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel,
10001d46:	f7ff fd09 	bl	1000175c <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>
10001d4a:	e7dc      	b.n	10001d06 <UART_lReceiveHandler+0x6e>
  else
  {
    /*When RxFIFO is disabled*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
    {
      ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
10001d4c:	686a      	ldr	r2, [r5, #4]
10001d4e:	6800      	ldr	r0, [r0, #0]
10001d50:	18d4      	adds	r4, r2, r3
10001d52:	f7ff fc55 	bl	10001600 <XMC_UART_CH_GetReceivedData>
10001d56:	7020      	strb	r0, [r4, #0]
      (ptr_runtime->rx_data_index)++;
10001d58:	696b      	ldr	r3, [r5, #20]
10001d5a:	692a      	ldr	r2, [r5, #16]
10001d5c:	3301      	adds	r3, #1
10001d5e:	616b      	str	r3, [r5, #20]
    }

    if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
10001d60:	429a      	cmp	r2, r3
10001d62:	d1d0      	bne.n	10001d06 <UART_lReceiveHandler+0x6e>
10001d64:	e7d8      	b.n	10001d18 <UART_lReceiveHandler+0x80>
10001d66:	46c0      	nop			; (mov r8, r8)
10001d68:	9fffffff 	.word	0x9fffffff
10001d6c:	ffff3fff 	.word	0xffff3fff

10001d70 <UART_0_init>:
/**********************************************************************************************************************
 * API IMPLEMENTATION
 **********************************************************************************************************************/
/*Channel initialization function*/
UART_STATUS_t UART_0_init()
{
10001d70:	b538      	push	{r3, r4, r5, lr}
  UART_STATUS_t status = UART_STATUS_SUCCESS;
  /*Configure Receive pin*/
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT2_BASE, 6U, &UART_0_rx_pin_config);
  /* Initialize USIC channel in UART mode*/
  XMC_UART_CH_Init(XMC_UART0_CH0, &UART_0_channel_config);
10001d72:	2490      	movs	r4, #144	; 0x90
/*Channel initialization function*/
UART_STATUS_t UART_0_init()
{
  UART_STATUS_t status = UART_STATUS_SUCCESS;
  /*Configure Receive pin*/
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT2_BASE, 6U, &UART_0_rx_pin_config);
10001d74:	4d2e      	ldr	r5, [pc, #184]	; (10001e30 <UART_0_init+0xc0>)
  /* Initialize USIC channel in UART mode*/
  XMC_UART_CH_Init(XMC_UART0_CH0, &UART_0_channel_config);
10001d76:	05e4      	lsls	r4, r4, #23
/*Channel initialization function*/
UART_STATUS_t UART_0_init()
{
  UART_STATUS_t status = UART_STATUS_SUCCESS;
  /*Configure Receive pin*/
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT2_BASE, 6U, &UART_0_rx_pin_config);
10001d78:	1c28      	adds	r0, r5, #0
10001d7a:	4a2e      	ldr	r2, [pc, #184]	; (10001e34 <UART_0_init+0xc4>)
10001d7c:	2106      	movs	r1, #6
10001d7e:	f7ff f9bb 	bl	100010f8 <XMC_GPIO_Init>
  /* Initialize USIC channel in UART mode*/
  XMC_UART_CH_Init(XMC_UART0_CH0, &UART_0_channel_config);
10001d82:	1c20      	adds	r0, r4, #0
10001d84:	492c      	ldr	r1, [pc, #176]	; (10001e38 <UART_0_init+0xc8>)
10001d86:	f7ff fbe9 	bl	1000155c <XMC_UART_CH_Init>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
10001d8a:	2207      	movs	r2, #7
10001d8c:	2106      	movs	r1, #6
10001d8e:	69e3      	ldr	r3, [r4, #28]
  /*Set input source path*/
  XMC_USIC_CH_SetInputSource(XMC_UART0_CH0, XMC_USIC_CH_INPUT_DX0, 6U);
  XMC_USIC_CH_SetInputSource(XMC_UART0_CH0, XMC_USIC_CH_INPUT_DX3, 4U);
  XMC_USIC_CH_SetInputSource(XMC_UART0_CH0, XMC_USIC_CH_INPUT_DX5, 0U);
  /*Configure transmit FIFO*/
  XMC_USIC_CH_TXFIFO_Configure(XMC_UART0_CH0,
10001d90:	1c20      	adds	r0, r4, #0
10001d92:	4393      	bics	r3, r2
10001d94:	430b      	orrs	r3, r1
10001d96:	61e3      	str	r3, [r4, #28]
10001d98:	6aa3      	ldr	r3, [r4, #40]	; 0x28
10001d9a:	3902      	subs	r1, #2
10001d9c:	4393      	bics	r3, r2
10001d9e:	430b      	orrs	r3, r1
10001da0:	62a3      	str	r3, [r4, #40]	; 0x28
10001da2:	6b23      	ldr	r3, [r4, #48]	; 0x30
10001da4:	310c      	adds	r1, #12
10001da6:	4393      	bics	r3, r2
10001da8:	6323      	str	r3, [r4, #48]	; 0x30
10001daa:	3a03      	subs	r2, #3
10001dac:	2301      	movs	r3, #1
10001dae:	f7ff fca7 	bl	10001700 <XMC_USIC_CH_TXFIFO_Configure>
        16U,
        XMC_USIC_CH_FIFO_SIZE_16WORDS,
        1U);
  /*Configure receive FIFO*/
  XMC_USIC_CH_RXFIFO_Configure(XMC_UART0_CH0,
10001db2:	1c20      	adds	r0, r4, #0
10001db4:	2100      	movs	r1, #0
10001db6:	2204      	movs	r2, #4
10001db8:	2300      	movs	r3, #0
10001dba:	f7ff fcb7 	bl	1000172c <XMC_USIC_CH_RXFIFO_Configure>
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
{
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
10001dbe:	220f      	movs	r2, #15
10001dc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
        0U);
  /* Start UART */
  XMC_UART_CH_Start(XMC_UART0_CH0);

  /* Initialize UART TX pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT2_BASE, 0U, &UART_0_tx_pin_config);
10001dc2:	1c28      	adds	r0, r5, #0
10001dc4:	4393      	bics	r3, r2
10001dc6:	3a0d      	subs	r2, #13
10001dc8:	4313      	orrs	r3, r2
10001dca:	6423      	str	r3, [r4, #64]	; 0x40
10001dcc:	2100      	movs	r1, #0
10001dce:	4a1b      	ldr	r2, [pc, #108]	; (10001e3c <UART_0_init+0xcc>)
10001dd0:	f7ff f992 	bl	100010f8 <XMC_GPIO_Init>

  /*Set service request for UART protocol events*/
  XMC_USIC_CH_SetInterruptNodePointer(XMC_UART0_CH0, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
10001dd4:	1c20      	adds	r0, r4, #0
10001dd6:	2110      	movs	r1, #16
10001dd8:	2200      	movs	r2, #0
10001dda:	f7ff fcd5 	bl	10001788 <XMC_USIC_CH_SetInterruptNodePointer>
     0U);
  /*Set service request for tx FIFO transmit interrupt*/
  XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_UART0_CH0, XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
10001dde:	1c20      	adds	r0, r4, #0
10001de0:	2110      	movs	r1, #16
10001de2:	2202      	movs	r2, #2
10001de4:	f7ff fcda 	bl	1000179c <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>
      2U);
  /*Set service request for rx FIFO receive interrupt*/
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_UART0_CH0, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
10001de8:	1c20      	adds	r0, r4, #0
10001dea:	2110      	movs	r1, #16
10001dec:	2201      	movs	r2, #1
10001dee:	f7ff fce1 	bl	100017b4 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
       0x1U);
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_UART0_CH0, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE,
10001df2:	1c20      	adds	r0, r4, #0
10001df4:	2113      	movs	r1, #19
10001df6:	2201      	movs	r2, #1
10001df8:	f7ff fcdc 	bl	100017b4 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10001dfc:	21c2      	movs	r1, #194	; 0xc2
10001dfe:	20c0      	movs	r0, #192	; 0xc0
10001e00:	4a0f      	ldr	r2, [pc, #60]	; (10001e40 <UART_0_init+0xd0>)
10001e02:	0089      	lsls	r1, r1, #2
10001e04:	5853      	ldr	r3, [r2, r1]
10001e06:	0600      	lsls	r0, r0, #24
10001e08:	021b      	lsls	r3, r3, #8
10001e0a:	0a1b      	lsrs	r3, r3, #8
10001e0c:	4303      	orrs	r3, r0
10001e0e:	5053      	str	r3, [r2, r1]
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
10001e10:	2380      	movs	r3, #128	; 0x80
10001e12:	011b      	lsls	r3, r3, #4
10001e14:	6013      	str	r3, [r2, #0]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10001e16:	5850      	ldr	r0, [r2, r1]
10001e18:	4b0a      	ldr	r3, [pc, #40]	; (10001e44 <UART_0_init+0xd4>)
10001e1a:	4003      	ands	r3, r0
10001e1c:	20c0      	movs	r0, #192	; 0xc0
10001e1e:	0400      	lsls	r0, r0, #16
10001e20:	4303      	orrs	r3, r0
10001e22:	5053      	str	r3, [r2, r1]
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
10001e24:	2380      	movs	r3, #128	; 0x80
10001e26:	00db      	lsls	r3, r3, #3
  NVIC_EnableIRQ((IRQn_Type)11);
  /*Set priority and enable NVIC node for receive interrupt*/
  NVIC_SetPriority((IRQn_Type)10, 3U);
  NVIC_EnableIRQ((IRQn_Type)10);
  return status;
}
10001e28:	2000      	movs	r0, #0
10001e2a:	6013      	str	r3, [r2, #0]
10001e2c:	bd38      	pop	{r3, r4, r5, pc}
10001e2e:	46c0      	nop			; (mov r8, r8)
10001e30:	40040200 	.word	0x40040200
10001e34:	1000448c 	.word	0x1000448c
10001e38:	100044a8 	.word	0x100044a8
10001e3c:	100044a0 	.word	0x100044a0
10001e40:	e000e100 	.word	0xe000e100
10001e44:	ff00ffff 	.word	0xff00ffff

10001e48 <USIC0_2_IRQHandler>:
/*Interrupt handlers*/
/*Transmit ISR*/
void UART_0_TX_HANDLER()
{
10001e48:	b508      	push	{r3, lr}
  UART_lTransmitHandler(&UART_0);
10001e4a:	4802      	ldr	r0, [pc, #8]	; (10001e54 <USIC0_2_IRQHandler+0xc>)
10001e4c:	f7ff fece 	bl	10001bec <UART_lTransmitHandler>
}
10001e50:	bd08      	pop	{r3, pc}
10001e52:	46c0      	nop			; (mov r8, r8)
10001e54:	20000548 	.word	0x20000548

10001e58 <USIC0_1_IRQHandler>:

/*Receive ISR*/
void UART_0_RX_HANDLER()
{
10001e58:	b508      	push	{r3, lr}
  UART_lReceiveHandler(&UART_0);
10001e5a:	4802      	ldr	r0, [pc, #8]	; (10001e64 <USIC0_1_IRQHandler+0xc>)
10001e5c:	f7ff ff1c 	bl	10001c98 <UART_lReceiveHandler>
}
10001e60:	bd08      	pop	{r3, pc}
10001e62:	46c0      	nop			; (mov r8, r8)
10001e64:	20000548 	.word	0x20000548

10001e68 <TIMER_Start>:
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Start:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check for APP instance is initialized or not */
  if (true == handle_ptr->initialized)
10001e68:	2226      	movs	r2, #38	; 0x26
10001e6a:	5c82      	ldrb	r2, [r0, r2]

/*
 * This function starts the timer to generate the events for the specified time_interval value
 */
TIMER_STATUS_t TIMER_Start(TIMER_t  *const handle_ptr)
{
10001e6c:	1c03      	adds	r3, r0, #0
#endif
    status = TIMER_STATUS_SUCCESS;
  }
  else
  {
    status = TIMER_STATUS_FAILURE;
10001e6e:	2001      	movs	r0, #1
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Start:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check for APP instance is initialized or not */
  if (true == handle_ptr->initialized)
10001e70:	2a00      	cmp	r2, #0
10001e72:	d007      	beq.n	10001e84 <TIMER_Start+0x1c>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
10001e74:	2221      	movs	r2, #33	; 0x21
10001e76:	5c9a      	ldrb	r2, [r3, r2]
       {
      /* Start the timer manually */
      XMC_CCU8_SLICE_StartTimer(handle_ptr->ccu8_slice_ptr);
       }
#endif
    status = TIMER_STATUS_SUCCESS;
10001e78:	2000      	movs	r0, #0

  /* Check for APP instance is initialized or not */
  if (true == handle_ptr->initialized)
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
10001e7a:	2a00      	cmp	r2, #0
10001e7c:	d102      	bne.n	10001e84 <TIMER_Start+0x1c>
    {
      /* Start the timer manually */
      XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
10001e7e:	695b      	ldr	r3, [r3, #20]
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
10001e80:	3201      	adds	r2, #1
10001e82:	60da      	str	r2, [r3, #12]
  {
    status = TIMER_STATUS_FAILURE;
  }

  return (status);
}
10001e84:	4770      	bx	lr
10001e86:	46c0      	nop			; (mov r8, r8)

10001e88 <TIMER_Stop>:
  XMC_ASSERT("TIMER_GetTimerStatus:handle_ptr NULL" , (handle_ptr != NULL));

  status = false;

#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
10001e88:	2321      	movs	r3, #33	; 0x21
10001e8a:	5cc2      	ldrb	r2, [r0, r3]
#endif
    status = TIMER_STATUS_SUCCESS;
  }
  else
  {
    status = TIMER_STATUS_FAILURE;
10001e8c:	3b20      	subs	r3, #32
  XMC_ASSERT("TIMER_GetTimerStatus:handle_ptr NULL" , (handle_ptr != NULL));

  status = false;

#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
10001e8e:	2a00      	cmp	r2, #0
10001e90:	d001      	beq.n	10001e96 <TIMER_Stop+0xe>
  {
    status = TIMER_STATUS_FAILURE;
  }

  return (status);
}
10001e92:	1c18      	adds	r0, r3, #0
10001e94:	4770      	bx	lr

#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
  {
    /* Returns the current status of the timer */
    status = XMC_CCU4_SLICE_IsTimerRunning(handle_ptr->ccu4_slice_ptr);
10001e96:	6941      	ldr	r1, [r0, #20]
 *  XMC_CCU4_SLICE_StartTimer()<BR> XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE bool XMC_CCU4_SLICE_IsTimerRunning(const XMC_CCU4_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU4_SLICE_GetTimerStatus:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  return (bool)(((slice->TCST) & CCU4_CC4_TCST_TRB_Msk) == CCU4_CC4_TCST_TRB_Msk);
10001e98:	688a      	ldr	r2, [r1, #8]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Stop:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check whether timer is initialized and in running state */
  if ((TIMER_GetTimerStatus(handle_ptr)) && (true == handle_ptr->initialized))
10001e9a:	4213      	tst	r3, r2
10001e9c:	d0f9      	beq.n	10001e92 <TIMER_Stop+0xa>
10001e9e:	2226      	movs	r2, #38	; 0x26
10001ea0:	5c82      	ldrb	r2, [r0, r2]
10001ea2:	2a00      	cmp	r2, #0
10001ea4:	d0f5      	beq.n	10001e92 <TIMER_Stop+0xa>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StopTimer(XMC_CCU4_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU4_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR |= (uint32_t) CCU4_CC4_TCCLR_TRBC_Msk;
10001ea6:	6908      	ldr	r0, [r1, #16]
10001ea8:	4303      	orrs	r3, r0
10001eaa:	610b      	str	r3, [r1, #16]
       {
      /* Stops the timer */
      XMC_CCU8_SLICE_StopTimer(handle_ptr->ccu8_slice_ptr);
       }
#endif
    status = TIMER_STATUS_SUCCESS;
10001eac:	2300      	movs	r3, #0
10001eae:	e7f0      	b.n	10001e92 <TIMER_Stop+0xa>

10001eb0 <TIMER_SetTimeInterval>:
/*
 * This function changes the PWM period which in turn changes the time tick interval value by checking that
 * the given time tick value is within supported range.
 */
TIMER_STATUS_t TIMER_SetTimeInterval(TIMER_t  *const handle_ptr, uint32_t time_interval)
{
10001eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  XMC_ASSERT("TIMER_GetTimerStatus:handle_ptr NULL" , (handle_ptr != NULL));

  status = false;

#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
10001eb2:	2321      	movs	r3, #33	; 0x21
10001eb4:	5cc7      	ldrb	r7, [r0, r3]
10001eb6:	2f00      	cmp	r7, #0
10001eb8:	d046      	beq.n	10001f48 <TIMER_SetTimeInterval+0x98>
  status = TIMER_STATUS_FAILURE;

  if (false == TIMER_GetTimerStatus(handle_ptr))
  {
    /* check for time_interval range */
    if ((time_interval >= handle_ptr->timer_min_value_us) && (time_interval <= handle_ptr->timer_max_value_us))
10001eba:	6882      	ldr	r2, [r0, #8]
  uint32_t lfrequency;
  uint32_t lprescaler;

  XMC_ASSERT("TIMER_SetTimeInterval:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_FAILURE;
10001ebc:	2301      	movs	r3, #1

  if (false == TIMER_GetTimerStatus(handle_ptr))
  {
    /* check for time_interval range */
    if ((time_interval >= handle_ptr->timer_min_value_us) && (time_interval <= handle_ptr->timer_max_value_us))
10001ebe:	428a      	cmp	r2, r1
10001ec0:	d840      	bhi.n	10001f44 <TIMER_SetTimeInterval+0x94>
10001ec2:	6845      	ldr	r5, [r0, #4]
10001ec4:	42a9      	cmp	r1, r5
10001ec6:	d83d      	bhi.n	10001f44 <TIMER_SetTimeInterval+0x94>
    {
      /* Initialize the prescaler */
      lprescaler = 0U;
      while (time_interval > (handle_ptr->timer_max_value_us >> (TIMER_PRESCALER_MAX - lprescaler)))
10001ec8:	0beb      	lsrs	r3, r5, #15
10001eca:	4299      	cmp	r1, r3
10001ecc:	d949      	bls.n	10001f62 <TIMER_SetTimeInterval+0xb2>
10001ece:	2300      	movs	r3, #0
10001ed0:	260e      	movs	r6, #14
10001ed2:	1c2a      	adds	r2, r5, #0
      {
        lprescaler++;
10001ed4:	1c5c      	adds	r4, r3, #1
10001ed6:	1af3      	subs	r3, r6, r3
    /* check for time_interval range */
    if ((time_interval >= handle_ptr->timer_min_value_us) && (time_interval <= handle_ptr->timer_max_value_us))
    {
      /* Initialize the prescaler */
      lprescaler = 0U;
      while (time_interval > (handle_ptr->timer_max_value_us >> (TIMER_PRESCALER_MAX - lprescaler)))
10001ed8:	40da      	lsrs	r2, r3
      {
        lprescaler++;
10001eda:	1c23      	adds	r3, r4, #0
    /* check for time_interval range */
    if ((time_interval >= handle_ptr->timer_min_value_us) && (time_interval <= handle_ptr->timer_max_value_us))
    {
      /* Initialize the prescaler */
      lprescaler = 0U;
      while (time_interval > (handle_ptr->timer_max_value_us >> (TIMER_PRESCALER_MAX - lprescaler)))
10001edc:	4291      	cmp	r1, r2
10001ede:	d8f8      	bhi.n	10001ed2 <TIMER_SetTimeInterval+0x22>
  uint32_t lfrequency;
  uint32_t lprescaler;

  XMC_ASSERT("TIMER_SetTimeInterval:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_FAILURE;
10001ee0:	2301      	movs	r3, #1
      while (time_interval > (handle_ptr->timer_max_value_us >> (TIMER_PRESCALER_MAX - lprescaler)))
      {
        lprescaler++;
      }
#ifdef TIMER_CCU4_USED
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
10001ee2:	2f00      	cmp	r7, #0
10001ee4:	d12e      	bne.n	10001f44 <TIMER_SetTimeInterval+0x94>
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
10001ee6:	6903      	ldr	r3, [r0, #16]
10001ee8:	1c05      	adds	r5, r0, #0
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
10001eea:	69c0      	ldr	r0, [r0, #28]
        lprescaler++;
      }
#ifdef TIMER_CCU4_USED
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
10001eec:	681a      	ldr	r2, [r3, #0]
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
10001eee:	7903      	ldrb	r3, [r0, #4]
10001ef0:	370f      	adds	r7, #15
10001ef2:	b2e6      	uxtb	r6, r4
10001ef4:	43bb      	bics	r3, r7
10001ef6:	403c      	ands	r4, r7
10001ef8:	4323      	orrs	r3, r4
10001efa:	7103      	strb	r3, [r0, #4]
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
10001efc:	1c08      	adds	r0, r1, #0
10001efe:	2300      	movs	r3, #0
10001f00:	2100      	movs	r1, #0
10001f02:	f001 f86d 	bl	10002fe0 <__aeabi_lmul>
10001f06:	2320      	movs	r3, #32
10001f08:	425b      	negs	r3, r3
10001f0a:	18e3      	adds	r3, r4, r3
10001f0c:	d422      	bmi.n	10001f54 <TIMER_SetTimeInterval+0xa4>
10001f0e:	1c08      	adds	r0, r1, #0
10001f10:	40d8      	lsrs	r0, r3
10001f12:	40e1      	lsrs	r1, r4
                                               handle_ptr->ccu4_slice_config_ptr->prescaler_initval) / \
10001f14:	4a14      	ldr	r2, [pc, #80]	; (10001f68 <TIMER_SetTimeInterval+0xb8>)
10001f16:	2300      	movs	r3, #0
10001f18:	f001 f842 	bl	10002fa0 <__aeabi_uldivmod>
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
10001f1c:	b280      	uxth	r0, r0
                                               handle_ptr->ccu4_slice_config_ptr->prescaler_initval) / \
                                              TIMER_RESOLUTION_SEC_TO_MICRO);
        /* Actual timer period values is Period_reg_val+1U */
        if (handle_ptr->period_value > TIMER_PERIOD_MIN)
10001f1e:	2801      	cmp	r0, #1
10001f20:	d900      	bls.n	10001f24 <TIMER_SetTimeInterval+0x74>
        {
          (handle_ptr->period_value)--;
10001f22:	3801      	subs	r0, #1
        }
        /* Update the prescaler */
        XMC_CCU4_SLICE_SetPrescaler(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr->prescaler_initval);
10001f24:	210f      	movs	r1, #15
                                               handle_ptr->ccu4_slice_config_ptr->prescaler_initval) / \
                                              TIMER_RESOLUTION_SEC_TO_MICRO);
        /* Actual timer period values is Period_reg_val+1U */
        if (handle_ptr->period_value > TIMER_PERIOD_MIN)
        {
          (handle_ptr->period_value)--;
10001f26:	8468      	strh	r0, [r5, #34]	; 0x22
        }
        /* Update the prescaler */
        XMC_CCU4_SLICE_SetPrescaler(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr->prescaler_initval);
10001f28:	4031      	ands	r1, r6
10001f2a:	6968      	ldr	r0, [r5, #20]
10001f2c:	f7ff fa94 	bl	10001458 <XMC_CCU4_SLICE_SetPrescaler>
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
{
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
10001f30:	696b      	ldr	r3, [r5, #20]
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
10001f32:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
10001f34:	635a      	str	r2, [r3, #52]	; 0x34
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
10001f36:	2200      	movs	r2, #0
10001f38:	63da      	str	r2, [r3, #60]	; 0x3c
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
10001f3a:	692b      	ldr	r3, [r5, #16]
10001f3c:	68ea      	ldr	r2, [r5, #12]
10001f3e:	689b      	ldr	r3, [r3, #8]
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
10001f40:	611a      	str	r2, [r3, #16]
        /* Update the prescaler */
        XMC_CCU4_SLICE_SetPrescaler(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr->prescaler_initval);
        /* update period, compare and prescaler values */
        TIMER_CCU4_lShadowTransfer(handle_ptr);
        /* Update the status */
        status = TIMER_STATUS_SUCCESS;
10001f42:	2300      	movs	r3, #0
      }
#endif
    }
  }
  return (status);
}
10001f44:	1c18      	adds	r0, r3, #0
10001f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
  {
    /* Returns the current status of the timer */
    status = XMC_CCU4_SLICE_IsTimerRunning(handle_ptr->ccu4_slice_ptr);
10001f48:	6943      	ldr	r3, [r0, #20]
 *  XMC_CCU4_SLICE_StartTimer()<BR> XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE bool XMC_CCU4_SLICE_IsTimerRunning(const XMC_CCU4_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU4_SLICE_GetTimerStatus:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  return (bool)(((slice->TCST) & CCU4_CC4_TCST_TRB_Msk) == CCU4_CC4_TCST_TRB_Msk);
10001f4a:	689a      	ldr	r2, [r3, #8]
  uint32_t lfrequency;
  uint32_t lprescaler;

  XMC_ASSERT("TIMER_SetTimeInterval:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_FAILURE;
10001f4c:	2301      	movs	r3, #1

  if (false == TIMER_GetTimerStatus(handle_ptr))
10001f4e:	07d2      	lsls	r2, r2, #31
10001f50:	d4f8      	bmi.n	10001f44 <TIMER_SetTimeInterval+0x94>
10001f52:	e7b2      	b.n	10001eba <TIMER_SetTimeInterval+0xa>
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
10001f54:	2320      	movs	r3, #32
10001f56:	1c0a      	adds	r2, r1, #0
10001f58:	1b1b      	subs	r3, r3, r4
10001f5a:	409a      	lsls	r2, r3
10001f5c:	40e0      	lsrs	r0, r4
10001f5e:	4310      	orrs	r0, r2
10001f60:	e7d7      	b.n	10001f12 <TIMER_SetTimeInterval+0x62>
    /* check for time_interval range */
    if ((time_interval >= handle_ptr->timer_min_value_us) && (time_interval <= handle_ptr->timer_max_value_us))
    {
      /* Initialize the prescaler */
      lprescaler = 0U;
      while (time_interval > (handle_ptr->timer_max_value_us >> (TIMER_PRESCALER_MAX - lprescaler)))
10001f62:	2400      	movs	r4, #0
10001f64:	e7bc      	b.n	10001ee0 <TIMER_SetTimeInterval+0x30>
10001f66:	46c0      	nop			; (mov r8, r8)
10001f68:	05f5e100 	.word	0x05f5e100

10001f6c <TIMER_CCU4_lInit>:
#ifdef TIMER_CCU4_USED
/*
 * This function configures timer ccu4 timer with required time tick value
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
10001f6c:	b570      	push	{r4, r5, r6, lr}
10001f6e:	1c04      	adds	r4, r0, #0
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
10001f70:	6900      	ldr	r0, [r0, #16]
10001f72:	f000 f94d 	bl	10002210 <GLOBAL_CCU4_Init>
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1) << slice_number;
10001f76:	2601      	movs	r6, #1
10001f78:	1c05      	adds	r5, r0, #0
10001f7a:	1c30      	adds	r0, r6, #0

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
10001f7c:	6923      	ldr	r3, [r4, #16]
10001f7e:	6899      	ldr	r1, [r3, #8]
10001f80:	7e23      	ldrb	r3, [r4, #24]
10001f82:	68ca      	ldr	r2, [r1, #12]
10001f84:	4098      	lsls	r0, r3
10001f86:	1c03      	adds	r3, r0, #0
10001f88:	4313      	orrs	r3, r2
10001f8a:	60cb      	str	r3, [r1, #12]
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
10001f8c:	6960      	ldr	r0, [r4, #20]
10001f8e:	69e1      	ldr	r1, [r4, #28]
10001f90:	f7ff fa4a 	bl	10001428 <XMC_CCU4_SLICE_CompareInit>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
10001f94:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
{
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
10001f96:	6960      	ldr	r0, [r4, #20]
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
10001f98:	68e2      	ldr	r2, [r4, #12]
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
10001f9a:	6343      	str	r3, [r0, #52]	; 0x34
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
10001f9c:	2300      	movs	r3, #0
10001f9e:	63c3      	str	r3, [r0, #60]	; 0x3c
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
10001fa0:	6923      	ldr	r3, [r4, #16]
10001fa2:	689b      	ldr	r3, [r3, #8]
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
10001fa4:	611a      	str	r2, [r3, #16]
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU4_lShadowTransfer(handle_ptr);

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
10001fa6:	2325      	movs	r3, #37	; 0x25
10001fa8:	5ce3      	ldrb	r3, [r4, r3]
10001faa:	2b00      	cmp	r3, #0
10001fac:	d10d      	bne.n	10001fca <TIMER_CCU4_lInit+0x5e>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR |= (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
10001fae:	2302      	movs	r3, #2
10001fb0:	6902      	ldr	r2, [r0, #16]
10001fb2:	4313      	orrs	r3, r2
10001fb4:	6103      	str	r3, [r0, #16]
#endif
  /* Clears the timer register */
  XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
10001fb6:	2226      	movs	r2, #38	; 0x26
10001fb8:	2301      	movs	r3, #1
10001fba:	54a3      	strb	r3, [r4, r2]

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
10001fbc:	3a02      	subs	r2, #2
10001fbe:	5ca2      	ldrb	r2, [r4, r2]
10001fc0:	2a00      	cmp	r2, #0
10001fc2:	d000      	beq.n	10001fc6 <TIMER_CCU4_lInit+0x5a>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
10001fc4:	60c3      	str	r3, [r0, #12]
    /* Start the timer */
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
  }

  return (status);
}
10001fc6:	1c28      	adds	r0, r5, #0
10001fc8:	bd70      	pop	{r4, r5, r6, pc}

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
  {
    /* Binds a period match event to an NVIC node  */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
10001fca:	2320      	movs	r3, #32
10001fcc:	2100      	movs	r1, #0
10001fce:	5ce2      	ldrb	r2, [r4, r3]
10001fd0:	f7ff fa4c 	bl	1000146c <XMC_CCU4_SLICE_SetInterruptNode>
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
10001fd4:	23a4      	movs	r3, #164	; 0xa4
                                    handle_ptr->ccu4_period_match_node);
    /* Enables a timer(period match) event  */
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
10001fd6:	6960      	ldr	r0, [r4, #20]
10001fd8:	58c2      	ldr	r2, [r0, r3]
10001fda:	4316      	orrs	r6, r2
10001fdc:	50c6      	str	r6, [r0, r3]
10001fde:	e7e6      	b.n	10001fae <TIMER_CCU4_lInit+0x42>

10001fe0 <TIMER_Init>:

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
10001fe0:	2226      	movs	r2, #38	; 0x26
/*
 * This function initializes a TIMER APP based on user configuration.
 *
 */
TIMER_STATUS_t TIMER_Init(TIMER_t* const handle_ptr)
{
10001fe2:	b508      	push	{r3, lr}

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
10001fe4:	5c82      	ldrb	r2, [r0, r2]
/*
 * This function initializes a TIMER APP based on user configuration.
 *
 */
TIMER_STATUS_t TIMER_Init(TIMER_t* const handle_ptr)
{
10001fe6:	1c03      	adds	r3, r0, #0
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
10001fe8:	2000      	movs	r0, #0
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
10001fea:	2a00      	cmp	r2, #0
10001fec:	d103      	bne.n	10001ff6 <TIMER_Init+0x16>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
10001fee:	3221      	adds	r2, #33	; 0x21
10001ff0:	5c9a      	ldrb	r2, [r3, r2]
10001ff2:	2a00      	cmp	r2, #0
10001ff4:	d000      	beq.n	10001ff8 <TIMER_Init+0x18>
    }
#endif
  }

  return (status);
}
10001ff6:	bd08      	pop	{r3, pc}
10001ff8:	1c18      	adds	r0, r3, #0
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
    {
      /* Configure CCU4 timer for the required time tick settings */
      status = TIMER_CCU4_lInit(handle_ptr);
10001ffa:	f7ff ffb7 	bl	10001f6c <TIMER_CCU4_lInit>
10001ffe:	e7fa      	b.n	10001ff6 <TIMER_Init+0x16>

10002000 <RTC_lConfigureInterrupts>:
}
/*
 *  This function configures periodic and alarm interrupts
 */
bool RTC_lConfigureInterrupts(const RTC_t *const handler)
{
10002000:	b510      	push	{r4, lr}
  uint32_t regval;
  bool interrupt_configured = false;

  /* Enable periodic seconds, minutes, hours days, months and years interrupts */
  regval = (((uint32_t)handler->config->periodic_sec_intr << RTC_MSKSR_MPSE_Pos)
10002002:	6843      	ldr	r3, [r0, #4]
}
/*
 *  This function configures periodic and alarm interrupts
 */
bool RTC_lConfigureInterrupts(const RTC_t *const handler)
{
10002004:	1c04      	adds	r4, r0, #0
  bool interrupt_configured = false;

  /* Enable periodic seconds, minutes, hours days, months and years interrupts */
  regval = (((uint32_t)handler->config->periodic_sec_intr << RTC_MSKSR_MPSE_Pos)
           | ((uint32_t)handler->config->periodic_min_intr << RTC_MSKSR_MPMI_Pos)
           | ((uint32_t)handler->config->periodic_hour_intr << RTC_MSKSR_MPHO_Pos)
10002006:	78da      	ldrb	r2, [r3, #3]
  uint32_t regval;
  bool interrupt_configured = false;

  /* Enable periodic seconds, minutes, hours days, months and years interrupts */
  regval = (((uint32_t)handler->config->periodic_sec_intr << RTC_MSKSR_MPSE_Pos)
           | ((uint32_t)handler->config->periodic_min_intr << RTC_MSKSR_MPMI_Pos)
10002008:	7898      	ldrb	r0, [r3, #2]
           | ((uint32_t)handler->config->periodic_hour_intr << RTC_MSKSR_MPHO_Pos)
1000200a:	0092      	lsls	r2, r2, #2
  uint32_t regval;
  bool interrupt_configured = false;

  /* Enable periodic seconds, minutes, hours days, months and years interrupts */
  regval = (((uint32_t)handler->config->periodic_sec_intr << RTC_MSKSR_MPSE_Pos)
           | ((uint32_t)handler->config->periodic_min_intr << RTC_MSKSR_MPMI_Pos)
1000200c:	0040      	lsls	r0, r0, #1
1000200e:	4310      	orrs	r0, r2
{
  uint32_t regval;
  bool interrupt_configured = false;

  /* Enable periodic seconds, minutes, hours days, months and years interrupts */
  regval = (((uint32_t)handler->config->periodic_sec_intr << RTC_MSKSR_MPSE_Pos)
10002010:	785a      	ldrb	r2, [r3, #1]
           | ((uint32_t)handler->config->periodic_min_intr << RTC_MSKSR_MPMI_Pos)
           | ((uint32_t)handler->config->periodic_hour_intr << RTC_MSKSR_MPHO_Pos)
10002012:	4310      	orrs	r0, r2
           | ((uint32_t)handler->config->periodic_day_intr << RTC_MSKSR_MPDA_Pos)
10002014:	791a      	ldrb	r2, [r3, #4]
10002016:	00d2      	lsls	r2, r2, #3
10002018:	4310      	orrs	r0, r2
           | ((uint32_t)handler->config->periodic_month_intr << RTC_MSKSR_MPMO_Pos)
1000201a:	795a      	ldrb	r2, [r3, #5]
1000201c:	0152      	lsls	r2, r2, #5
1000201e:	4310      	orrs	r0, r2
           | ((uint32_t)handler->config->periodic_year_intr << RTC_MSKSR_MPYE_Pos));
10002020:	799a      	ldrb	r2, [r3, #6]
10002022:	0192      	lsls	r2, r2, #6
{
  uint32_t regval;
  bool interrupt_configured = false;

  /* Enable periodic seconds, minutes, hours days, months and years interrupts */
  regval = (((uint32_t)handler->config->periodic_sec_intr << RTC_MSKSR_MPSE_Pos)
10002024:	4310      	orrs	r0, r2
           | ((uint32_t)handler->config->periodic_month_intr << RTC_MSKSR_MPMO_Pos)
           | ((uint32_t)handler->config->periodic_year_intr << RTC_MSKSR_MPYE_Pos));

  /* Enable RTC periodic interrupt in SCU when any of the periodic interrupts
   * are enabled */
  if (regval != 0U)
10002026:	d104      	bne.n	10002032 <RTC_lConfigureInterrupts+0x32>
#endif
    interrupt_configured = true;
  }


	if (handler->config->alarm_intr == RTC_INT_ALARM_ENABLE)
10002028:	79db      	ldrb	r3, [r3, #7]
 *  This function configures periodic and alarm interrupts
 */
bool RTC_lConfigureInterrupts(const RTC_t *const handler)
{
  uint32_t regval;
  bool interrupt_configured = false;
1000202a:	2000      	movs	r0, #0
#endif
    interrupt_configured = true;
  }


	if (handler->config->alarm_intr == RTC_INT_ALARM_ENABLE)
1000202c:	2b01      	cmp	r3, #1
1000202e:	d007      	beq.n	10002040 <RTC_lConfigureInterrupts+0x40>
		interrupt_configured = true;
	}


  return (interrupt_configured);
}
10002030:	bd10      	pop	{r4, pc}

  /* Enable RTC periodic interrupt in SCU when any of the periodic interrupts
   * are enabled */
  if (regval != 0U)
  {
    XMC_RTC_EnableEvent(regval);
10002032:	f7ff f8cf 	bl	100011d4 <XMC_RTC_EnableEvent>
10002036:	6863      	ldr	r3, [r4, #4]
		XMC_SCU_INTERRUPT_EnableNmiRequest((uint32_t)XMC_SCU_NMIREQ_RTC_PI);
#endif
#if ((UC_FAMILY == XMC4) && (RTC_TIMER_EVENT_TRIG_TO_SCU == 1))
		GLOBAL_SCU_XMC4_EnableEvent((GLOBAL_SCU_XMC4_EVENT_t)GLOBAL_SCU_XMC4_EVENT_RTC_PERIODIC);
#endif
    interrupt_configured = true;
10002038:	2001      	movs	r0, #1
  }


	if (handler->config->alarm_intr == RTC_INT_ALARM_ENABLE)
1000203a:	79db      	ldrb	r3, [r3, #7]
1000203c:	2b01      	cmp	r3, #1
1000203e:	d1f7      	bne.n	10002030 <RTC_lConfigureInterrupts+0x30>
	{
		XMC_RTC_EnableEvent((uint32_t)XMC_RTC_EVENT_ALARM);
10002040:	2080      	movs	r0, #128	; 0x80
10002042:	0040      	lsls	r0, r0, #1
10002044:	f7ff f8c6 	bl	100011d4 <XMC_RTC_EnableEvent>
#endif
#if ((UC_FAMILY == XMC4) && (RTC_ALARM_EVENT_TRIG_TO_SCU == 1))
		GLOBAL_SCU_XMC4_EnableEvent((GLOBAL_SCU_XMC4_EVENT_t)GLOBAL_SCU_XMC4_EVENT_RTC_ALARM);
#endif

		interrupt_configured = true;
10002048:	2001      	movs	r0, #1
1000204a:	e7f1      	b.n	10002030 <RTC_lConfigureInterrupts+0x30>

1000204c <RTC_lRegister_Callbacks>:

/*
 *  Interface to register the RTC call backs
 */
XMC_RTC_STATUS_t RTC_lRegister_Callbacks(const RTC_t *const handler)
{
1000204c:	b538      	push	{r3, r4, r5, lr}
1000204e:	1c04      	adds	r4, r0, #0
    {
      ai_status = (XMC_RTC_STATUS_t)GLOBAL_SCU_XMC4_RegisterCallback(
      		(GLOBAL_SCU_XMC4_EVENT_t)GLOBAL_SCU_XMC4_EVENT_RTC_ALARM,handler->config->ai_listener);
    }
  #else
    pi_status = (XMC_RTC_STATUS_t)GLOBAL_SCU_XMC1_RegisterCallback((GLOBAL_SCU_XMC1_EVENT_t)GLOBAL_SCU_XMC1_EVENT_RTC_PERIODIC,
10002050:	6843      	ldr	r3, [r0, #4]
10002052:	2002      	movs	r0, #2
10002054:	6899      	ldr	r1, [r3, #8]
10002056:	f000 f8d7 	bl	10002208 <GLOBAL_SCU_XMC1_RegisterCallback>
                                                                   handler->config->pi_listener);

    if (handler->config->alarm_intr == RTC_INT_ALARM_ENABLE)
1000205a:	6863      	ldr	r3, [r4, #4]
    {
      ai_status = (XMC_RTC_STATUS_t)GLOBAL_SCU_XMC4_RegisterCallback(
      		(GLOBAL_SCU_XMC4_EVENT_t)GLOBAL_SCU_XMC4_EVENT_RTC_ALARM,handler->config->ai_listener);
    }
  #else
    pi_status = (XMC_RTC_STATUS_t)GLOBAL_SCU_XMC1_RegisterCallback((GLOBAL_SCU_XMC1_EVENT_t)GLOBAL_SCU_XMC1_EVENT_RTC_PERIODIC,
1000205c:	1c05      	adds	r5, r0, #0
                                                                   handler->config->pi_listener);

    if (handler->config->alarm_intr == RTC_INT_ALARM_ENABLE)
1000205e:	79da      	ldrb	r2, [r3, #7]
10002060:	2000      	movs	r0, #0
10002062:	2a01      	cmp	r2, #1
10002064:	d000      	beq.n	10002068 <RTC_lRegister_Callbacks+0x1c>
    }
  #endif
#endif

  return (XMC_RTC_STATUS_t)((uint32_t)pi_status & (uint32_t)ai_status);
}
10002066:	bd38      	pop	{r3, r4, r5, pc}
    pi_status = (XMC_RTC_STATUS_t)GLOBAL_SCU_XMC1_RegisterCallback((GLOBAL_SCU_XMC1_EVENT_t)GLOBAL_SCU_XMC1_EVENT_RTC_PERIODIC,
                                                                   handler->config->pi_listener);

    if (handler->config->alarm_intr == RTC_INT_ALARM_ENABLE)
    {
      ai_status = (XMC_RTC_STATUS_t)GLOBAL_SCU_XMC1_RegisterCallback((GLOBAL_SCU_XMC1_EVENT_t)GLOBAL_SCU_XMC1_EVENT_RTC_ALARM,
10002068:	68d9      	ldr	r1, [r3, #12]
1000206a:	3004      	adds	r0, #4
1000206c:	f000 f8cc 	bl	10002208 <GLOBAL_SCU_XMC1_RegisterCallback>
10002070:	4028      	ands	r0, r5
10002072:	b2c0      	uxtb	r0, r0
10002074:	e7f7      	b.n	10002066 <RTC_lRegister_Callbacks+0x1a>
10002076:	46c0      	nop			; (mov r8, r8)

10002078 <RTC_Init>:
/*
  Initialization function for the APP. Configures the registers
  based on options selected in UI.
*/
RTC_STATUS_t RTC_Init(RTC_t *const handler)
{
10002078:	b538      	push	{r3, r4, r5, lr}
1000207a:	1c05      	adds	r5, r0, #0

#if (RTC_INTERRUPT_ENABLED == 1)
#if (UC_FAMILY == XMC4)
  rtc_initstatus = (RTC_STATUS_t)GLOBAL_SCU_XMC4_Init(GLOBAL_SCU_HANDLE);
#else
  rtc_initstatus = (RTC_STATUS_t)GLOBAL_SCU_XMC1_Init(GLOBAL_SCU_HANDLE);
1000207c:	4812      	ldr	r0, [pc, #72]	; (100020c8 <RTC_Init+0x50>)
1000207e:	f000 f869 	bl	10002154 <GLOBAL_SCU_XMC1_Init>
10002082:	1e04      	subs	r4, r0, #0
#endif
  if (rtc_initstatus == RTC_STATUS_SUCCESS)
10002084:	d102      	bne.n	1000208c <RTC_Init+0x14>
  {
#endif
      if (handler->initialized == false)
10002086:	7a2b      	ldrb	r3, [r5, #8]
10002088:	2b00      	cmp	r3, #0
1000208a:	d001      	beq.n	10002090 <RTC_Init+0x18>
#if (RTC_INTERRUPT_ENABLED == 1)
   } /* end of if(rtc_initstatus == GLOBAL_SCU_XMC4_STATUS_OK) */
#endif

  return (rtc_initstatus);
}
1000208c:	1c20      	adds	r0, r4, #0
1000208e:	bd38      	pop	{r3, r4, r5, pc}
  {
#endif
      if (handler->initialized == false)
      {
        /* Initialize the clock source and pre-scalar */
        status = XMC_RTC_Init(handler->time_alarm_config);
10002090:	6828      	ldr	r0, [r5, #0]
10002092:	f7ff f86f 	bl	10001174 <XMC_RTC_Init>

        if (status == XMC_RTC_STATUS_OK)
10002096:	2800      	cmp	r0, #0
10002098:	d001      	beq.n	1000209e <RTC_Init+0x26>
            rtc_initstatus = RTC_STATUS_SUCCESS;
          }
        }
        else
        {
          rtc_initstatus = RTC_STATUS_FAILURE;
1000209a:	2401      	movs	r4, #1
1000209c:	e7f6      	b.n	1000208c <RTC_Init+0x14>
        status = XMC_RTC_Init(handler->time_alarm_config);

        if (status == XMC_RTC_STATUS_OK)
        {
          /* Configure periodic, alarm and hibernate periodic interrupts */
          interrupt_configured = RTC_lConfigureInterrupts(handler);
1000209e:	1c28      	adds	r0, r5, #0
100020a0:	f7ff ffae 	bl	10002000 <RTC_lConfigureInterrupts>

          if (interrupt_configured == true)
100020a4:	2800      	cmp	r0, #0
100020a6:	d106      	bne.n	100020b6 <RTC_Init+0x3e>
          }

          if (status == XMC_RTC_STATUS_OK)
          {
          	/* Check RTC start during init is set or not in UI */
            if (handler->config->start == RTC_START_ENABLE)
100020a8:	686b      	ldr	r3, [r5, #4]
100020aa:	781b      	ldrb	r3, [r3, #0]
100020ac:	2b01      	cmp	r3, #1
100020ae:	d008      	beq.n	100020c2 <RTC_Init+0x4a>
            {
              RTC_Start();
            }
            handler->initialized = true;
100020b0:	2301      	movs	r3, #1
100020b2:	722b      	strb	r3, [r5, #8]
100020b4:	e7ea      	b.n	1000208c <RTC_Init+0x14>
          /* Configure periodic, alarm and hibernate periodic interrupts */
          interrupt_configured = RTC_lConfigureInterrupts(handler);

          if (interrupt_configured == true)
          {
            status = RTC_lRegister_Callbacks(handler);
100020b6:	1c28      	adds	r0, r5, #0
100020b8:	f7ff ffc8 	bl	1000204c <RTC_lRegister_Callbacks>
          }

          if (status == XMC_RTC_STATUS_OK)
100020bc:	2800      	cmp	r0, #0
100020be:	d1e5      	bne.n	1000208c <RTC_Init+0x14>
100020c0:	e7f2      	b.n	100020a8 <RTC_Init+0x30>
 * }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void RTC_Start(void)
{
	XMC_RTC_Start();
100020c2:	f7ff fa19 	bl	100014f8 <XMC_RTC_Start>
100020c6:	e7f3      	b.n	100020b0 <RTC_Init+0x38>
100020c8:	20000588 	.word	0x20000588

100020cc <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
100020cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    INTERRUPT_Enable(handler);
  }
#endif

#if(UC_FAMILY == XMC1)
  NVIC_SetPriority(handler->node, handler->priority);
100020ce:	7805      	ldrb	r5, [r0, #0]
100020d0:	7843      	ldrb	r3, [r0, #1]
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
100020d2:	b26a      	sxtb	r2, r5
100020d4:	2a00      	cmp	r2, #0
100020d6:	db20      	blt.n	1000211a <INTERRUPT_Init+0x4e>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100020d8:	0892      	lsrs	r2, r2, #2
100020da:	491c      	ldr	r1, [pc, #112]	; (1000214c <INTERRUPT_Init+0x80>)
100020dc:	2403      	movs	r4, #3
100020de:	0092      	lsls	r2, r2, #2
100020e0:	1851      	adds	r1, r2, r1
100020e2:	22ff      	movs	r2, #255	; 0xff
100020e4:	27c0      	movs	r7, #192	; 0xc0
100020e6:	402c      	ands	r4, r5
100020e8:	00e4      	lsls	r4, r4, #3
100020ea:	4694      	mov	ip, r2
100020ec:	40a2      	lsls	r2, r4
100020ee:	00bf      	lsls	r7, r7, #2
100020f0:	59ce      	ldr	r6, [r1, r7]
100020f2:	4396      	bics	r6, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
100020f4:	019a      	lsls	r2, r3, #6
100020f6:	4663      	mov	r3, ip
100020f8:	401a      	ands	r2, r3
100020fa:	1c13      	adds	r3, r2, #0
100020fc:	40a3      	lsls	r3, r4
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100020fe:	4333      	orrs	r3, r6
10002100:	51cb      	str	r3, [r1, r7]
#if (UC_SERIES == XMC14)
  XMC_SCU_SetInterruptControl((uint8_t)handler->node, (XMC_SCU_IRQCTRL_t)((handler->node << 8) | handler->irqctrl));
#endif

  /* Enable the interrupt if enable_at_init is enabled */
  if (handler->enable_at_init == true)
10002102:	7883      	ldrb	r3, [r0, #2]
10002104:	2b00      	cmp	r3, #0
10002106:	d006      	beq.n	10002116 <INTERRUPT_Init+0x4a>
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
10002108:	231f      	movs	r3, #31
1000210a:	401d      	ands	r5, r3
1000210c:	3b1e      	subs	r3, #30
1000210e:	40ab      	lsls	r3, r5
10002110:	1c1d      	adds	r5, r3, #0
10002112:	4b0e      	ldr	r3, [pc, #56]	; (1000214c <INTERRUPT_Init+0x80>)
10002114:	601d      	str	r5, [r3, #0]
    INTERRUPT_Enable(handler);
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
}
10002116:	2000      	movs	r0, #0
10002118:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000211a:	490d      	ldr	r1, [pc, #52]	; (10002150 <INTERRUPT_Init+0x84>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000211c:	27ff      	movs	r7, #255	; 0xff
1000211e:	468c      	mov	ip, r1
10002120:	220f      	movs	r2, #15
10002122:	2103      	movs	r1, #3
10002124:	b2ec      	uxtb	r4, r5
10002126:	4022      	ands	r2, r4
10002128:	4021      	ands	r1, r4
1000212a:	1c3c      	adds	r4, r7, #0
1000212c:	00c9      	lsls	r1, r1, #3
1000212e:	408c      	lsls	r4, r1
10002130:	3a08      	subs	r2, #8
10002132:	0892      	lsrs	r2, r2, #2
10002134:	0092      	lsls	r2, r2, #2
10002136:	4462      	add	r2, ip
10002138:	69d6      	ldr	r6, [r2, #28]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1000213a:	019b      	lsls	r3, r3, #6
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000213c:	43a6      	bics	r6, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1000213e:	403b      	ands	r3, r7
10002140:	408b      	lsls	r3, r1
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002142:	1c31      	adds	r1, r6, #0
10002144:	4319      	orrs	r1, r3
10002146:	61d1      	str	r1, [r2, #28]
10002148:	e7db      	b.n	10002102 <INTERRUPT_Init+0x36>
1000214a:	46c0      	nop			; (mov r8, r8)
1000214c:	e000e100 	.word	0xe000e100
10002150:	e000ed00 	.word	0xe000ed00

10002154 <GLOBAL_SCU_XMC1_Init>:

/*  Function to configure SCU Interrupts based on  user configuration.
 * 
 */
GLOBAL_SCU_XMC1_STATUS_t GLOBAL_SCU_XMC1_Init(GLOBAL_SCU_XMC1_t*const handle)
{
10002154:	b5f0      	push	{r4, r5, r6, r7, lr}
10002156:	4647      	mov	r7, r8
10002158:	b480      	push	{r7}
  GLOBAL_SCU_XMC1_STATUS_t initstatus;

  XMC_ASSERT("GLOBAL_SCU_XMC1_Init: NULL handle", (handle != NULL));

  if (handle->initialized == false)
1000215a:	7903      	ldrb	r3, [r0, #4]
	handle->initialized = true;
    initstatus = GLOBAL_SCU_XMC1_STATUS_SUCCESS;
  }
  else
  {
    initstatus = GLOBAL_SCU_XMC1_STATUS_FAILURE;
1000215c:	2601      	movs	r6, #1
{
  GLOBAL_SCU_XMC1_STATUS_t initstatus;

  XMC_ASSERT("GLOBAL_SCU_XMC1_Init: NULL handle", (handle != NULL));

  if (handle->initialized == false)
1000215e:	2b00      	cmp	r3, #0
10002160:	d003      	beq.n	1000216a <GLOBAL_SCU_XMC1_Init+0x16>
  {
    initstatus = GLOBAL_SCU_XMC1_STATUS_FAILURE;
  }
  	
  return (initstatus);
}
10002162:	1c30      	adds	r0, r6, #0
10002164:	bc04      	pop	{r2}
10002166:	4690      	mov	r8, r2
10002168:	bdf0      	pop	{r4, r5, r6, r7, pc}
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000216a:	25c0      	movs	r5, #192	; 0xc0

  XMC_ASSERT("GLOBAL_SCU_XMC1_Init: NULL handle", (handle != NULL));

  if (handle->initialized == false)
  {
    NVIC_SetPriority((IRQn_Type)0U,(uint32_t)handle->config->priority[0]);
1000216c:	6804      	ldr	r4, [r0, #0]
1000216e:	491a      	ldr	r1, [pc, #104]	; (100021d8 <GLOBAL_SCU_XMC1_Init+0x84>)
10002170:	00ad      	lsls	r5, r5, #2
10002172:	7822      	ldrb	r2, [r4, #0]
10002174:	594f      	ldr	r7, [r1, r5]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10002176:	33ff      	adds	r3, #255	; 0xff
10002178:	0192      	lsls	r2, r2, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000217a:	439f      	bics	r7, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1000217c:	401a      	ands	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000217e:	433a      	orrs	r2, r7
10002180:	514a      	str	r2, [r1, r5]
10002182:	594a      	ldr	r2, [r1, r5]
10002184:	4f15      	ldr	r7, [pc, #84]	; (100021dc <GLOBAL_SCU_XMC1_Init+0x88>)
10002186:	4694      	mov	ip, r2
  	NVIC_SetPriority((IRQn_Type)1U,(uint32_t)handle->config->priority[1]);
10002188:	7862      	ldrb	r2, [r4, #1]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1000218a:	0192      	lsls	r2, r2, #6
1000218c:	401a      	ands	r2, r3
1000218e:	0212      	lsls	r2, r2, #8
10002190:	4690      	mov	r8, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002192:	4662      	mov	r2, ip
10002194:	4017      	ands	r7, r2
10002196:	4642      	mov	r2, r8
10002198:	433a      	orrs	r2, r7
1000219a:	514a      	str	r2, [r1, r5]
  	NVIC_SetPriority((IRQn_Type)2U,(uint32_t)handle->config->priority[2]);
1000219c:	78a2      	ldrb	r2, [r4, #2]
1000219e:	594f      	ldr	r7, [r1, r5]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
100021a0:	0192      	lsls	r2, r2, #6
100021a2:	4013      	ands	r3, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100021a4:	4a0e      	ldr	r2, [pc, #56]	; (100021e0 <GLOBAL_SCU_XMC1_Init+0x8c>)
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
100021a6:	041b      	lsls	r3, r3, #16
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100021a8:	403a      	ands	r2, r7
100021aa:	4313      	orrs	r3, r2
100021ac:	514b      	str	r3, [r1, r5]

  	/* enable the IRQ0 */
  	if (handle->config->enable_at_init[0] == true)
100021ae:	78e3      	ldrb	r3, [r4, #3]
100021b0:	2b00      	cmp	r3, #0
100021b2:	d000      	beq.n	100021b6 <GLOBAL_SCU_XMC1_Init+0x62>
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
100021b4:	600e      	str	r6, [r1, #0]
  	  XMC_SCU_SetInterruptControl(0, XMC_SCU_IRQCTRL_SCU_SR0_IRQ0);
#endif
  	  NVIC_EnableIRQ((IRQn_Type)0U);
  	}
  	/* enable the IRQ1 */
  	if (handle->config->enable_at_init[1] == true)
100021b6:	7923      	ldrb	r3, [r4, #4]
100021b8:	2b00      	cmp	r3, #0
100021ba:	d002      	beq.n	100021c2 <GLOBAL_SCU_XMC1_Init+0x6e>
100021bc:	2202      	movs	r2, #2
100021be:	4b06      	ldr	r3, [pc, #24]	; (100021d8 <GLOBAL_SCU_XMC1_Init+0x84>)
100021c0:	601a      	str	r2, [r3, #0]
  	  XMC_SCU_SetInterruptControl(1, XMC_SCU_IRQCTRL_SCU_SR1_IRQ1);
#endif
  	  NVIC_EnableIRQ((IRQn_Type)1U);
  	}
  	/* enable the IRQ2 */
  	if (handle->config->enable_at_init[2] == true)
100021c2:	7963      	ldrb	r3, [r4, #5]
100021c4:	2b00      	cmp	r3, #0
100021c6:	d002      	beq.n	100021ce <GLOBAL_SCU_XMC1_Init+0x7a>
100021c8:	2204      	movs	r2, #4
100021ca:	4b03      	ldr	r3, [pc, #12]	; (100021d8 <GLOBAL_SCU_XMC1_Init+0x84>)
100021cc:	601a      	str	r2, [r3, #0]
#if (UC_SERIES == XMC14)
  	  XMC_SCU_SetInterruptControl(2, XMC_SCU_IRQCTRL_SCU_SR2_IRQ2);
#endif
      NVIC_EnableIRQ((IRQn_Type)2U);
  	}
	handle->initialized = true;
100021ce:	2301      	movs	r3, #1
    initstatus = GLOBAL_SCU_XMC1_STATUS_SUCCESS;
100021d0:	2600      	movs	r6, #0
#if (UC_SERIES == XMC14)
  	  XMC_SCU_SetInterruptControl(2, XMC_SCU_IRQCTRL_SCU_SR2_IRQ2);
#endif
      NVIC_EnableIRQ((IRQn_Type)2U);
  	}
	handle->initialized = true;
100021d2:	7103      	strb	r3, [r0, #4]
100021d4:	e7c5      	b.n	10002162 <GLOBAL_SCU_XMC1_Init+0xe>
100021d6:	46c0      	nop			; (mov r8, r8)
100021d8:	e000e100 	.word	0xe000e100
100021dc:	ffff00ff 	.word	0xffff00ff
100021e0:	ff00ffff 	.word	0xff00ffff

100021e4 <SCU_0_IRQHandler>:
#if (UC_SERIES != XMC14)
/*
 * @brief  SCU_0 Interrupt Handler
 */
void SCU_0_IRQHandler(void)
{
100021e4:	b508      	push	{r3, lr}
  XMC_SCU_IRQHandler(0U);
100021e6:	2000      	movs	r0, #0
100021e8:	f7ff f8dc 	bl	100013a4 <XMC_SCU_IRQHandler>
}
100021ec:	bd08      	pop	{r3, pc}
100021ee:	46c0      	nop			; (mov r8, r8)

100021f0 <SCU_1_IRQHandler>:

/*  SCU_1 Interrupt Handler.
 * 
 */
void SCU_1_IRQHandler(void)
{
100021f0:	b508      	push	{r3, lr}
  XMC_SCU_IRQHandler(1U);
100021f2:	2001      	movs	r0, #1
100021f4:	f7ff f8d6 	bl	100013a4 <XMC_SCU_IRQHandler>
}
100021f8:	bd08      	pop	{r3, pc}
100021fa:	46c0      	nop			; (mov r8, r8)

100021fc <SCU_2_IRQHandler>:

/*  SCU2 Interrupt Handler.
 *
 */
void SCU_2_IRQHandler(void)
{
100021fc:	b508      	push	{r3, lr}
  XMC_SCU_IRQHandler(2U);
100021fe:	2002      	movs	r0, #2
10002200:	f7ff f8d0 	bl	100013a4 <XMC_SCU_IRQHandler>
}
10002204:	bd08      	pop	{r3, pc}
10002206:	46c0      	nop			; (mov r8, r8)

10002208 <GLOBAL_SCU_XMC1_RegisterCallback>:
/*
 * @brief  Function to register callback event
 */
GLOBAL_SCU_XMC1_STATUS_t GLOBAL_SCU_XMC1_RegisterCallback(const GLOBAL_SCU_XMC1_EVENT_t event,
                                                          const GLOBAL_SCU_XMC1_EVENT_HANDLER_t handler)
{
10002208:	b508      	push	{r3, lr}
  GLOBAL_SCU_XMC1_STATUS_t status;

  XMC_ASSERT("GLOBAL_SCU_XMC1_RegisterCallback: Invalid event", (GLOBAL_SCU_XMC1_CHECK_EVENT(event)));
  XMC_ASSERT("GLOBAL_SCU_XMC1_RegisterCallback: NULL Handle", (handler != NULL));
  
  status = (GLOBAL_SCU_XMC1_STATUS_t)XMC_SCU_INTERRUPT_SetEventHandler(event, handler);
1000220a:	f7ff f8af 	bl	1000136c <XMC_SCU_INTERRUPT_SetEventHandler>

  return (status);
}
1000220e:	bd08      	pop	{r3, pc}

10002210 <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
10002210:	b510      	push	{r4, lr}
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
10002212:	7b43      	ldrb	r3, [r0, #13]
10002214:	2b00      	cmp	r3, #0
10002216:	d10c      	bne.n	10002232 <GLOBAL_CCU4_Init+0x22>
10002218:	1c04      	adds	r4, r0, #0
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
1000221a:	7b01      	ldrb	r1, [r0, #12]
1000221c:	6880      	ldr	r0, [r0, #8]
1000221e:	f7ff f8e9 	bl	100013f4 <XMC_CCU4_Init>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
10002222:	2180      	movs	r1, #128	; 0x80
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
10002224:	68a2      	ldr	r2, [r4, #8]
10002226:	0049      	lsls	r1, r1, #1
10002228:	68d3      	ldr	r3, [r2, #12]
1000222a:	430b      	orrs	r3, r1
1000222c:	60d3      	str	r3, [r2, #12]
    /* Restricts multiple initializations */
    handle->is_initialized = true;
1000222e:	2301      	movs	r3, #1
10002230:	7363      	strb	r3, [r4, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
}
10002232:	2000      	movs	r0, #0
10002234:	bd10      	pop	{r4, pc}
10002236:	46c0      	nop			; (mov r8, r8)

10002238 <GLOBAL_ADC_Init>:
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/**
 * This function initializes all instances of the ADC Global APP and low level app.
 */
GLOBAL_ADC_STATUS_t GLOBAL_ADC_Init(GLOBAL_ADC_t *const handle_ptr)
{
10002238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000223a:	464f      	mov	r7, r9
1000223c:	4646      	mov	r6, r8
1000223e:	b4c0      	push	{r6, r7}
  XMC_ASSERT("GLOBAL_ADC_Init:Invalid handle_ptr", (handle_ptr != NULL))
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  uint32_t group_index;
#endif

  if (GLOBAL_ADC_UNINITIALIZED == handle_ptr->init_state)
10002240:	7d03      	ldrb	r3, [r0, #20]
10002242:	2b02      	cmp	r3, #2
10002244:	d004      	beq.n	10002250 <GLOBAL_ADC_Init+0x18>
    	XMC_VADC_GLOBAL_StartupCalibration(handle_ptr->module_ptr);
    }
    handle_ptr->init_state = GLOBAL_ADC_SUCCESS;
  }
  return (handle_ptr->init_state);
}
10002246:	1c18      	adds	r0, r3, #0
10002248:	bc0c      	pop	{r2, r3}
1000224a:	4690      	mov	r8, r2
1000224c:	4699      	mov	r9, r3
1000224e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10002250:	1c04      	adds	r4, r0, #0
#endif

  if (GLOBAL_ADC_UNINITIALIZED == handle_ptr->init_state)
  {  
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);
10002252:	68c0      	ldr	r0, [r0, #12]
10002254:	68a1      	ldr	r1, [r4, #8]
10002256:	f7ff fab9 	bl	100017cc <XMC_VADC_GLOBAL_Init>

__STATIC_INLINE void XMC_VADC_GLOBAL_DisablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, uint32_t group_number)
{
  XMC_ASSERT("XMC_VADC_GLOBAL_DisablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_number));
1000225a:	2380      	movs	r3, #128	; 0x80
1000225c:	4698      	mov	r8, r3
1000225e:	3b7f      	subs	r3, #127	; 0x7f
10002260:	1c25      	adds	r5, r4, #0

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
10002262:	2600      	movs	r6, #0
10002264:	4699      	mov	r9, r3

#if(XMC_VADC_SHS_AVAILABLE == 1U)
      XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(handle_ptr->global_shs_ptr, (XMC_VADC_GROUP_INDEX_t)group_index);
#endif

      handle_ptr->group_ptrs_array[group_index]->state = GLOBAL_ADC_SUCCESS;
10002266:	2700      	movs	r7, #0
    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
10002268:	682b      	ldr	r3, [r5, #0]
1000226a:	cb03      	ldmia	r3!, {r0, r1}
1000226c:	f7ff fb14 	bl	10001898 <XMC_VADC_GROUP_Init>
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);

      /* Switch on the converter of the Group[group_index]*/
      XMC_VADC_GROUP_SetPowerMode(handle_ptr->group_ptrs_array[group_index]->group_handle,
10002270:	682b      	ldr	r3, [r5, #0]
10002272:	2103      	movs	r1, #3
10002274:	6818      	ldr	r0, [r3, #0]
10002276:	f7ff fb79 	bl	1000196c <XMC_VADC_GROUP_SetPowerMode>
                                  XMC_VADC_GROUP_POWERMODE_NORMAL);

      /* Disable the post calibration option for the respective group*/
      if ((bool)false == handle_ptr->group_ptrs_array[group_index]->post_calibration)
1000227a:	682b      	ldr	r3, [r5, #0]
1000227c:	7a1b      	ldrb	r3, [r3, #8]
1000227e:	2b00      	cmp	r3, #0
10002280:	d10a      	bne.n	10002298 <GLOBAL_ADC_Init+0x60>
10002282:	4643      	mov	r3, r8
      {
        XMC_VADC_GLOBAL_DisablePostCalibration(handle_ptr->module_ptr,group_index);
10002284:	68e1      	ldr	r1, [r4, #12]
10002286:	4648      	mov	r0, r9
10002288:	58ca      	ldr	r2, [r1, r3]
1000228a:	1c33      	adds	r3, r6, #0
1000228c:	3310      	adds	r3, #16
1000228e:	4098      	lsls	r0, r3
10002290:	1c03      	adds	r3, r0, #0
10002292:	4313      	orrs	r3, r2
10002294:	4642      	mov	r2, r8
10002296:	508b      	str	r3, [r1, r2]
      }

#if(XMC_VADC_SHS_AVAILABLE == 1U)
      XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(handle_ptr->global_shs_ptr, (XMC_VADC_GROUP_INDEX_t)group_index);
10002298:	b2f1      	uxtb	r1, r6
1000229a:	6920      	ldr	r0, [r4, #16]
1000229c:	f7ff fb6e 	bl	1000197c <XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode>
#endif

      handle_ptr->group_ptrs_array[group_index]->state = GLOBAL_ADC_SUCCESS;
100022a0:	cd08      	ldmia	r5!, {r3}
100022a2:	725f      	strb	r7, [r3, #9]
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
100022a4:	2e01      	cmp	r6, #1
100022a6:	d105      	bne.n	100022b4 <GLOBAL_ADC_Init+0x7c>
#endif

      handle_ptr->group_ptrs_array[group_index]->state = GLOBAL_ADC_SUCCESS;
    }
#endif /* _XMC_VADC_GROUP_AVAILABLE_ */
    if((bool)true == handle_ptr->enable_startup_calibration)
100022a8:	7d63      	ldrb	r3, [r4, #21]
100022aa:	2b00      	cmp	r3, #0
100022ac:	d104      	bne.n	100022b8 <GLOBAL_ADC_Init+0x80>
    {
    	XMC_VADC_GLOBAL_StartupCalibration(handle_ptr->module_ptr);
    }
    handle_ptr->init_state = GLOBAL_ADC_SUCCESS;
100022ae:	2300      	movs	r3, #0
100022b0:	7523      	strb	r3, [r4, #20]
100022b2:	e7c8      	b.n	10002246 <GLOBAL_ADC_Init+0xe>
100022b4:	2601      	movs	r6, #1
100022b6:	e7d7      	b.n	10002268 <GLOBAL_ADC_Init+0x30>
      handle_ptr->group_ptrs_array[group_index]->state = GLOBAL_ADC_SUCCESS;
    }
#endif /* _XMC_VADC_GROUP_AVAILABLE_ */
    if((bool)true == handle_ptr->enable_startup_calibration)
    {
    	XMC_VADC_GLOBAL_StartupCalibration(handle_ptr->module_ptr);
100022b8:	68e0      	ldr	r0, [r4, #12]
100022ba:	f7ff fabb 	bl	10001834 <XMC_VADC_GLOBAL_StartupCalibration>
100022be:	e7f6      	b.n	100022ae <GLOBAL_ADC_Init+0x76>

100022c0 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
100022c0:	b510      	push	{r4, lr}
100022c2:	1c04      	adds	r4, r0, #0
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
100022c4:	7b01      	ldrb	r1, [r0, #12]
100022c6:	1d02      	adds	r2, r0, #4
100022c8:	6800      	ldr	r0, [r0, #0]
100022ca:	f7fe ff15 	bl	100010f8 <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
100022ce:	6820      	ldr	r0, [r4, #0]
100022d0:	7b21      	ldrb	r1, [r4, #12]
100022d2:	7b62      	ldrb	r2, [r4, #13]
100022d4:	f7ff f8e4 	bl	100014a0 <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
}
100022d8:	2000      	movs	r0, #0
100022da:	bd10      	pop	{r4, pc}

100022dc <SystemCoreSetup>:
};
 
void SystemCoreSetup(void)
{

}
100022dc:	4770      	bx	lr
100022de:	46c0      	nop			; (mov r8, r8)

100022e0 <CLOCK_XMC1_Init>:
  CLOCK_XMC1_STATUS_t status = CLOCK_XMC1_STATUS_SUCCESS;
  CLOCK_XMC1_STATUS_t loci_event_status = CLOCK_XMC1_STATUS_SUCCESS;
  CLOCK_XMC1_STATUS_t stdbyclkfail_status = CLOCK_XMC1_STATUS_SUCCESS;
  CLOCK_XMC1_STATUS_t loss_ext_clock_event_status = CLOCK_XMC1_STATUS_SUCCESS;
  CLOCK_XMC1_STATUS_t dco1_out_sync_status = CLOCK_XMC1_STATUS_SUCCESS;
  if (handle->init_status == false)
100022e0:	7803      	ldrb	r3, [r0, #0]
100022e2:	2b00      	cmp	r3, #0
100022e4:	d101      	bne.n	100022ea <CLOCK_XMC1_Init+0xa>
#endif
    status = (CLOCK_XMC1_STATUS_t)(((uint32_t)loci_event_status) | ((uint32_t)stdbyclkfail_status) |
    		                       ((uint32_t)loss_ext_clock_event_status) | ((uint32_t)dco1_out_sync_status));
    if (CLOCK_XMC1_STATUS_SUCCESS == status)
    {
      handle->init_status = true;
100022e6:	3301      	adds	r3, #1
100022e8:	7003      	strb	r3, [r0, #0]
    }
  }
  return (status);
}
100022ea:	2000      	movs	r0, #0
100022ec:	4770      	bx	lr
100022ee:	46c0      	nop			; (mov r8, r8)

100022f0 <SystemCoreClockSetup>:

/**********************************************************************************************************************
* API IMPLEMENTATION
**********************************************************************************************************************/
void SystemCoreClockSetup(void)
{
100022f0:	b530      	push	{r4, r5, lr}
100022f2:	b085      	sub	sp, #20
/* LOCAL DATA STRUCTURES */
const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC1_0_CONFIG =
100022f4:	a801      	add	r0, sp, #4
100022f6:	1c02      	adds	r2, r0, #0
100022f8:	4b03      	ldr	r3, [pc, #12]	; (10002308 <SystemCoreClockSetup+0x18>)
100022fa:	cb32      	ldmia	r3!, {r1, r4, r5}
100022fc:	c232      	stmia	r2!, {r1, r4, r5}
  .idiv = 1U,  /**< 8 Bit integer divider */

};

  /* Configure FDIV, IDIV, PCLKSEL dividers*/
  XMC_SCU_CLOCK_Init(&CLOCK_XMC1_0_CONFIG);
100022fe:	f7ff f80f 	bl	10001320 <XMC_SCU_CLOCK_Init>
}
10002302:	b005      	add	sp, #20
10002304:	bd30      	pop	{r4, r5, pc}
10002306:	46c0      	nop			; (mov r8, r8)
10002308:	10004564 	.word	0x10004564

1000230c <ADC_MEASUREMENT_Init>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialization routine to call ADC LLD API's */
ADC_MEASUREMENT_STATUS_t ADC_MEASUREMENT_Init(ADC_MEASUREMENT_t *const handle_ptr)
{
1000230c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000230e:	464f      	mov	r7, r9
10002310:	4646      	mov	r6, r8
10002312:	b4c0      	push	{r6, r7}
  uint8_t j;
  ADC_MEASUREMENT_STATUS_t status;

  XMC_ASSERT("ADC_MEASUREMENT_Init:Invalid handle_ptr", (handle_ptr != NULL))

  if (ADC_MEASUREMENT_STATUS_UNINITIALIZED == handle_ptr->init_state)
10002314:	7e03      	ldrb	r3, [r0, #24]
10002316:	2b02      	cmp	r3, #2
10002318:	d004      	beq.n	10002324 <ADC_MEASUREMENT_Init+0x18>
      XMC_VADC_GLOBAL_BackgroundTriggerConversion(handle_ptr->global_handle->module_ptr);
    }
    handle_ptr->init_state = status;
  }
  return (handle_ptr->init_state);
}
1000231a:	1c18      	adds	r0, r3, #0
1000231c:	bc0c      	pop	{r2, r3}
1000231e:	4690      	mov	r8, r2
10002320:	4699      	mov	r9, r3
10002322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10002324:	1c04      	adds	r4, r0, #0
  XMC_ASSERT("ADC_MEASUREMENT_Init:Invalid handle_ptr", (handle_ptr != NULL))

  if (ADC_MEASUREMENT_STATUS_UNINITIALIZED == handle_ptr->init_state)
  {
    /* Call the function to initialise Clock and ADC global functional units*/
    status = (ADC_MEASUREMENT_STATUS_t) GLOBAL_ADC_Init(handle_ptr->global_handle);
10002326:	68c0      	ldr	r0, [r0, #12]
10002328:	f7ff ff86 	bl	10002238 <GLOBAL_ADC_Init>
  
    /*Initialize the Global Conversion class 0*/
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
1000232c:	68e3      	ldr	r3, [r4, #12]
  XMC_ASSERT("ADC_MEASUREMENT_Init:Invalid handle_ptr", (handle_ptr != NULL))

  if (ADC_MEASUREMENT_STATUS_UNINITIALIZED == handle_ptr->init_state)
  {
    /* Call the function to initialise Clock and ADC global functional units*/
    status = (ADC_MEASUREMENT_STATUS_t) GLOBAL_ADC_Init(handle_ptr->global_handle);
1000232e:	1c05      	adds	r5, r0, #0
  
    /*Initialize the Global Conversion class 0*/
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
10002330:	68d8      	ldr	r0, [r3, #12]
10002332:	68a3      	ldr	r3, [r4, #8]
10002334:	2200      	movs	r2, #0
10002336:	6819      	ldr	r1, [r3, #0]
10002338:	2300      	movs	r3, #0
1000233a:	f7ff fa69 	bl	10001810 <XMC_VADC_GLOBAL_InputClassInit>
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
    		                              XMC_VADC_GROUP_CONV_STD,ADC_MEASUREMENT_ICLASS_NUM_XMC11);
#endif
  
    /* Initialize the Background Scan hardware */
    XMC_VADC_GLOBAL_BackgroundInit(handle_ptr->global_handle->module_ptr, handle_ptr->backgnd_config_handle);
1000233e:	68e3      	ldr	r3, [r4, #12]
10002340:	6861      	ldr	r1, [r4, #4]
10002342:	68d8      	ldr	r0, [r3, #12]
10002344:	f7ff fb2a 	bl	1000199c <XMC_VADC_GLOBAL_BackgroundInit>
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Group Number",((grp_num) < XMC_VADC_MAXIMUM_NUM_GROUPS))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Channel Number",
             ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))

  global_ptr->BRSSEL[grp_num] |= (uint32_t)((uint32_t)1 << ch_num);
10002348:	23c0      	movs	r3, #192	; 0xc0
1000234a:	005b      	lsls	r3, r3, #1
1000234c:	4698      	mov	r8, r3
1000234e:	3b80      	subs	r3, #128	; 0x80
10002350:	3bff      	subs	r3, #255	; 0xff
10002352:	2700      	movs	r7, #0
10002354:	4699      	mov	r9, r3
    XMC_VADC_GLOBAL_ResultInit(handle_ptr->global_handle->module_ptr,handle_ptr->array->res_handle);
#endif

    for (j = (uint8_t)0; j < (uint8_t)ADC_MEASUREMENT_MAXCHANNELS; j++)
    {
      indexed = handle_ptr->array->channel_array[j];
10002356:	6822      	ldr	r2, [r4, #0]
10002358:	00bb      	lsls	r3, r7, #2
1000235a:	589e      	ldr	r6, [r3, r2]
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(indexed->group_handle,(uint32_t)indexed->ch_num, indexed->ch_handle);
1000235c:	7b71      	ldrb	r1, [r6, #13]
1000235e:	68b0      	ldr	r0, [r6, #8]
10002360:	6832      	ldr	r2, [r6, #0]
10002362:	f7ff fb75 	bl	10001a50 <XMC_VADC_GROUP_ChannelInit>
__STATIC_INLINE void XMC_VADC_GROUP_ResultInit(XMC_VADC_GROUP_t *const group_ptr,
                                               const uint32_t res_reg_num,
                                               const XMC_VADC_RESULT_CONFIG_t *config)
{
  XMC_ASSERT("XMC_VADC_GROUP_ResultInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->RCR[res_reg_num] = config->g_rcr;
10002366:	21a0      	movs	r1, #160	; 0xa0
10002368:	0089      	lsls	r1, r1, #2
1000236a:	468c      	mov	ip, r1
  
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
1000236c:	6833      	ldr	r3, [r6, #0]
1000236e:	6872      	ldr	r2, [r6, #4]
10002370:	789b      	ldrb	r3, [r3, #2]
10002372:	68b1      	ldr	r1, [r6, #8]
10002374:	071b      	lsls	r3, r3, #28
10002376:	6812      	ldr	r2, [r2, #0]
10002378:	0e9b      	lsrs	r3, r3, #26
1000237a:	4463      	add	r3, ip
1000237c:	505a      	str	r2, [r3, r1]
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Group Number",((grp_num) < XMC_VADC_MAXIMUM_NUM_GROUPS))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Channel Number",
             ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))

  global_ptr->BRSSEL[grp_num] |= (uint32_t)((uint32_t)1 << ch_num);
1000237e:	4642      	mov	r2, r8
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
10002380:	68e3      	ldr	r3, [r4, #12]
10002382:	68d8      	ldr	r0, [r3, #12]
10002384:	7b33      	ldrb	r3, [r6, #12]
10002386:	009b      	lsls	r3, r3, #2
10002388:	18c3      	adds	r3, r0, r3
1000238a:	5899      	ldr	r1, [r3, r2]
1000238c:	7b72      	ldrb	r2, [r6, #13]
1000238e:	464e      	mov	r6, r9
10002390:	4096      	lsls	r6, r2
10002392:	1c32      	adds	r2, r6, #0
10002394:	430a      	orrs	r2, r1
10002396:	4641      	mov	r1, r8
10002398:	505a      	str	r2, [r3, r1]
#if (XMC_VADC_GROUP_AVAILABLE == 0U)
    /* Initialize the global result register */
    XMC_VADC_GLOBAL_ResultInit(handle_ptr->global_handle->module_ptr,handle_ptr->array->res_handle);
#endif

    for (j = (uint8_t)0; j < (uint8_t)ADC_MEASUREMENT_MAXCHANNELS; j++)
1000239a:	2f01      	cmp	r7, #1
1000239c:	d144      	bne.n	10002428 <ADC_MEASUREMENT_Init+0x11c>
        status |= (ADC_MEASUREMENT_STATUS_t) ANALOG_IO_Init(indexed->analog_io_config);
      }
#endif
    }
#if(UC_SERIES != XMC11)
    if ((handle_ptr->backgnd_config_handle->req_src_interrupt) && (handle_ptr->req_src_intr_handle != NULL ))
1000239e:	6863      	ldr	r3, [r4, #4]
100023a0:	7a1b      	ldrb	r3, [r3, #8]
100023a2:	071b      	lsls	r3, r3, #28
100023a4:	d52d      	bpl.n	10002402 <ADC_MEASUREMENT_Init+0xf6>
100023a6:	6923      	ldr	r3, [r4, #16]
100023a8:	2b00      	cmp	r3, #0
100023aa:	d02a      	beq.n	10002402 <ADC_MEASUREMENT_Init+0xf6>
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
100023ac:	681a      	ldr	r2, [r3, #0]
100023ae:	685b      	ldr	r3, [r3, #4]
100023b0:	b2d6      	uxtb	r6, r2
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
100023b2:	b271      	sxtb	r1, r6
100023b4:	4699      	mov	r9, r3
100023b6:	2900      	cmp	r1, #0
100023b8:	db38      	blt.n	1000242c <ADC_MEASUREMENT_Init+0x120>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100023ba:	2603      	movs	r6, #3
100023bc:	4b27      	ldr	r3, [pc, #156]	; (1000245c <ADC_MEASUREMENT_Init+0x150>)
100023be:	0889      	lsrs	r1, r1, #2
100023c0:	0089      	lsls	r1, r1, #2
100023c2:	18cf      	adds	r7, r1, r3
100023c4:	4032      	ands	r2, r6
100023c6:	23c0      	movs	r3, #192	; 0xc0
100023c8:	00d6      	lsls	r6, r2, #3
100023ca:	22ff      	movs	r2, #255	; 0xff
100023cc:	009b      	lsls	r3, r3, #2
100023ce:	58f9      	ldr	r1, [r7, r3]
100023d0:	469c      	mov	ip, r3
100023d2:	1c13      	adds	r3, r2, #0
100023d4:	40b3      	lsls	r3, r6
100023d6:	4399      	bics	r1, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
100023d8:	464b      	mov	r3, r9
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100023da:	4688      	mov	r8, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
100023dc:	0199      	lsls	r1, r3, #6
100023de:	400a      	ands	r2, r1
100023e0:	40b2      	lsls	r2, r6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100023e2:	4643      	mov	r3, r8
100023e4:	4313      	orrs	r3, r2
100023e6:	4662      	mov	r2, ip
100023e8:	50bb      	str	r3, [r7, r2]
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
#endif
      /* Connect background Request Source Event to NVIC node */
      XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(handle_ptr->global_handle->module_ptr,
100023ea:	7e61      	ldrb	r1, [r4, #25]
100023ec:	f7ff fa46 	bl	1000187c <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode>
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
100023f0:	221f      	movs	r2, #31
    		                                         (XMC_VADC_SR_t) handle_ptr->srv_req_node);
    
      /* Enable Background Scan Request source IRQ */
      NVIC_EnableIRQ((IRQn_Type)handle_ptr->req_src_intr_handle->node_id);
100023f2:	6923      	ldr	r3, [r4, #16]
100023f4:	681b      	ldr	r3, [r3, #0]
100023f6:	4013      	ands	r3, r2
100023f8:	3a1e      	subs	r2, #30
100023fa:	409a      	lsls	r2, r3
100023fc:	1c13      	adds	r3, r2, #0
100023fe:	4a17      	ldr	r2, [pc, #92]	; (1000245c <ADC_MEASUREMENT_Init+0x150>)
10002400:	6013      	str	r3, [r2, #0]
    /* Enable Background Scan Request source IRQ */
    NVIC_EnableIRQ((IRQn_Type)handle_ptr->result_intr_handle->node_id);
#endif
#endif
    /* Mux Configuration is done*/
    if (handle_ptr->mux_config != NULL)
10002402:	6963      	ldr	r3, [r4, #20]
10002404:	2b00      	cmp	r3, #0
10002406:	d000      	beq.n	1000240a <ADC_MEASUREMENT_Init+0xfe>
    {
    	(handle_ptr->mux_config)();
10002408:	4798      	blx	r3
    }
  
    if (handle_ptr->start_conversion != (bool)false)
1000240a:	7ea3      	ldrb	r3, [r4, #26]
1000240c:	2b00      	cmp	r3, #0
1000240e:	d008      	beq.n	10002422 <ADC_MEASUREMENT_Init+0x116>
 *  None.
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerConversion(XMC_VADC_GLOBAL_t *const global_ptr)
{
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerConversion:Wrong Module Pointer", (global_ptr == VADC))
  global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_LDEV_Msk;
10002410:	2281      	movs	r2, #129	; 0x81
10002412:	2080      	movs	r0, #128	; 0x80
    {
      /* Start conversion manually using load event trigger*/
      XMC_VADC_GLOBAL_BackgroundTriggerConversion(handle_ptr->global_handle->module_ptr);
10002414:	68e3      	ldr	r3, [r4, #12]
10002416:	0092      	lsls	r2, r2, #2
10002418:	68d9      	ldr	r1, [r3, #12]
1000241a:	0080      	lsls	r0, r0, #2
1000241c:	588b      	ldr	r3, [r1, r2]
1000241e:	4303      	orrs	r3, r0
10002420:	508b      	str	r3, [r1, r2]
    }
    handle_ptr->init_state = status;
10002422:	7625      	strb	r5, [r4, #24]
10002424:	1c2b      	adds	r3, r5, #0
10002426:	e778      	b.n	1000231a <ADC_MEASUREMENT_Init+0xe>
10002428:	2701      	movs	r7, #1
1000242a:	e794      	b.n	10002356 <ADC_MEASUREMENT_Init+0x4a>
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000242c:	220f      	movs	r2, #15
1000242e:	4b0c      	ldr	r3, [pc, #48]	; (10002460 <ADC_MEASUREMENT_Init+0x154>)
10002430:	3702      	adds	r7, #2
10002432:	4032      	ands	r2, r6
10002434:	403e      	ands	r6, r7
10002436:	37fc      	adds	r7, #252	; 0xfc
10002438:	469c      	mov	ip, r3
1000243a:	1c3b      	adds	r3, r7, #0
1000243c:	00f6      	lsls	r6, r6, #3
1000243e:	40b3      	lsls	r3, r6
10002440:	3a08      	subs	r2, #8
10002442:	0892      	lsrs	r2, r2, #2
10002444:	0092      	lsls	r2, r2, #2
10002446:	4462      	add	r2, ip
10002448:	69d1      	ldr	r1, [r2, #28]
1000244a:	4399      	bics	r1, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1000244c:	464b      	mov	r3, r9
1000244e:	019b      	lsls	r3, r3, #6
10002450:	403b      	ands	r3, r7
10002452:	40b3      	lsls	r3, r6
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002454:	4319      	orrs	r1, r3
10002456:	61d1      	str	r1, [r2, #28]
10002458:	e7c7      	b.n	100023ea <ADC_MEASUREMENT_Init+0xde>
1000245a:	46c0      	nop			; (mov r8, r8)
1000245c:	e000e100 	.word	0xe000e100
10002460:	e000ed00 	.word	0xe000ed00

10002464 <ADC_MEASUREMENT_StartConversion>:
10002464:	2281      	movs	r2, #129	; 0x81
void ADC_MEASUREMENT_StartConversion(ADC_MEASUREMENT_t *const handle_ptr)
{
  XMC_ASSERT("ADC_MEASUREMENT_Start:Invalid handle_ptr", (handle_ptr != NULL))

  /* Generate a load event to start background request source conversion*/
  XMC_VADC_GLOBAL_BackgroundTriggerConversion(handle_ptr->global_handle->module_ptr);
10002466:	68c3      	ldr	r3, [r0, #12]
10002468:	2080      	movs	r0, #128	; 0x80
1000246a:	68d9      	ldr	r1, [r3, #12]
1000246c:	0092      	lsls	r2, r2, #2
1000246e:	588b      	ldr	r3, [r1, r2]
10002470:	0080      	lsls	r0, r0, #2
10002472:	4303      	orrs	r3, r0
10002474:	508b      	str	r3, [r1, r2]
}
10002476:	4770      	bx	lr

10002478 <ADC_MEASUREMENT_GetResult>:
                                                                const uint32_t res_reg)
{
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))

  return ((XMC_VADC_RESULT_SIZE_t)group_ptr->RES[res_reg]);
10002478:	21c0      	movs	r1, #192	; 0xc0
1000247a:	0089      	lsls	r1, r1, #2
1000247c:	468c      	mov	ip, r1
{
  XMC_VADC_RESULT_SIZE_t result;

  XMC_ASSERT("ADC_MEASUREMENT_GetResult:Invalid handle_ptr", (handle_ptr != NULL))

  result = XMC_VADC_GROUP_GetResult(handle_ptr->group_handle, handle_ptr->ch_handle->result_reg_number);
1000247e:	6803      	ldr	r3, [r0, #0]
10002480:	6882      	ldr	r2, [r0, #8]
10002482:	789b      	ldrb	r3, [r3, #2]
10002484:	071b      	lsls	r3, r3, #28
10002486:	0e9b      	lsrs	r3, r3, #26
10002488:	4463      	add	r3, ip
1000248a:	5898      	ldr	r0, [r3, r2]

  return (result);
1000248c:	b280      	uxth	r0, r0
}
1000248e:	4770      	bx	lr

10002490 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
DAVE_STATUS_t DAVE_Init(void)
{
10002490:	b508      	push	{r3, lr}
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC1_Init(&CLOCK_XMC1_0);
10002492:	4819      	ldr	r0, [pc, #100]	; (100024f8 <DAVE_Init+0x68>)
10002494:	f7ff ff24 	bl	100022e0 <CLOCK_XMC1_Init>

  if (init_status == DAVE_STATUS_SUCCESS)
10002498:	2800      	cmp	r0, #0
1000249a:	d000      	beq.n	1000249e <DAVE_Init+0xe>
  {
	 /**  Initialization of UART APP instance UART_0 */
	 init_status = (DAVE_STATUS_t)UART_Init(&UART_0); 
   }  
  return init_status;
} /**  End of function DAVE_Init */
1000249c:	bd08      	pop	{r3, pc}
     init_status = (DAVE_STATUS_t)CLOCK_XMC1_Init(&CLOCK_XMC1_0);

  if (init_status == DAVE_STATUS_SUCCESS)
  {
	 /**  Initialization of RTC APP instance RTC_0 */
	 init_status = (DAVE_STATUS_t)RTC_Init(&RTC_0); 
1000249e:	4817      	ldr	r0, [pc, #92]	; (100024fc <DAVE_Init+0x6c>)
100024a0:	f7ff fdea 	bl	10002078 <RTC_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
100024a4:	2800      	cmp	r0, #0
100024a6:	d1f9      	bne.n	1000249c <DAVE_Init+0xc>
  {
	 /**  Initialization of TIMER APP instance TIMER_0 */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&TIMER_0); 
100024a8:	4815      	ldr	r0, [pc, #84]	; (10002500 <DAVE_Init+0x70>)
100024aa:	f7ff fd99 	bl	10001fe0 <TIMER_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
100024ae:	2800      	cmp	r0, #0
100024b0:	d1f4      	bne.n	1000249c <DAVE_Init+0xc>
  {
	 /**  Initialization of ADC_MEASUREMENT APP instance ADC_MEASUREMENT_0 */
	 init_status = (DAVE_STATUS_t)ADC_MEASUREMENT_Init(&ADC_MEASUREMENT_0); 
100024b2:	4814      	ldr	r0, [pc, #80]	; (10002504 <DAVE_Init+0x74>)
100024b4:	f7ff ff2a 	bl	1000230c <ADC_MEASUREMENT_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
100024b8:	2800      	cmp	r0, #0
100024ba:	d1ef      	bne.n	1000249c <DAVE_Init+0xc>
  {
	 /**  Initialization of INTERRUPT APP instance INTERRUPT_0 */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INTERRUPT_0); 
100024bc:	4812      	ldr	r0, [pc, #72]	; (10002508 <DAVE_Init+0x78>)
100024be:	f7ff fe05 	bl	100020cc <INTERRUPT_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
100024c2:	2800      	cmp	r0, #0
100024c4:	d1ea      	bne.n	1000249c <DAVE_Init+0xc>
  {
	 /**  Initialization of DIGITAL_IO APP instance LED_ORANGE */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LED_ORANGE); 
100024c6:	4811      	ldr	r0, [pc, #68]	; (1000250c <DAVE_Init+0x7c>)
100024c8:	f7ff fefa 	bl	100022c0 <DIGITAL_IO_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
100024cc:	2800      	cmp	r0, #0
100024ce:	d1e5      	bne.n	1000249c <DAVE_Init+0xc>
  {
	 /**  Initialization of DIGITAL_IO APP instance BGT24 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&BGT24); 
100024d0:	480f      	ldr	r0, [pc, #60]	; (10002510 <DAVE_Init+0x80>)
100024d2:	f7ff fef5 	bl	100022c0 <DIGITAL_IO_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
100024d6:	2800      	cmp	r0, #0
100024d8:	d1e0      	bne.n	1000249c <DAVE_Init+0xc>
  {
	 /**  Initialization of DIGITAL_IO APP instance LED_RED */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LED_RED); 
100024da:	480e      	ldr	r0, [pc, #56]	; (10002514 <DAVE_Init+0x84>)
100024dc:	f7ff fef0 	bl	100022c0 <DIGITAL_IO_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
100024e0:	2800      	cmp	r0, #0
100024e2:	d1db      	bne.n	1000249c <DAVE_Init+0xc>
  {
	 /**  Initialization of DIGITAL_IO APP instance LED_BLUE */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LED_BLUE); 
100024e4:	480c      	ldr	r0, [pc, #48]	; (10002518 <DAVE_Init+0x88>)
100024e6:	f7ff feeb 	bl	100022c0 <DIGITAL_IO_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
100024ea:	2800      	cmp	r0, #0
100024ec:	d1d6      	bne.n	1000249c <DAVE_Init+0xc>
  {
	 /**  Initialization of UART APP instance UART_0 */
	 init_status = (DAVE_STATUS_t)UART_Init(&UART_0); 
100024ee:	480b      	ldr	r0, [pc, #44]	; (1000251c <DAVE_Init+0x8c>)
100024f0:	f7ff fb76 	bl	10001be0 <UART_Init>
100024f4:	e7d2      	b.n	1000249c <DAVE_Init+0xc>
100024f6:	46c0      	nop			; (mov r8, r8)
100024f8:	20000984 	.word	0x20000984
100024fc:	2000057c 	.word	0x2000057c
10002500:	20000554 	.word	0x20000554
10002504:	200005e0 	.word	0x200005e0
10002508:	100044d8 	.word	0x100044d8
1000250c:	10004534 	.word	0x10004534
10002510:	10004524 	.word	0x10004524
10002514:	10004544 	.word	0x10004544
10002518:	10004554 	.word	0x10004554
1000251c:	20000548 	.word	0x20000548

10002520 <radarsense2gol_result>:
		                   int16_t *adc_aqc_array_Q,
		                   uint16_t size_of_array_acq,
		                   XMC_RADARSENSE2GOL_MOTION_t motion,
		                   uint32_t max_frq_mag,
		                   uint32_t max_frq_index)
{
10002520:	b5f0      	push	{r4, r5, r6, r7, lr}
10002522:	4657      	mov	r7, sl
10002524:	464e      	mov	r6, r9
10002526:	4645      	mov	r5, r8
10002528:	b4e0      	push	{r5, r6, r7}
1000252a:	469a      	mov	sl, r3
1000252c:	ab08      	add	r3, sp, #32
1000252e:	881b      	ldrh	r3, [r3, #0]
10002530:	1c0c      	adds	r4, r1, #0
	/* Copy raw data and FFT data and motion indicator to global variables used in Micrium GUI */
	memcpy(g_sampling_data_I, adc_aqc_array_I, size_of_array_acq * sizeof(uint16_t));
10002532:	005b      	lsls	r3, r3, #1
10002534:	4699      	mov	r9, r3
		                   int16_t *adc_aqc_array_Q,
		                   uint16_t size_of_array_acq,
		                   XMC_RADARSENSE2GOL_MOTION_t motion,
		                   uint32_t max_frq_mag,
		                   uint32_t max_frq_index)
{
10002536:	4680      	mov	r8, r0
	/* Copy raw data and FFT data and motion indicator to global variables used in Micrium GUI */
	memcpy(g_sampling_data_I, adc_aqc_array_I, size_of_array_acq * sizeof(uint16_t));
10002538:	4f49      	ldr	r7, [pc, #292]	; (10002660 <radarsense2gol_result+0x140>)
		                   int16_t *adc_aqc_array_Q,
		                   uint16_t size_of_array_acq,
		                   XMC_RADARSENSE2GOL_MOTION_t motion,
		                   uint32_t max_frq_mag,
		                   uint32_t max_frq_index)
{
1000253a:	a909      	add	r1, sp, #36	; 0x24
1000253c:	780d      	ldrb	r5, [r1, #0]
	/* Copy raw data and FFT data and motion indicator to global variables used in Micrium GUI */
	memcpy(g_sampling_data_I, adc_aqc_array_I, size_of_array_acq * sizeof(uint16_t));
1000253e:	1c38      	adds	r0, r7, #0
10002540:	1c11      	adds	r1, r2, #0
10002542:	1c1a      	adds	r2, r3, #0
10002544:	f001 fb14 	bl	10003b70 <memcpy>
	memcpy(g_sampling_data_Q, adc_aqc_array_Q, size_of_array_acq * sizeof(uint16_t));
10002548:	4e46      	ldr	r6, [pc, #280]	; (10002664 <radarsense2gol_result+0x144>)
1000254a:	4651      	mov	r1, sl
1000254c:	464a      	mov	r2, r9
1000254e:	1c30      	adds	r0, r6, #0
10002550:	f001 fb0e 	bl	10003b70 <memcpy>
	memcpy(g_fft_data, &fft_magnitude_array[1], (size_of_array_mag - 1) * sizeof(uint32_t));
10002554:	1e63      	subs	r3, r4, #1
10002556:	4a44      	ldr	r2, [pc, #272]	; (10002668 <radarsense2gol_result+0x148>)
10002558:	009b      	lsls	r3, r3, #2
1000255a:	4699      	mov	r9, r3
1000255c:	4643      	mov	r3, r8
1000255e:	4692      	mov	sl, r2
10002560:	1d19      	adds	r1, r3, #4
10002562:	1c10      	adds	r0, r2, #0
10002564:	464a      	mov	r2, r9
10002566:	f001 fb03 	bl	10003b70 <memcpy>

	/* To remove the spike from last bins in FFT spectrum, force last two bins to 0 */
	g_fft_data[size_of_array_mag-1] = 0;
1000256a:	2300      	movs	r3, #0
1000256c:	4652      	mov	r2, sl
1000256e:	4649      	mov	r1, r9
10002570:	508b      	str	r3, [r1, r2]
	g_fft_data[size_of_array_mag-2] = 0;
10002572:	4651      	mov	r1, sl
10002574:	1ea2      	subs	r2, r4, #2
10002576:	0092      	lsls	r2, r2, #2
10002578:	5053      	str	r3, [r2, r1]

	fft_magnitude_array[size_of_array_mag-1] = 0;
1000257a:	4a3c      	ldr	r2, [pc, #240]	; (1000266c <radarsense2gol_result+0x14c>)
1000257c:	4694      	mov	ip, r2
1000257e:	4642      	mov	r2, r8
10002580:	4464      	add	r4, ip
10002582:	00a4      	lsls	r4, r4, #2
10002584:	5113      	str	r3, [r2, r4]
	fft_magnitude_array[size_of_array_mag-2] = 0;
10002586:	4444      	add	r4, r8
10002588:	3c04      	subs	r4, #4
1000258a:	6023      	str	r3, [r4, #0]

	/* Calculate Doppler frequency and velocity */
	float doppler_frequency = calcDopplerFrequency(max_frq_index);
	float doppler_velocity  = calcDopplerSpeed(doppler_frequency);

	if (g_uart_start)
1000258c:	4b38      	ldr	r3, [pc, #224]	; (10002670 <radarsense2gol_result+0x150>)
1000258e:	781b      	ldrb	r3, [r3, #0]
10002590:	2b00      	cmp	r3, #0
10002592:	d156      	bne.n	10002642 <radarsense2gol_result+0x122>
		dumpRawIQ_uint16(g_sampling_data_I, g_sampling_data_Q, (uint16_t)BUFF_SIZE);

	/* Check results */
	if (motion != XMC_NO_MOTION_DETECT &&		// Motion detected
10002594:	2d02      	cmp	r5, #2
10002596:	d011      	beq.n	100025bc <radarsense2gol_result+0x9c>
 *        The Doppler frequency is calculated by multiplying the FFT bin size
 *        with the number of the FFT bin where the maximum was found.
 */
static float calcDopplerFrequency(const uint32_t max_frq_index)
{
	return (float)(max_frq_index * FFT_BIN_SIZE);
10002598:	980b      	ldr	r0, [sp, #44]	; 0x2c
1000259a:	f001 f8a5 	bl	100036e8 <__aeabi_ui2f>
1000259e:	4935      	ldr	r1, [pc, #212]	; (10002674 <radarsense2gol_result+0x154>)
100025a0:	f000 ff70 	bl	10003484 <__aeabi_fmul>
 *        24GHz Doppler radar systems. A velocity of 1Km/h will correspond to
 *        a Doppler frequency of 44.4Hz
 */
static float calcDopplerSpeed(const float doppler_freq)
{
	return doppler_freq / 44.4f;
100025a4:	4934      	ldr	r1, [pc, #208]	; (10002678 <radarsense2gol_result+0x158>)
 *        The Doppler frequency is calculated by multiplying the FFT bin size
 *        with the number of the FFT bin where the maximum was found.
 */
static float calcDopplerFrequency(const uint32_t max_frq_index)
{
	return (float)(max_frq_index * FFT_BIN_SIZE);
100025a6:	1c06      	adds	r6, r0, #0
 *        24GHz Doppler radar systems. A velocity of 1Km/h will correspond to
 *        a Doppler frequency of 44.4Hz
 */
static float calcDopplerSpeed(const float doppler_freq)
{
	return doppler_freq / 44.4f;
100025a8:	f000 fd7a 	bl	100030a0 <__aeabi_fdiv>
	if (g_uart_start)
		dumpRawIQ_uint16(g_sampling_data_I, g_sampling_data_Q, (uint16_t)BUFF_SIZE);

	/* Check results */
	if (motion != XMC_NO_MOTION_DETECT &&		// Motion detected
	    doppler_velocity > g_min_velocity &&	// Doppler velocity is greater than min velocity
100025ac:	4b33      	ldr	r3, [pc, #204]	; (1000267c <radarsense2gol_result+0x15c>)
 *        24GHz Doppler radar systems. A velocity of 1Km/h will correspond to
 *        a Doppler frequency of 44.4Hz
 */
static float calcDopplerSpeed(const float doppler_freq)
{
	return doppler_freq / 44.4f;
100025ae:	1c04      	adds	r4, r0, #0

	if (g_uart_start)
		dumpRawIQ_uint16(g_sampling_data_I, g_sampling_data_Q, (uint16_t)BUFF_SIZE);

	/* Check results */
	if (motion != XMC_NO_MOTION_DETECT &&		// Motion detected
100025b0:	1c21      	adds	r1, r4, #0
100025b2:	6818      	ldr	r0, [r3, #0]
100025b4:	f000 fccc 	bl	10002f50 <__aeabi_fcmplt>
100025b8:	2800      	cmp	r0, #0
100025ba:	d11f      	bne.n	100025fc <radarsense2gol_result+0xdc>
100025bc:	4b30      	ldr	r3, [pc, #192]	; (10002680 <radarsense2gol_result+0x160>)
100025be:	681a      	ldr	r2, [r3, #0]

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
100025c0:	7b19      	ldrb	r1, [r3, #12]
100025c2:	2380      	movs	r3, #128	; 0x80
100025c4:	025b      	lsls	r3, r3, #9
100025c6:	408b      	lsls	r3, r1
100025c8:	6053      	str	r3, [r2, #4]
100025ca:	4b2e      	ldr	r3, [pc, #184]	; (10002684 <radarsense2gol_result+0x164>)
100025cc:	6819      	ldr	r1, [r3, #0]

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
100025ce:	7b1a      	ldrb	r2, [r3, #12]
100025d0:	2301      	movs	r3, #1
100025d2:	1c18      	adds	r0, r3, #0
100025d4:	4090      	lsls	r0, r2
100025d6:	4a2c      	ldr	r2, [pc, #176]	; (10002688 <radarsense2gol_result+0x168>)
100025d8:	6048      	str	r0, [r1, #4]
100025da:	6811      	ldr	r1, [r2, #0]
100025dc:	7b12      	ldrb	r2, [r2, #12]
100025de:	4093      	lsls	r3, r2
100025e0:	604b      	str	r3, [r1, #4]
		DIGITAL_IO_SetOutputLow(&LED_BLUE);
		DIGITAL_IO_SetOutputHigh(&LED_ORANGE);
		DIGITAL_IO_SetOutputHigh(&LED_RED);

		/* Set velocity and frequency to 0 in case of no motion */
		g_doppler_frequency = 0.0;
100025e2:	2300      	movs	r3, #0
100025e4:	4a29      	ldr	r2, [pc, #164]	; (1000268c <radarsense2gol_result+0x16c>)
100025e6:	6013      	str	r3, [r2, #0]
		g_doppler_velocity = 0.0;
100025e8:	4a29      	ldr	r2, [pc, #164]	; (10002690 <radarsense2gol_result+0x170>)
100025ea:	6013      	str	r3, [r2, #0]
		g_motion = XMC_NO_MOTION_DETECT;
100025ec:	2202      	movs	r2, #2
100025ee:	4b29      	ldr	r3, [pc, #164]	; (10002694 <radarsense2gol_result+0x174>)
100025f0:	701a      	strb	r2, [r3, #0]
	}
}
100025f2:	bc1c      	pop	{r2, r3, r4}
100025f4:	4690      	mov	r8, r2
100025f6:	4699      	mov	r9, r3
100025f8:	46a2      	mov	sl, r4
100025fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		dumpRawIQ_uint16(g_sampling_data_I, g_sampling_data_Q, (uint16_t)BUFF_SIZE);

	/* Check results */
	if (motion != XMC_NO_MOTION_DETECT &&		// Motion detected
	    doppler_velocity > g_min_velocity &&	// Doppler velocity is greater than min velocity
		doppler_velocity < g_max_velocity)	    // Doppler velocity is less than max velocity
100025fc:	4b26      	ldr	r3, [pc, #152]	; (10002698 <radarsense2gol_result+0x178>)
	if (g_uart_start)
		dumpRawIQ_uint16(g_sampling_data_I, g_sampling_data_Q, (uint16_t)BUFF_SIZE);

	/* Check results */
	if (motion != XMC_NO_MOTION_DETECT &&		// Motion detected
	    doppler_velocity > g_min_velocity &&	// Doppler velocity is greater than min velocity
100025fe:	1c21      	adds	r1, r4, #0
10002600:	6818      	ldr	r0, [r3, #0]
10002602:	f000 fcb9 	bl	10002f78 <__aeabi_fcmpgt>
10002606:	2800      	cmp	r0, #0
10002608:	d0d8      	beq.n	100025bc <radarsense2gol_result+0x9c>
		doppler_velocity < g_max_velocity)	    // Doppler velocity is less than max velocity
	{
		if (motion == XMC_MOTION_DETECT_APPROACHING) // target is approaching radar sensor
1000260a:	2d00      	cmp	r5, #0
1000260c:	d11f      	bne.n	1000264e <radarsense2gol_result+0x12e>
1000260e:	4b1e      	ldr	r3, [pc, #120]	; (10002688 <radarsense2gol_result+0x168>)
10002610:	681a      	ldr	r2, [r3, #0]

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
10002612:	7b19      	ldrb	r1, [r3, #12]
10002614:	2380      	movs	r3, #128	; 0x80
10002616:	025b      	lsls	r3, r3, #9
10002618:	408b      	lsls	r3, r1
1000261a:	6053      	str	r3, [r2, #4]
1000261c:	4b19      	ldr	r3, [pc, #100]	; (10002684 <radarsense2gol_result+0x164>)
1000261e:	6819      	ldr	r1, [r3, #0]

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
10002620:	7b1a      	ldrb	r2, [r3, #12]
10002622:	2301      	movs	r3, #1
10002624:	1c18      	adds	r0, r3, #0
10002626:	4090      	lsls	r0, r2
10002628:	4a15      	ldr	r2, [pc, #84]	; (10002680 <radarsense2gol_result+0x160>)
1000262a:	6048      	str	r0, [r1, #4]
1000262c:	6811      	ldr	r1, [r2, #0]
1000262e:	7b12      	ldrb	r2, [r2, #12]
10002630:	4093      	lsls	r3, r2
10002632:	604b      	str	r3, [r1, #4]
			/* Turn on orange LED, turn off red and blue LEDs */
			DIGITAL_IO_SetOutputLow(&LED_ORANGE);
			DIGITAL_IO_SetOutputHigh(&LED_RED);
			DIGITAL_IO_SetOutputHigh(&LED_BLUE);
		}
		g_motion = motion;
10002634:	4b17      	ldr	r3, [pc, #92]	; (10002694 <radarsense2gol_result+0x174>)
10002636:	701d      	strb	r5, [r3, #0]
		g_doppler_frequency = doppler_frequency;
10002638:	4b14      	ldr	r3, [pc, #80]	; (1000268c <radarsense2gol_result+0x16c>)
1000263a:	601e      	str	r6, [r3, #0]
		g_doppler_velocity = doppler_velocity;
1000263c:	4b14      	ldr	r3, [pc, #80]	; (10002690 <radarsense2gol_result+0x170>)
1000263e:	601c      	str	r4, [r3, #0]
10002640:	e7d7      	b.n	100025f2 <radarsense2gol_result+0xd2>
	/* Calculate Doppler frequency and velocity */
	float doppler_frequency = calcDopplerFrequency(max_frq_index);
	float doppler_velocity  = calcDopplerSpeed(doppler_frequency);

	if (g_uart_start)
		dumpRawIQ_uint16(g_sampling_data_I, g_sampling_data_Q, (uint16_t)BUFF_SIZE);
10002642:	1c38      	adds	r0, r7, #0
10002644:	1c31      	adds	r1, r6, #0
10002646:	2280      	movs	r2, #128	; 0x80
10002648:	f7ff fab2 	bl	10001bb0 <dumpRawIQ_uint16>
1000264c:	e7a2      	b.n	10002594 <radarsense2gol_result+0x74>
1000264e:	4b0d      	ldr	r3, [pc, #52]	; (10002684 <radarsense2gol_result+0x164>)
10002650:	681a      	ldr	r2, [r3, #0]

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
10002652:	7b19      	ldrb	r1, [r3, #12]
10002654:	2380      	movs	r3, #128	; 0x80
10002656:	025b      	lsls	r3, r3, #9
10002658:	408b      	lsls	r3, r1
1000265a:	6053      	str	r3, [r2, #4]
1000265c:	4b0a      	ldr	r3, [pc, #40]	; (10002688 <radarsense2gol_result+0x168>)
1000265e:	e7de      	b.n	1000261e <radarsense2gol_result+0xfe>
10002660:	20000a94 	.word	0x20000a94
10002664:	20000b98 	.word	0x20000b98
10002668:	20000990 	.word	0x20000990
1000266c:	3fffffff 	.word	0x3fffffff
10002670:	20000654 	.word	0x20000654
10002674:	41bb8000 	.word	0x41bb8000
10002678:	4231999a 	.word	0x4231999a
1000267c:	20000658 	.word	0x20000658
10002680:	10004554 	.word	0x10004554
10002684:	10004534 	.word	0x10004534
10002688:	10004544 	.word	0x10004544
1000268c:	20000a90 	.word	0x20000a90
10002690:	20000b94 	.word	0x20000b94
10002694:	20000660 	.word	0x20000660
10002698:	20000644 	.word	0x20000644

1000269c <main>:
   6. MAIN METHOD
==============================================================================
 */

int main(void)
{
1000269c:	b570      	push	{r4, r5, r6, lr}
1000269e:	b084      	sub	sp, #16
	bool running = false;

	/* Initialize DAVE APPs */
	DAVE_Init();
100026a0:	f7ff fef6 	bl	10002490 <DAVE_Init>
100026a4:	4b23      	ldr	r3, [pc, #140]	; (10002734 <main+0x98>)
	DIGITAL_IO_SetOutputHigh(&LED_BLUE);

	/* Turn on BGT */
	DIGITAL_IO_SetOutputLow(&BGT24);

	radarsense2gol_init(radarsense2gol_timing,
100026a6:	4e24      	ldr	r6, [pc, #144]	; (10002738 <main+0x9c>)
100026a8:	6819      	ldr	r1, [r3, #0]

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
100026aa:	7b1a      	ldrb	r2, [r3, #12]
100026ac:	2301      	movs	r3, #1
100026ae:	1c18      	adds	r0, r3, #0
100026b0:	4090      	lsls	r0, r2
100026b2:	6048      	str	r0, [r1, #4]
100026b4:	1c18      	adds	r0, r3, #0
100026b6:	4a21      	ldr	r2, [pc, #132]	; (1000273c <main+0xa0>)
100026b8:	6811      	ldr	r1, [r2, #0]
100026ba:	7b12      	ldrb	r2, [r2, #12]
100026bc:	4090      	lsls	r0, r2
100026be:	4a20      	ldr	r2, [pc, #128]	; (10002740 <main+0xa4>)
100026c0:	6048      	str	r0, [r1, #4]
100026c2:	6811      	ldr	r1, [r2, #0]
100026c4:	7b12      	ldrb	r2, [r2, #12]
100026c6:	4093      	lsls	r3, r2
100026c8:	604b      	str	r3, [r1, #4]
100026ca:	4b1e      	ldr	r3, [pc, #120]	; (10002744 <main+0xa8>)
100026cc:	681a      	ldr	r2, [r3, #0]

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
100026ce:	7b19      	ldrb	r1, [r3, #12]
100026d0:	2380      	movs	r3, #128	; 0x80
100026d2:	025b      	lsls	r3, r3, #9
100026d4:	408b      	lsls	r3, r1
100026d6:	491c      	ldr	r1, [pc, #112]	; (10002748 <main+0xac>)
100026d8:	6053      	str	r3, [r2, #4]
100026da:	8808      	ldrh	r0, [r1, #0]
100026dc:	ab02      	add	r3, sp, #8
100026de:	8018      	strh	r0, [r3, #0]
100026e0:	7889      	ldrb	r1, [r1, #2]
100026e2:	4a1a      	ldr	r2, [pc, #104]	; (1000274c <main+0xb0>)
100026e4:	7099      	strb	r1, [r3, #2]
100026e6:	4669      	mov	r1, sp
100026e8:	4b19      	ldr	r3, [pc, #100]	; (10002750 <main+0xb4>)
100026ea:	9303      	str	r3, [sp, #12]
100026ec:	1d33      	adds	r3, r6, #4
100026ee:	cb11      	ldmia	r3!, {r0, r4}
100026f0:	c111      	stmia	r1!, {r0, r4}
==============================================================================
 */

int main(void)
{
	bool running = false;
100026f2:	2400      	movs	r4, #0
	DIGITAL_IO_SetOutputHigh(&LED_BLUE);

	/* Turn on BGT */
	DIGITAL_IO_SetOutputLow(&BGT24);

	radarsense2gol_init(radarsense2gol_timing,
100026f4:	6810      	ldr	r0, [r2, #0]
100026f6:	6851      	ldr	r1, [r2, #4]
100026f8:	6833      	ldr	r3, [r6, #0]
100026fa:	6892      	ldr	r2, [r2, #8]
100026fc:	f000 f82e 	bl	1000275c <radarsense2gol_init>
			            radarsense2gol_algorithm,
			            radarsense2gol_powerdown,
			            &TIMER_0);

	/* Register callback */
	radarsense2gol_regcb_result(radarsense2gol_result);
10002700:	4814      	ldr	r0, [pc, #80]	; (10002754 <main+0xb8>)
10002702:	f000 f8d1 	bl	100028a8 <radarsense2gol_regcb_result>
10002706:	4d14      	ldr	r5, [pc, #80]	; (10002758 <main+0xbc>)

	/* Infinite loop */
	while(1U)
	{
		if (running == false)
10002708:	2c00      	cmp	r4, #0
1000270a:	d105      	bne.n	10002718 <main+0x7c>
		{
			if (g_start == true)
1000270c:	782b      	ldrb	r3, [r5, #0]
1000270e:	2b00      	cmp	r3, #0
10002710:	d0fc      	beq.n	1000270c <main+0x70>
			{
				running = true;
				radarsense2gol_start();
10002712:	f000 f88f 	bl	10002834 <radarsense2gol_start>
	{
		if (running == false)
		{
			if (g_start == true)
			{
				running = true;
10002716:	2401      	movs	r4, #1
				radarsense2gol_start();
			}
		}
		else
		{
			if (g_start == false)
10002718:	782b      	ldrb	r3, [r5, #0]
1000271a:	2b00      	cmp	r3, #0
1000271c:	d005      	beq.n	1000272a <main+0x8e>
			{
				running = false;
				radarsense2gol_stop();
			}

			radarsense2gol_set_detection_threshold(radarsense2gol_algorithm.trigger_det_level);
1000271e:	6870      	ldr	r0, [r6, #4]
10002720:	f000 f8a0 	bl	10002864 <radarsense2gol_set_detection_threshold>

			/* Only need to be called if mainexec_enable is enabled during initialization */
			radarsense2gol_exitmain();
10002724:	f000 f8a8 	bl	10002878 <radarsense2gol_exitmain>
10002728:	e7ee      	b.n	10002708 <main+0x6c>
		else
		{
			if (g_start == false)
			{
				running = false;
				radarsense2gol_stop();
1000272a:	f000 f88f 	bl	1000284c <radarsense2gol_stop>
		}
		else
		{
			if (g_start == false)
			{
				running = false;
1000272e:	2400      	movs	r4, #0
10002730:	e7f5      	b.n	1000271e <main+0x82>
10002732:	46c0      	nop			; (mov r8, r8)
10002734:	10004534 	.word	0x10004534
10002738:	20000638 	.word	0x20000638
1000273c:	10004544 	.word	0x10004544
10002740:	10004554 	.word	0x10004554
10002744:	10004524 	.word	0x10004524
10002748:	2000065c 	.word	0x2000065c
1000274c:	20000648 	.word	0x20000648
10002750:	20000554 	.word	0x20000554
10002754:	10002521 	.word	0x10002521
10002758:	20000634 	.word	0x20000634

1000275c <radarsense2gol_init>:
1000275c:	b082      	sub	sp, #8
1000275e:	b5f0      	push	{r4, r5, r6, r7, lr}
10002760:	1c0c      	adds	r4, r1, #0
10002762:	b085      	sub	sp, #20
10002764:	1c16      	adds	r6, r2, #0
10002766:	9203      	str	r2, [sp, #12]
10002768:	4a25      	ldr	r2, [pc, #148]	; (10002800 <radarsense2gol_init+0xa4>)
1000276a:	4d26      	ldr	r5, [pc, #152]	; (10002804 <radarsense2gol_init+0xa8>)
1000276c:	6014      	str	r4, [r2, #0]
1000276e:	b2f2      	uxtb	r2, r6
10002770:	4e25      	ldr	r6, [pc, #148]	; (10002808 <radarsense2gol_init+0xac>)
10002772:	9102      	str	r1, [sp, #8]
10002774:	7032      	strb	r2, [r6, #0]
10002776:	a90b      	add	r1, sp, #44	; 0x2c
10002778:	930b      	str	r3, [sp, #44]	; 0x2c
1000277a:	9001      	str	r0, [sp, #4]
1000277c:	6028      	str	r0, [r5, #0]
1000277e:	7a0f      	ldrb	r7, [r1, #8]
10002780:	4e22      	ldr	r6, [pc, #136]	; (1000280c <radarsense2gol_init+0xb0>)
10002782:	4923      	ldr	r1, [pc, #140]	; (10002810 <radarsense2gol_init+0xb4>)
10002784:	7037      	strb	r7, [r6, #0]
10002786:	9e0c      	ldr	r6, [sp, #48]	; 0x30
10002788:	b2db      	uxtb	r3, r3
1000278a:	600e      	str	r6, [r1, #0]
1000278c:	4921      	ldr	r1, [pc, #132]	; (10002814 <radarsense2gol_init+0xb8>)
1000278e:	2b00      	cmp	r3, #0
10002790:	d100      	bne.n	10002794 <radarsense2gol_init+0x38>
10002792:	3301      	adds	r3, #1
10002794:	700b      	strb	r3, [r1, #0]
10002796:	ab0e      	add	r3, sp, #56	; 0x38
10002798:	789e      	ldrb	r6, [r3, #2]
1000279a:	491f      	ldr	r1, [pc, #124]	; (10002818 <radarsense2gol_init+0xbc>)
1000279c:	700e      	strb	r6, [r1, #0]
1000279e:	2601      	movs	r6, #1
100027a0:	7859      	ldrb	r1, [r3, #1]
100027a2:	4b1e      	ldr	r3, [pc, #120]	; (1000281c <radarsense2gol_init+0xc0>)
100027a4:	7019      	strb	r1, [r3, #0]
100027a6:	990f      	ldr	r1, [sp, #60]	; 0x3c
100027a8:	4b1d      	ldr	r3, [pc, #116]	; (10002820 <radarsense2gol_init+0xc4>)
100027aa:	6019      	str	r1, [r3, #0]
100027ac:	1c33      	adds	r3, r6, #0
100027ae:	4093      	lsls	r3, r2
100027b0:	4a1c      	ldr	r2, [pc, #112]	; (10002824 <radarsense2gol_init+0xc8>)
100027b2:	491d      	ldr	r1, [pc, #116]	; (10002828 <radarsense2gol_init+0xcc>)
100027b4:	6013      	str	r3, [r2, #0]
100027b6:	199b      	adds	r3, r3, r6
100027b8:	4358      	muls	r0, r3
100027ba:	f7fe fe7f 	bl	100014bc <__aeabi_uidiv>
100027be:	21fa      	movs	r1, #250	; 0xfa
100027c0:	1a20      	subs	r0, r4, r0
100027c2:	0089      	lsls	r1, r1, #2
100027c4:	03c0      	lsls	r0, r0, #15
100027c6:	f7fe fe79 	bl	100014bc <__aeabi_uidiv>
100027ca:	b280      	uxth	r0, r0
100027cc:	f7fe feb4 	bl	10001538 <XMC_RTC_SetPrescaler>
100027d0:	2164      	movs	r1, #100	; 0x64
100027d2:	682b      	ldr	r3, [r5, #0]
100027d4:	980f      	ldr	r0, [sp, #60]	; 0x3c
100027d6:	4359      	muls	r1, r3
100027d8:	f7ff fb6a 	bl	10001eb0 <TIMER_SetTimeInterval>
100027dc:	23d1      	movs	r3, #209	; 0xd1
100027de:	2004      	movs	r0, #4
100027e0:	4a12      	ldr	r2, [pc, #72]	; (1000282c <radarsense2gol_init+0xd0>)
100027e2:	011b      	lsls	r3, r3, #4
100027e4:	58d1      	ldr	r1, [r2, r3]
100027e6:	4381      	bics	r1, r0
100027e8:	50d1      	str	r1, [r2, r3]
100027ea:	58d1      	ldr	r1, [r2, r3]
100027ec:	3802      	subs	r0, #2
100027ee:	4301      	orrs	r1, r0
100027f0:	50d1      	str	r1, [r2, r3]
100027f2:	4b0f      	ldr	r3, [pc, #60]	; (10002830 <radarsense2gol_init+0xd4>)
100027f4:	601e      	str	r6, [r3, #0]
100027f6:	b005      	add	sp, #20
100027f8:	bcf0      	pop	{r4, r5, r6, r7}
100027fa:	bc08      	pop	{r3}
100027fc:	b002      	add	sp, #8
100027fe:	4718      	bx	r3
10002800:	20000cc4 	.word	0x20000cc4
10002804:	20000cb4 	.word	0x20000cb4
10002808:	20000cae 	.word	0x20000cae
1000280c:	20000cdc 	.word	0x20000cdc
10002810:	20000ce0 	.word	0x20000ce0
10002814:	20000cad 	.word	0x20000cad
10002818:	20000c98 	.word	0x20000c98
1000281c:	20000ca1 	.word	0x20000ca1
10002820:	20000cb8 	.word	0x20000cb8
10002824:	20000cd8 	.word	0x20000cd8
10002828:	000186a0 	.word	0x000186a0
1000282c:	e000e000 	.word	0xe000e000
10002830:	20000ca8 	.word	0x20000ca8

10002834 <radarsense2gol_start>:
10002834:	b508      	push	{r3, lr}
10002836:	4b04      	ldr	r3, [pc, #16]	; (10002848 <radarsense2gol_start+0x14>)
10002838:	2001      	movs	r0, #1
1000283a:	681b      	ldr	r3, [r3, #0]
1000283c:	2b00      	cmp	r3, #0
1000283e:	d002      	beq.n	10002846 <radarsense2gol_start+0x12>
10002840:	f7fe fe5a 	bl	100014f8 <XMC_RTC_Start>
10002844:	2000      	movs	r0, #0
10002846:	bd08      	pop	{r3, pc}
10002848:	20000ca8 	.word	0x20000ca8

1000284c <radarsense2gol_stop>:
1000284c:	b508      	push	{r3, lr}
1000284e:	4b04      	ldr	r3, [pc, #16]	; (10002860 <radarsense2gol_stop+0x14>)
10002850:	2001      	movs	r0, #1
10002852:	681b      	ldr	r3, [r3, #0]
10002854:	2b00      	cmp	r3, #0
10002856:	d002      	beq.n	1000285e <radarsense2gol_stop+0x12>
10002858:	f7fe fe5e 	bl	10001518 <XMC_RTC_Stop>
1000285c:	2000      	movs	r0, #0
1000285e:	bd08      	pop	{r3, pc}
10002860:	20000ca8 	.word	0x20000ca8

10002864 <radarsense2gol_set_detection_threshold>:
10002864:	4b03      	ldr	r3, [pc, #12]	; (10002874 <radarsense2gol_set_detection_threshold+0x10>)
10002866:	681a      	ldr	r2, [r3, #0]
10002868:	4282      	cmp	r2, r0
1000286a:	d000      	beq.n	1000286e <radarsense2gol_set_detection_threshold+0xa>
1000286c:	6018      	str	r0, [r3, #0]
1000286e:	2000      	movs	r0, #0
10002870:	4770      	bx	lr
10002872:	46c0      	nop			; (mov r8, r8)
10002874:	20000ce0 	.word	0x20000ce0

10002878 <radarsense2gol_exitmain>:
10002878:	4b08      	ldr	r3, [pc, #32]	; (1000289c <radarsense2gol_exitmain+0x24>)
1000287a:	b510      	push	{r4, lr}
1000287c:	681b      	ldr	r3, [r3, #0]
1000287e:	2001      	movs	r0, #1
10002880:	2b00      	cmp	r3, #0
10002882:	d009      	beq.n	10002898 <radarsense2gol_exitmain+0x20>
10002884:	2000      	movs	r0, #0
10002886:	22d1      	movs	r2, #209	; 0xd1
10002888:	2402      	movs	r4, #2
1000288a:	4b05      	ldr	r3, [pc, #20]	; (100028a0 <radarsense2gol_exitmain+0x28>)
1000288c:	4905      	ldr	r1, [pc, #20]	; (100028a4 <radarsense2gol_exitmain+0x2c>)
1000288e:	7018      	strb	r0, [r3, #0]
10002890:	0112      	lsls	r2, r2, #4
10002892:	588b      	ldr	r3, [r1, r2]
10002894:	43a3      	bics	r3, r4
10002896:	508b      	str	r3, [r1, r2]
10002898:	bd10      	pop	{r4, pc}
1000289a:	46c0      	nop			; (mov r8, r8)
1000289c:	20000ca8 	.word	0x20000ca8
100028a0:	20000cbc 	.word	0x20000cbc
100028a4:	e000e000 	.word	0xe000e000

100028a8 <radarsense2gol_regcb_result>:
100028a8:	4b04      	ldr	r3, [pc, #16]	; (100028bc <radarsense2gol_regcb_result+0x14>)
100028aa:	681a      	ldr	r2, [r3, #0]
100028ac:	2301      	movs	r3, #1
100028ae:	2a00      	cmp	r2, #0
100028b0:	d002      	beq.n	100028b8 <radarsense2gol_regcb_result+0x10>
100028b2:	4b03      	ldr	r3, [pc, #12]	; (100028c0 <radarsense2gol_regcb_result+0x18>)
100028b4:	6018      	str	r0, [r3, #0]
100028b6:	2300      	movs	r3, #0
100028b8:	1c18      	adds	r0, r3, #0
100028ba:	4770      	bx	lr
100028bc:	20000ca8 	.word	0x20000ca8
100028c0:	20000cc0 	.word	0x20000cc0

100028c4 <CCU40_2_IRQHandler>:
100028c4:	b5f0      	push	{r4, r5, r6, r7, lr}
100028c6:	4dbc      	ldr	r5, [pc, #752]	; (10002bb8 <CCU40_2_IRQHandler+0x2f4>)
100028c8:	4bbc      	ldr	r3, [pc, #752]	; (10002bbc <CCU40_2_IRQHandler+0x2f8>)
100028ca:	682a      	ldr	r2, [r5, #0]
100028cc:	b089      	sub	sp, #36	; 0x24
100028ce:	429a      	cmp	r2, r3
100028d0:	d119      	bne.n	10002906 <CCU40_2_IRQHandler+0x42>
100028d2:	22d1      	movs	r2, #209	; 0xd1
100028d4:	2004      	movs	r0, #4
100028d6:	49ba      	ldr	r1, [pc, #744]	; (10002bc0 <CCU40_2_IRQHandler+0x2fc>)
100028d8:	0112      	lsls	r2, r2, #4
100028da:	588b      	ldr	r3, [r1, r2]
100028dc:	4383      	bics	r3, r0
100028de:	508b      	str	r3, [r1, r2]
100028e0:	4bb8      	ldr	r3, [pc, #736]	; (10002bc4 <CCU40_2_IRQHandler+0x300>)
100028e2:	681b      	ldr	r3, [r3, #0]
100028e4:	2b00      	cmp	r3, #0
100028e6:	d000      	beq.n	100028ea <CCU40_2_IRQHandler+0x26>
100028e8:	4798      	blx	r3
100028ea:	4bb7      	ldr	r3, [pc, #732]	; (10002bc8 <CCU40_2_IRQHandler+0x304>)
100028ec:	6818      	ldr	r0, [r3, #0]
100028ee:	f7ff fabb 	bl	10001e68 <TIMER_Start>
100028f2:	2300      	movs	r3, #0
100028f4:	4ab5      	ldr	r2, [pc, #724]	; (10002bcc <CCU40_2_IRQHandler+0x308>)
100028f6:	602b      	str	r3, [r5, #0]
100028f8:	6013      	str	r3, [r2, #0]
100028fa:	4ab5      	ldr	r2, [pc, #724]	; (10002bd0 <CCU40_2_IRQHandler+0x30c>)
100028fc:	6013      	str	r3, [r2, #0]
100028fe:	2201      	movs	r2, #1
10002900:	4bb4      	ldr	r3, [pc, #720]	; (10002bd4 <CCU40_2_IRQHandler+0x310>)
10002902:	701a      	strb	r2, [r3, #0]
10002904:	e156      	b.n	10002bb4 <CCU40_2_IRQHandler+0x2f0>
10002906:	4cb4      	ldr	r4, [pc, #720]	; (10002bd8 <CCU40_2_IRQHandler+0x314>)
10002908:	6823      	ldr	r3, [r4, #0]
1000290a:	3b01      	subs	r3, #1
1000290c:	429a      	cmp	r2, r3
1000290e:	d241      	bcs.n	10002994 <CCU40_2_IRQHandler+0xd0>
10002910:	4bb2      	ldr	r3, [pc, #712]	; (10002bdc <CCU40_2_IRQHandler+0x318>)
10002912:	781b      	ldrb	r3, [r3, #0]
10002914:	2b00      	cmp	r3, #0
10002916:	d108      	bne.n	1000292a <CCU40_2_IRQHandler+0x66>
10002918:	4eb1      	ldr	r6, [pc, #708]	; (10002be0 <CCU40_2_IRQHandler+0x31c>)
1000291a:	4cb2      	ldr	r4, [pc, #712]	; (10002be4 <CCU40_2_IRQHandler+0x320>)
1000291c:	4fb2      	ldr	r7, [pc, #712]	; (10002be8 <CCU40_2_IRQHandler+0x324>)
1000291e:	48b3      	ldr	r0, [pc, #716]	; (10002bec <CCU40_2_IRQHandler+0x328>)
10002920:	6026      	str	r6, [r4, #0]
10002922:	603e      	str	r6, [r7, #0]
10002924:	f7ff fd9e 	bl	10002464 <ADC_MEASUREMENT_StartConversion>
10002928:	e00c      	b.n	10002944 <CCU40_2_IRQHandler+0x80>
1000292a:	2001      	movs	r0, #1
1000292c:	f7fe fc6e 	bl	1000120c <XMC_SCU_CLOCK_UngatePeripheralClock>
10002930:	2001      	movs	r0, #1
10002932:	f7fe fc83 	bl	1000123c <XMC_SCU_CLOCK_IsPeripheralClockGated>
10002936:	2800      	cmp	r0, #0
10002938:	d1fa      	bne.n	10002930 <CCU40_2_IRQHandler+0x6c>
1000293a:	e7ed      	b.n	10002918 <CCU40_2_IRQHandler+0x54>
1000293c:	683a      	ldr	r2, [r7, #0]
1000293e:	4ba8      	ldr	r3, [pc, #672]	; (10002be0 <CCU40_2_IRQHandler+0x31c>)
10002940:	429a      	cmp	r2, r3
10002942:	d103      	bne.n	1000294c <CCU40_2_IRQHandler+0x88>
10002944:	6823      	ldr	r3, [r4, #0]
10002946:	42b3      	cmp	r3, r6
10002948:	d0fc      	beq.n	10002944 <CCU40_2_IRQHandler+0x80>
1000294a:	e7f7      	b.n	1000293c <CCU40_2_IRQHandler+0x78>
1000294c:	4ba3      	ldr	r3, [pc, #652]	; (10002bdc <CCU40_2_IRQHandler+0x318>)
1000294e:	781b      	ldrb	r3, [r3, #0]
10002950:	2b00      	cmp	r3, #0
10002952:	d002      	beq.n	1000295a <CCU40_2_IRQHandler+0x96>
10002954:	2001      	movs	r0, #1
10002956:	f7fe fc45 	bl	100011e4 <XMC_SCU_CLOCK_GatePeripheralClock>
1000295a:	6823      	ldr	r3, [r4, #0]
1000295c:	682a      	ldr	r2, [r5, #0]
1000295e:	48a4      	ldr	r0, [pc, #656]	; (10002bf0 <CCU40_2_IRQHandler+0x32c>)
10002960:	0051      	lsls	r1, r2, #1
10002962:	b29b      	uxth	r3, r3
10002964:	520b      	strh	r3, [r1, r0]
10002966:	6824      	ldr	r4, [r4, #0]
10002968:	48a2      	ldr	r0, [pc, #648]	; (10002bf4 <CCU40_2_IRQHandler+0x330>)
1000296a:	b21b      	sxth	r3, r3
1000296c:	520c      	strh	r4, [r1, r0]
1000296e:	4897      	ldr	r0, [pc, #604]	; (10002bcc <CCU40_2_IRQHandler+0x308>)
10002970:	3201      	adds	r2, #1
10002972:	6804      	ldr	r4, [r0, #0]
10002974:	602a      	str	r2, [r5, #0]
10002976:	191b      	adds	r3, r3, r4
10002978:	6003      	str	r3, [r0, #0]
1000297a:	683b      	ldr	r3, [r7, #0]
1000297c:	489e      	ldr	r0, [pc, #632]	; (10002bf8 <CCU40_2_IRQHandler+0x334>)
1000297e:	b29b      	uxth	r3, r3
10002980:	520b      	strh	r3, [r1, r0]
10002982:	683c      	ldr	r4, [r7, #0]
10002984:	489d      	ldr	r0, [pc, #628]	; (10002bfc <CCU40_2_IRQHandler+0x338>)
10002986:	b21b      	sxth	r3, r3
10002988:	520c      	strh	r4, [r1, r0]
1000298a:	4991      	ldr	r1, [pc, #580]	; (10002bd0 <CCU40_2_IRQHandler+0x30c>)
1000298c:	6808      	ldr	r0, [r1, #0]
1000298e:	181b      	adds	r3, r3, r0
10002990:	600b      	str	r3, [r1, #0]
10002992:	e10f      	b.n	10002bb4 <CCU40_2_IRQHandler+0x2f0>
10002994:	4b91      	ldr	r3, [pc, #580]	; (10002bdc <CCU40_2_IRQHandler+0x318>)
10002996:	781b      	ldrb	r3, [r3, #0]
10002998:	2b00      	cmp	r3, #0
1000299a:	d10a      	bne.n	100029b2 <CCU40_2_IRQHandler+0xee>
1000299c:	4e90      	ldr	r6, [pc, #576]	; (10002be0 <CCU40_2_IRQHandler+0x31c>)
1000299e:	4b92      	ldr	r3, [pc, #584]	; (10002be8 <CCU40_2_IRQHandler+0x324>)
100029a0:	4f90      	ldr	r7, [pc, #576]	; (10002be4 <CCU40_2_IRQHandler+0x320>)
100029a2:	4892      	ldr	r0, [pc, #584]	; (10002bec <CCU40_2_IRQHandler+0x328>)
100029a4:	603e      	str	r6, [r7, #0]
100029a6:	601e      	str	r6, [r3, #0]
100029a8:	f7ff fd5c 	bl	10002464 <ADC_MEASUREMENT_StartConversion>
100029ac:	1c33      	adds	r3, r6, #0
100029ae:	4e8e      	ldr	r6, [pc, #568]	; (10002be8 <CCU40_2_IRQHandler+0x324>)
100029b0:	e00c      	b.n	100029cc <CCU40_2_IRQHandler+0x108>
100029b2:	2001      	movs	r0, #1
100029b4:	f7fe fc2a 	bl	1000120c <XMC_SCU_CLOCK_UngatePeripheralClock>
100029b8:	2001      	movs	r0, #1
100029ba:	f7fe fc3f 	bl	1000123c <XMC_SCU_CLOCK_IsPeripheralClockGated>
100029be:	2800      	cmp	r0, #0
100029c0:	d1fa      	bne.n	100029b8 <CCU40_2_IRQHandler+0xf4>
100029c2:	e7eb      	b.n	1000299c <CCU40_2_IRQHandler+0xd8>
100029c4:	6831      	ldr	r1, [r6, #0]
100029c6:	4a86      	ldr	r2, [pc, #536]	; (10002be0 <CCU40_2_IRQHandler+0x31c>)
100029c8:	4291      	cmp	r1, r2
100029ca:	d103      	bne.n	100029d4 <CCU40_2_IRQHandler+0x110>
100029cc:	683a      	ldr	r2, [r7, #0]
100029ce:	429a      	cmp	r2, r3
100029d0:	d0fc      	beq.n	100029cc <CCU40_2_IRQHandler+0x108>
100029d2:	e7f7      	b.n	100029c4 <CCU40_2_IRQHandler+0x100>
100029d4:	4b81      	ldr	r3, [pc, #516]	; (10002bdc <CCU40_2_IRQHandler+0x318>)
100029d6:	781b      	ldrb	r3, [r3, #0]
100029d8:	2b00      	cmp	r3, #0
100029da:	d002      	beq.n	100029e2 <CCU40_2_IRQHandler+0x11e>
100029dc:	2001      	movs	r0, #1
100029de:	f7fe fc01 	bl	100011e4 <XMC_SCU_CLOCK_GatePeripheralClock>
100029e2:	682a      	ldr	r2, [r5, #0]
100029e4:	683b      	ldr	r3, [r7, #0]
100029e6:	0050      	lsls	r0, r2, #1
100029e8:	683f      	ldr	r7, [r7, #0]
100029ea:	4a82      	ldr	r2, [pc, #520]	; (10002bf4 <CCU40_2_IRQHandler+0x330>)
100029ec:	4980      	ldr	r1, [pc, #512]	; (10002bf0 <CCU40_2_IRQHandler+0x32c>)
100029ee:	5287      	strh	r7, [r0, r2]
100029f0:	4a76      	ldr	r2, [pc, #472]	; (10002bcc <CCU40_2_IRQHandler+0x308>)
100029f2:	b29b      	uxth	r3, r3
100029f4:	6817      	ldr	r7, [r2, #0]
100029f6:	5243      	strh	r3, [r0, r1]
100029f8:	b21b      	sxth	r3, r3
100029fa:	19db      	adds	r3, r3, r7
100029fc:	6013      	str	r3, [r2, #0]
100029fe:	6833      	ldr	r3, [r6, #0]
10002a00:	4f7d      	ldr	r7, [pc, #500]	; (10002bf8 <CCU40_2_IRQHandler+0x334>)
10002a02:	b29b      	uxth	r3, r3
10002a04:	53c3      	strh	r3, [r0, r7]
10002a06:	6837      	ldr	r7, [r6, #0]
10002a08:	4e7c      	ldr	r6, [pc, #496]	; (10002bfc <CCU40_2_IRQHandler+0x338>)
10002a0a:	b21b      	sxth	r3, r3
10002a0c:	5387      	strh	r7, [r0, r6]
10002a0e:	4870      	ldr	r0, [pc, #448]	; (10002bd0 <CCU40_2_IRQHandler+0x30c>)
10002a10:	6806      	ldr	r6, [r0, #0]
10002a12:	199b      	adds	r3, r3, r6
10002a14:	6003      	str	r3, [r0, #0]
10002a16:	4b69      	ldr	r3, [pc, #420]	; (10002bbc <CCU40_2_IRQHandler+0x2f8>)
10002a18:	1c16      	adds	r6, r2, #0
10002a1a:	602b      	str	r3, [r5, #0]
10002a1c:	4b78      	ldr	r3, [pc, #480]	; (10002c00 <CCU40_2_IRQHandler+0x33c>)
10002a1e:	1c0d      	adds	r5, r1, #0
10002a20:	681b      	ldr	r3, [r3, #0]
10002a22:	2b00      	cmp	r3, #0
10002a24:	d000      	beq.n	10002a28 <CCU40_2_IRQHandler+0x164>
10002a26:	4798      	blx	r3
10002a28:	4b67      	ldr	r3, [pc, #412]	; (10002bc8 <CCU40_2_IRQHandler+0x304>)
10002a2a:	6818      	ldr	r0, [r3, #0]
10002a2c:	f7ff fa2c 	bl	10001e88 <TIMER_Stop>
10002a30:	4f74      	ldr	r7, [pc, #464]	; (10002c04 <CCU40_2_IRQHandler+0x340>)
10002a32:	6831      	ldr	r1, [r6, #0]
10002a34:	783a      	ldrb	r2, [r7, #0]
10002a36:	1c28      	adds	r0, r5, #0
10002a38:	f000 f922 	bl	10002c80 <lradarsense2gol_remove_mean>
10002a3c:	4e6e      	ldr	r6, [pc, #440]	; (10002bf8 <CCU40_2_IRQHandler+0x334>)
10002a3e:	4b64      	ldr	r3, [pc, #400]	; (10002bd0 <CCU40_2_IRQHandler+0x30c>)
10002a40:	783a      	ldrb	r2, [r7, #0]
10002a42:	6819      	ldr	r1, [r3, #0]
10002a44:	1c30      	adds	r0, r6, #0
10002a46:	f000 f91b 	bl	10002c80 <lradarsense2gol_remove_mean>
10002a4a:	1c28      	adds	r0, r5, #0
10002a4c:	6821      	ldr	r1, [r4, #0]
10002a4e:	f000 f927 	bl	10002ca0 <lradarsense2gol_window_hanning>
10002a52:	1c30      	adds	r0, r6, #0
10002a54:	6821      	ldr	r1, [r4, #0]
10002a56:	f000 f923 	bl	10002ca0 <lradarsense2gol_window_hanning>
10002a5a:	6823      	ldr	r3, [r4, #0]
10002a5c:	1c29      	adds	r1, r5, #0
10002a5e:	005b      	lsls	r3, r3, #1
10002a60:	1c1a      	adds	r2, r3, #0
10002a62:	4869      	ldr	r0, [pc, #420]	; (10002c08 <CCU40_2_IRQHandler+0x344>)
10002a64:	9305      	str	r3, [sp, #20]
10002a66:	f001 f883 	bl	10003b70 <memcpy>
10002a6a:	1c31      	adds	r1, r6, #0
10002a6c:	9a05      	ldr	r2, [sp, #20]
10002a6e:	4867      	ldr	r0, [pc, #412]	; (10002c0c <CCU40_2_IRQHandler+0x348>)
10002a70:	f001 f87e 	bl	10003b70 <memcpy>
10002a74:	4e66      	ldr	r6, [pc, #408]	; (10002c10 <CCU40_2_IRQHandler+0x34c>)
10002a76:	783a      	ldrb	r2, [r7, #0]
10002a78:	1c28      	adds	r0, r5, #0
10002a7a:	1c31      	adds	r1, r6, #0
10002a7c:	f000 f956 	bl	10002d2c <lradarsense2gol_fft>
10002a80:	4b64      	ldr	r3, [pc, #400]	; (10002c14 <CCU40_2_IRQHandler+0x350>)
10002a82:	9705      	str	r7, [sp, #20]
10002a84:	781b      	ldrb	r3, [r3, #0]
10002a86:	1c32      	adds	r2, r6, #0
10002a88:	2b00      	cmp	r3, #0
10002a8a:	d00a      	beq.n	10002aa2 <CCU40_2_IRQHandler+0x1de>
10002a8c:	2300      	movs	r3, #0
10002a8e:	842b      	strh	r3, [r5, #32]
10002a90:	8433      	strh	r3, [r6, #32]
10002a92:	846b      	strh	r3, [r5, #34]	; 0x22
10002a94:	8473      	strh	r3, [r6, #34]	; 0x22
10002a96:	84ab      	strh	r3, [r5, #36]	; 0x24
10002a98:	84b3      	strh	r3, [r6, #36]	; 0x24
10002a9a:	84eb      	strh	r3, [r5, #38]	; 0x26
10002a9c:	84f3      	strh	r3, [r6, #38]	; 0x26
10002a9e:	852b      	strh	r3, [r5, #40]	; 0x28
10002aa0:	8533      	strh	r3, [r6, #40]	; 0x28
10002aa2:	4b5d      	ldr	r3, [pc, #372]	; (10002c18 <CCU40_2_IRQHandler+0x354>)
10002aa4:	4952      	ldr	r1, [pc, #328]	; (10002bf0 <CCU40_2_IRQHandler+0x32c>)
10002aa6:	781b      	ldrb	r3, [r3, #0]
10002aa8:	2b00      	cmp	r3, #0
10002aaa:	d00a      	beq.n	10002ac2 <CCU40_2_IRQHandler+0x1fe>
10002aac:	2300      	movs	r3, #0
10002aae:	81cb      	strh	r3, [r1, #14]
10002ab0:	81d3      	strh	r3, [r2, #14]
10002ab2:	820b      	strh	r3, [r1, #16]
10002ab4:	8213      	strh	r3, [r2, #16]
10002ab6:	824b      	strh	r3, [r1, #18]
10002ab8:	8253      	strh	r3, [r2, #18]
10002aba:	828b      	strh	r3, [r1, #20]
10002abc:	8293      	strh	r3, [r2, #20]
10002abe:	82cb      	strh	r3, [r1, #22]
10002ac0:	82d3      	strh	r3, [r2, #22]
10002ac2:	6823      	ldr	r3, [r4, #0]
10002ac4:	4e55      	ldr	r6, [pc, #340]	; (10002c1c <CCU40_2_IRQHandler+0x358>)
10002ac6:	9300      	str	r3, [sp, #0]
10002ac8:	4b55      	ldr	r3, [pc, #340]	; (10002c20 <CCU40_2_IRQHandler+0x35c>)
10002aca:	af06      	add	r7, sp, #24
10002acc:	781b      	ldrb	r3, [r3, #0]
10002ace:	4d55      	ldr	r5, [pc, #340]	; (10002c24 <CCU40_2_IRQHandler+0x360>)
10002ad0:	9301      	str	r3, [sp, #4]
10002ad2:	1c38      	adds	r0, r7, #0
10002ad4:	1c33      	adds	r3, r6, #0
10002ad6:	f000 f9bb 	bl	10002e50 <lradarsense2gol_calc_mag>
10002ada:	1c2b      	adds	r3, r5, #0
10002adc:	1c3a      	adds	r2, r7, #0
10002ade:	ca03      	ldmia	r2!, {r0, r1}
10002ae0:	c303      	stmia	r3!, {r0, r1}
10002ae2:	4b51      	ldr	r3, [pc, #324]	; (10002c28 <CCU40_2_IRQHandler+0x364>)
10002ae4:	683a      	ldr	r2, [r7, #0]
10002ae6:	681b      	ldr	r3, [r3, #0]
10002ae8:	429a      	cmp	r2, r3
10002aea:	d92b      	bls.n	10002b44 <CCU40_2_IRQHandler+0x280>
10002aec:	9b05      	ldr	r3, [sp, #20]
10002aee:	4846      	ldr	r0, [pc, #280]	; (10002c08 <CCU40_2_IRQHandler+0x344>)
10002af0:	781a      	ldrb	r2, [r3, #0]
10002af2:	4b4b      	ldr	r3, [pc, #300]	; (10002c20 <CCU40_2_IRQHandler+0x35c>)
10002af4:	4945      	ldr	r1, [pc, #276]	; (10002c0c <CCU40_2_IRQHandler+0x348>)
10002af6:	781b      	ldrb	r3, [r3, #0]
10002af8:	9300      	str	r3, [sp, #0]
10002afa:	4b4c      	ldr	r3, [pc, #304]	; (10002c2c <CCU40_2_IRQHandler+0x368>)
10002afc:	f000 f9f6 	bl	10002eec <lradarsense2gol_calc_direction>
10002b00:	4b4b      	ldr	r3, [pc, #300]	; (10002c30 <CCU40_2_IRQHandler+0x36c>)
10002b02:	1c07      	adds	r7, r0, #0
10002b04:	681b      	ldr	r3, [r3, #0]
10002b06:	2b00      	cmp	r3, #0
10002b08:	d004      	beq.n	10002b14 <CCU40_2_IRQHandler+0x250>
10002b0a:	4a4a      	ldr	r2, [pc, #296]	; (10002c34 <CCU40_2_IRQHandler+0x370>)
10002b0c:	7812      	ldrb	r2, [r2, #0]
10002b0e:	2a00      	cmp	r2, #0
10002b10:	d100      	bne.n	10002b14 <CCU40_2_IRQHandler+0x250>
10002b12:	4798      	blx	r3
10002b14:	4b48      	ldr	r3, [pc, #288]	; (10002c38 <CCU40_2_IRQHandler+0x374>)
10002b16:	681b      	ldr	r3, [r3, #0]
10002b18:	469c      	mov	ip, r3
10002b1a:	2b00      	cmp	r3, #0
10002b1c:	d00d      	beq.n	10002b3a <CCU40_2_IRQHandler+0x276>
10002b1e:	6823      	ldr	r3, [r4, #0]
10002b20:	9701      	str	r7, [sp, #4]
10002b22:	0859      	lsrs	r1, r3, #1
10002b24:	b29b      	uxth	r3, r3
10002b26:	9300      	str	r3, [sp, #0]
10002b28:	682b      	ldr	r3, [r5, #0]
10002b2a:	b289      	uxth	r1, r1
10002b2c:	9302      	str	r3, [sp, #8]
10002b2e:	686b      	ldr	r3, [r5, #4]
10002b30:	1c30      	adds	r0, r6, #0
10002b32:	9303      	str	r3, [sp, #12]
10002b34:	4a2f      	ldr	r2, [pc, #188]	; (10002bf4 <CCU40_2_IRQHandler+0x330>)
10002b36:	4b31      	ldr	r3, [pc, #196]	; (10002bfc <CCU40_2_IRQHandler+0x338>)
10002b38:	47e0      	blx	ip
10002b3a:	4b40      	ldr	r3, [pc, #256]	; (10002c3c <CCU40_2_IRQHandler+0x378>)
10002b3c:	781a      	ldrb	r2, [r3, #0]
10002b3e:	4b3d      	ldr	r3, [pc, #244]	; (10002c34 <CCU40_2_IRQHandler+0x370>)
10002b40:	701a      	strb	r2, [r3, #0]
10002b42:	e022      	b.n	10002b8a <CCU40_2_IRQHandler+0x2c6>
10002b44:	4b3a      	ldr	r3, [pc, #232]	; (10002c30 <CCU40_2_IRQHandler+0x36c>)
10002b46:	681b      	ldr	r3, [r3, #0]
10002b48:	2b00      	cmp	r3, #0
10002b4a:	d005      	beq.n	10002b58 <CCU40_2_IRQHandler+0x294>
10002b4c:	4a39      	ldr	r2, [pc, #228]	; (10002c34 <CCU40_2_IRQHandler+0x370>)
10002b4e:	7812      	ldrb	r2, [r2, #0]
10002b50:	2a01      	cmp	r2, #1
10002b52:	d101      	bne.n	10002b58 <CCU40_2_IRQHandler+0x294>
10002b54:	2002      	movs	r0, #2
10002b56:	4798      	blx	r3
10002b58:	4b37      	ldr	r3, [pc, #220]	; (10002c38 <CCU40_2_IRQHandler+0x374>)
10002b5a:	681f      	ldr	r7, [r3, #0]
10002b5c:	2f00      	cmp	r7, #0
10002b5e:	d00e      	beq.n	10002b7e <CCU40_2_IRQHandler+0x2ba>
10002b60:	6823      	ldr	r3, [r4, #0]
10002b62:	1c30      	adds	r0, r6, #0
10002b64:	0859      	lsrs	r1, r3, #1
10002b66:	b29b      	uxth	r3, r3
10002b68:	9300      	str	r3, [sp, #0]
10002b6a:	2302      	movs	r3, #2
10002b6c:	9301      	str	r3, [sp, #4]
10002b6e:	682b      	ldr	r3, [r5, #0]
10002b70:	b289      	uxth	r1, r1
10002b72:	9302      	str	r3, [sp, #8]
10002b74:	686b      	ldr	r3, [r5, #4]
10002b76:	4a1f      	ldr	r2, [pc, #124]	; (10002bf4 <CCU40_2_IRQHandler+0x330>)
10002b78:	9303      	str	r3, [sp, #12]
10002b7a:	4b20      	ldr	r3, [pc, #128]	; (10002bfc <CCU40_2_IRQHandler+0x338>)
10002b7c:	47b8      	blx	r7
10002b7e:	4a2d      	ldr	r2, [pc, #180]	; (10002c34 <CCU40_2_IRQHandler+0x370>)
10002b80:	7813      	ldrb	r3, [r2, #0]
10002b82:	2b00      	cmp	r3, #0
10002b84:	d001      	beq.n	10002b8a <CCU40_2_IRQHandler+0x2c6>
10002b86:	3b01      	subs	r3, #1
10002b88:	7013      	strb	r3, [r2, #0]
10002b8a:	23d1      	movs	r3, #209	; 0xd1
10002b8c:	2004      	movs	r0, #4
10002b8e:	4a0c      	ldr	r2, [pc, #48]	; (10002bc0 <CCU40_2_IRQHandler+0x2fc>)
10002b90:	011b      	lsls	r3, r3, #4
10002b92:	58d1      	ldr	r1, [r2, r3]
10002b94:	4301      	orrs	r1, r0
10002b96:	50d1      	str	r1, [r2, r3]
10002b98:	58d1      	ldr	r1, [r2, r3]
10002b9a:	3802      	subs	r0, #2
10002b9c:	4381      	bics	r1, r0
10002b9e:	50d1      	str	r1, [r2, r3]
10002ba0:	4927      	ldr	r1, [pc, #156]	; (10002c40 <CCU40_2_IRQHandler+0x37c>)
10002ba2:	7809      	ldrb	r1, [r1, #0]
10002ba4:	2900      	cmp	r1, #0
10002ba6:	d003      	beq.n	10002bb0 <CCU40_2_IRQHandler+0x2ec>
10002ba8:	58d1      	ldr	r1, [r2, r3]
10002baa:	4381      	bics	r1, r0
10002bac:	50d1      	str	r1, [r2, r3]
10002bae:	e001      	b.n	10002bb4 <CCU40_2_IRQHandler+0x2f0>
10002bb0:	4b08      	ldr	r3, [pc, #32]	; (10002bd4 <CCU40_2_IRQHandler+0x310>)
10002bb2:	7019      	strb	r1, [r3, #0]
10002bb4:	b009      	add	sp, #36	; 0x24
10002bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002bb8:	2000066c 	.word	0x2000066c
10002bbc:	000003e7 	.word	0x000003e7
10002bc0:	e000e000 	.word	0xe000e000
10002bc4:	20000c9c 	.word	0x20000c9c
10002bc8:	20000cb8 	.word	0x20000cb8
10002bcc:	20000cc8 	.word	0x20000cc8
10002bd0:	20000ccc 	.word	0x20000ccc
10002bd4:	20000cbc 	.word	0x20000cbc
10002bd8:	20000cd8 	.word	0x20000cd8
10002bdc:	20000c98 	.word	0x20000c98
10002be0:	0000ffff 	.word	0x0000ffff
10002be4:	20000668 	.word	0x20000668
10002be8:	20000664 	.word	0x20000664
10002bec:	200005e0 	.word	0x200005e0
10002bf0:	20000eec 	.word	0x20000eec
10002bf4:	200014ec 	.word	0x200014ec
10002bf8:	20001cec 	.word	0x20001cec
10002bfc:	200018ec 	.word	0x200018ec
10002c00:	20000cb0 	.word	0x20000cb0
10002c04:	20000cae 	.word	0x20000cae
10002c08:	20001eec 	.word	0x20001eec
10002c0c:	20000cec 	.word	0x20000cec
10002c10:	200016ec 	.word	0x200016ec
10002c14:	20000cbd 	.word	0x20000cbd
10002c18:	20000cac 	.word	0x20000cac
10002c1c:	20001aec 	.word	0x20001aec
10002c20:	20000cdc 	.word	0x20000cdc
10002c24:	20000cd0 	.word	0x20000cd0
10002c28:	20000ce0 	.word	0x20000ce0
10002c2c:	200010ec 	.word	0x200010ec
10002c30:	20000ca4 	.word	0x20000ca4
10002c34:	20000ca0 	.word	0x20000ca0
10002c38:	20000cc0 	.word	0x20000cc0
10002c3c:	20000cad 	.word	0x20000cad
10002c40:	20000ca1 	.word	0x20000ca1

10002c44 <RTC_ISR>:
10002c44:	b508      	push	{r3, lr}
10002c46:	4b03      	ldr	r3, [pc, #12]	; (10002c54 <RTC_ISR+0x10>)
10002c48:	781b      	ldrb	r3, [r3, #0]
10002c4a:	2b00      	cmp	r3, #0
10002c4c:	d101      	bne.n	10002c52 <RTC_ISR+0xe>
10002c4e:	f7ff fe39 	bl	100028c4 <CCU40_2_IRQHandler>
10002c52:	bd08      	pop	{r3, pc}
10002c54:	20000cbc 	.word	0x20000cbc

10002c58 <VADC0_C0_0_IRQHandler>:
10002c58:	b508      	push	{r3, lr}
10002c5a:	4805      	ldr	r0, [pc, #20]	; (10002c70 <VADC0_C0_0_IRQHandler+0x18>)
10002c5c:	f7ff fc0c 	bl	10002478 <ADC_MEASUREMENT_GetResult>
10002c60:	4b04      	ldr	r3, [pc, #16]	; (10002c74 <VADC0_C0_0_IRQHandler+0x1c>)
10002c62:	6018      	str	r0, [r3, #0]
10002c64:	4804      	ldr	r0, [pc, #16]	; (10002c78 <VADC0_C0_0_IRQHandler+0x20>)
10002c66:	f7ff fc07 	bl	10002478 <ADC_MEASUREMENT_GetResult>
10002c6a:	4b04      	ldr	r3, [pc, #16]	; (10002c7c <VADC0_C0_0_IRQHandler+0x24>)
10002c6c:	6018      	str	r0, [r3, #0]
10002c6e:	bd08      	pop	{r3, pc}
10002c70:	200005d0 	.word	0x200005d0
10002c74:	20000668 	.word	0x20000668
10002c78:	2000061c 	.word	0x2000061c
10002c7c:	20000664 	.word	0x20000664

10002c80 <lradarsense2gol_remove_mean>:
10002c80:	b510      	push	{r4, lr}
10002c82:	2401      	movs	r4, #1
10002c84:	40d1      	lsrs	r1, r2
10002c86:	4094      	lsls	r4, r2
10002c88:	2300      	movs	r3, #0
10002c8a:	b2a2      	uxth	r2, r4
10002c8c:	4293      	cmp	r3, r2
10002c8e:	da05      	bge.n	10002c9c <lradarsense2gol_remove_mean+0x1c>
10002c90:	8802      	ldrh	r2, [r0, #0]
10002c92:	3301      	adds	r3, #1
10002c94:	1a52      	subs	r2, r2, r1
10002c96:	8002      	strh	r2, [r0, #0]
10002c98:	3002      	adds	r0, #2
10002c9a:	e7f6      	b.n	10002c8a <lradarsense2gol_remove_mean+0xa>
10002c9c:	bd10      	pop	{r4, pc}
	...

10002ca0 <lradarsense2gol_window_hanning>:
10002ca0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10002ca2:	1c04      	adds	r4, r0, #0
10002ca4:	2080      	movs	r0, #128	; 0x80
10002ca6:	0040      	lsls	r0, r0, #1
10002ca8:	1c0d      	adds	r5, r1, #0
10002caa:	f7fe fc11 	bl	100014d0 <__aeabi_idiv>
10002cae:	1c26      	adds	r6, r4, #0
10002cb0:	2700      	movs	r7, #0
10002cb2:	4a1d      	ldr	r2, [pc, #116]	; (10002d28 <lradarsense2gol_window_hanning+0x88>)
10002cb4:	1069      	asrs	r1, r5, #1
10002cb6:	3280      	adds	r2, #128	; 0x80
10002cb8:	0045      	lsls	r5, r0, #1
10002cba:	9200      	str	r2, [sp, #0]
10002cbc:	428f      	cmp	r7, r1
10002cbe:	da14      	bge.n	10002cea <lradarsense2gol_window_hanning+0x4a>
10002cc0:	2200      	movs	r2, #0
10002cc2:	5eb3      	ldrsh	r3, [r6, r2]
10002cc4:	3701      	adds	r7, #1
10002cc6:	9301      	str	r3, [sp, #4]
10002cc8:	9b00      	ldr	r3, [sp, #0]
10002cca:	2200      	movs	r2, #0
10002ccc:	5e9b      	ldrsh	r3, [r3, r2]
10002cce:	469c      	mov	ip, r3
10002cd0:	2380      	movs	r3, #128	; 0x80
10002cd2:	4662      	mov	r2, ip
10002cd4:	01db      	lsls	r3, r3, #7
10002cd6:	1a9b      	subs	r3, r3, r2
10002cd8:	9a01      	ldr	r2, [sp, #4]
10002cda:	4353      	muls	r3, r2
10002cdc:	13db      	asrs	r3, r3, #15
10002cde:	8033      	strh	r3, [r6, #0]
10002ce0:	9b00      	ldr	r3, [sp, #0]
10002ce2:	3602      	adds	r6, #2
10002ce4:	195b      	adds	r3, r3, r5
10002ce6:	9300      	str	r3, [sp, #0]
10002ce8:	e7e8      	b.n	10002cbc <lradarsense2gol_window_hanning+0x1c>
10002cea:	43cb      	mvns	r3, r1
10002cec:	2600      	movs	r6, #0
10002cee:	17db      	asrs	r3, r3, #31
10002cf0:	400b      	ands	r3, r1
10002cf2:	4358      	muls	r0, r3
10002cf4:	005a      	lsls	r2, r3, #1
10002cf6:	18a4      	adds	r4, r4, r2
10002cf8:	3040      	adds	r0, #64	; 0x40
10002cfa:	4a0b      	ldr	r2, [pc, #44]	; (10002d28 <lradarsense2gol_window_hanning+0x88>)
10002cfc:	0040      	lsls	r0, r0, #1
10002cfe:	0049      	lsls	r1, r1, #1
10002d00:	426d      	negs	r5, r5
10002d02:	1810      	adds	r0, r2, r0
10002d04:	1976      	adds	r6, r6, r5
10002d06:	428b      	cmp	r3, r1
10002d08:	da0d      	bge.n	10002d26 <lradarsense2gol_window_hanning+0x86>
10002d0a:	2700      	movs	r7, #0
10002d0c:	5fe2      	ldrsh	r2, [r4, r7]
10002d0e:	3301      	adds	r3, #1
10002d10:	4694      	mov	ip, r2
10002d12:	5f82      	ldrsh	r2, [r0, r6]
10002d14:	2780      	movs	r7, #128	; 0x80
10002d16:	01ff      	lsls	r7, r7, #7
10002d18:	1aba      	subs	r2, r7, r2
10002d1a:	4667      	mov	r7, ip
10002d1c:	437a      	muls	r2, r7
10002d1e:	13d2      	asrs	r2, r2, #15
10002d20:	8022      	strh	r2, [r4, #0]
10002d22:	3402      	adds	r4, #2
10002d24:	e7ee      	b.n	10002d04 <lradarsense2gol_window_hanning+0x64>
10002d26:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10002d28:	20000670 	.word	0x20000670

10002d2c <lradarsense2gol_fft>:
10002d2c:	2301      	movs	r3, #1
10002d2e:	b5f0      	push	{r4, r5, r6, r7, lr}
10002d30:	b08b      	sub	sp, #44	; 0x2c
10002d32:	9102      	str	r1, [sp, #8]
10002d34:	1c19      	adds	r1, r3, #0
10002d36:	4091      	lsls	r1, r2
10002d38:	2200      	movs	r2, #0
10002d3a:	468c      	mov	ip, r1
10002d3c:	9001      	str	r0, [sp, #4]
10002d3e:	1e4c      	subs	r4, r1, #1
10002d40:	42a3      	cmp	r3, r4
10002d42:	dc20      	bgt.n	10002d86 <lradarsense2gol_fft+0x5a>
10002d44:	4661      	mov	r1, ip
10002d46:	1049      	asrs	r1, r1, #1
10002d48:	1850      	adds	r0, r2, r1
10002d4a:	42a0      	cmp	r0, r4
10002d4c:	dcfb      	bgt.n	10002d46 <lradarsense2gol_fft+0x1a>
10002d4e:	1e48      	subs	r0, r1, #1
10002d50:	4002      	ands	r2, r0
10002d52:	1852      	adds	r2, r2, r1
10002d54:	429a      	cmp	r2, r3
10002d56:	dd14      	ble.n	10002d82 <lradarsense2gol_fft+0x56>
10002d58:	9901      	ldr	r1, [sp, #4]
10002d5a:	0058      	lsls	r0, r3, #1
10002d5c:	5a09      	ldrh	r1, [r1, r0]
10002d5e:	9d01      	ldr	r5, [sp, #4]
10002d60:	9100      	str	r1, [sp, #0]
10002d62:	0051      	lsls	r1, r2, #1
10002d64:	186d      	adds	r5, r5, r1
10002d66:	882f      	ldrh	r7, [r5, #0]
10002d68:	9e01      	ldr	r6, [sp, #4]
10002d6a:	5237      	strh	r7, [r6, r0]
10002d6c:	466e      	mov	r6, sp
10002d6e:	8836      	ldrh	r6, [r6, #0]
10002d70:	9f02      	ldr	r7, [sp, #8]
10002d72:	802e      	strh	r6, [r5, #0]
10002d74:	9e02      	ldr	r6, [sp, #8]
10002d76:	9d02      	ldr	r5, [sp, #8]
10002d78:	1871      	adds	r1, r6, r1
10002d7a:	5a2d      	ldrh	r5, [r5, r0]
10002d7c:	880e      	ldrh	r6, [r1, #0]
10002d7e:	523e      	strh	r6, [r7, r0]
10002d80:	800d      	strh	r5, [r1, #0]
10002d82:	3301      	adds	r3, #1
10002d84:	e7dc      	b.n	10002d40 <lradarsense2gol_fft+0x14>
10002d86:	2307      	movs	r3, #7
10002d88:	9303      	str	r3, [sp, #12]
10002d8a:	3b06      	subs	r3, #6
10002d8c:	9300      	str	r3, [sp, #0]
10002d8e:	9b00      	ldr	r3, [sp, #0]
10002d90:	4563      	cmp	r3, ip
10002d92:	da59      	bge.n	10002e48 <lradarsense2gol_fft+0x11c>
10002d94:	2400      	movs	r4, #0
10002d96:	9b00      	ldr	r3, [sp, #0]
10002d98:	005e      	lsls	r6, r3, #1
10002d9a:	009b      	lsls	r3, r3, #2
10002d9c:	9305      	str	r3, [sp, #20]
10002d9e:	9b00      	ldr	r3, [sp, #0]
10002da0:	429c      	cmp	r4, r3
10002da2:	da4c      	bge.n	10002e3e <lradarsense2gol_fft+0x112>
10002da4:	1c23      	adds	r3, r4, #0
10002da6:	9a03      	ldr	r2, [sp, #12]
10002da8:	4928      	ldr	r1, [pc, #160]	; (10002e4c <lradarsense2gol_fft+0x120>)
10002daa:	4093      	lsls	r3, r2
10002dac:	1c1a      	adds	r2, r3, #0
10002dae:	005b      	lsls	r3, r3, #1
10002db0:	5a5b      	ldrh	r3, [r3, r1]
10002db2:	3240      	adds	r2, #64	; 0x40
10002db4:	0052      	lsls	r2, r2, #1
10002db6:	425b      	negs	r3, r3
10002db8:	5a52      	ldrh	r2, [r2, r1]
10002dba:	b29b      	uxth	r3, r3
10002dbc:	9309      	str	r3, [sp, #36]	; 0x24
10002dbe:	9b01      	ldr	r3, [sp, #4]
10002dc0:	9208      	str	r2, [sp, #32]
10002dc2:	0062      	lsls	r2, r4, #1
10002dc4:	1898      	adds	r0, r3, r2
10002dc6:	9b02      	ldr	r3, [sp, #8]
10002dc8:	9404      	str	r4, [sp, #16]
10002dca:	189a      	adds	r2, r3, r2
10002dcc:	466b      	mov	r3, sp
10002dce:	2120      	movs	r1, #32
10002dd0:	5e59      	ldrsh	r1, [r3, r1]
10002dd2:	5f85      	ldrsh	r5, [r0, r6]
10002dd4:	466b      	mov	r3, sp
10002dd6:	9107      	str	r1, [sp, #28]
10002dd8:	2724      	movs	r7, #36	; 0x24
10002dda:	5fdf      	ldrsh	r7, [r3, r7]
10002ddc:	5f93      	ldrsh	r3, [r2, r6]
10002dde:	9907      	ldr	r1, [sp, #28]
10002de0:	9306      	str	r3, [sp, #24]
10002de2:	4369      	muls	r1, r5
10002de4:	13cb      	asrs	r3, r1, #15
10002de6:	9906      	ldr	r1, [sp, #24]
10002de8:	437d      	muls	r5, r7
10002dea:	4379      	muls	r1, r7
10002dec:	13c9      	asrs	r1, r1, #15
10002dee:	9f07      	ldr	r7, [sp, #28]
10002df0:	1a59      	subs	r1, r3, r1
10002df2:	9b06      	ldr	r3, [sp, #24]
10002df4:	13ed      	asrs	r5, r5, #15
10002df6:	437b      	muls	r3, r7
10002df8:	13db      	asrs	r3, r3, #15
10002dfa:	18ed      	adds	r5, r5, r3
10002dfc:	2700      	movs	r7, #0
10002dfe:	5fc3      	ldrsh	r3, [r0, r7]
10002e00:	b289      	uxth	r1, r1
10002e02:	105b      	asrs	r3, r3, #1
10002e04:	1a5b      	subs	r3, r3, r1
10002e06:	5383      	strh	r3, [r0, r6]
10002e08:	2700      	movs	r7, #0
10002e0a:	5fd3      	ldrsh	r3, [r2, r7]
10002e0c:	b2ad      	uxth	r5, r5
10002e0e:	105b      	asrs	r3, r3, #1
10002e10:	1b5b      	subs	r3, r3, r5
10002e12:	5393      	strh	r3, [r2, r6]
10002e14:	2700      	movs	r7, #0
10002e16:	5fc3      	ldrsh	r3, [r0, r7]
10002e18:	105b      	asrs	r3, r3, #1
10002e1a:	18c9      	adds	r1, r1, r3
10002e1c:	8001      	strh	r1, [r0, #0]
10002e1e:	2300      	movs	r3, #0
10002e20:	5ed7      	ldrsh	r7, [r2, r3]
10002e22:	9b04      	ldr	r3, [sp, #16]
10002e24:	107f      	asrs	r7, r7, #1
10002e26:	199b      	adds	r3, r3, r6
10002e28:	9304      	str	r3, [sp, #16]
10002e2a:	9b05      	ldr	r3, [sp, #20]
10002e2c:	19ed      	adds	r5, r5, r7
10002e2e:	8015      	strh	r5, [r2, #0]
10002e30:	18c0      	adds	r0, r0, r3
10002e32:	18d2      	adds	r2, r2, r3
10002e34:	9b04      	ldr	r3, [sp, #16]
10002e36:	4563      	cmp	r3, ip
10002e38:	dbc8      	blt.n	10002dcc <lradarsense2gol_fft+0xa0>
10002e3a:	3401      	adds	r4, #1
10002e3c:	e7af      	b.n	10002d9e <lradarsense2gol_fft+0x72>
10002e3e:	9b03      	ldr	r3, [sp, #12]
10002e40:	9600      	str	r6, [sp, #0]
10002e42:	3b01      	subs	r3, #1
10002e44:	9303      	str	r3, [sp, #12]
10002e46:	e7a2      	b.n	10002d8e <lradarsense2gol_fft+0x62>
10002e48:	b00b      	add	sp, #44	; 0x2c
10002e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002e4c:	20000670 	.word	0x20000670

10002e50 <lradarsense2gol_calc_mag>:
10002e50:	b5f0      	push	{r4, r5, r6, r7, lr}
10002e52:	b085      	sub	sp, #20
10002e54:	9102      	str	r1, [sp, #8]
10002e56:	2100      	movs	r1, #0
10002e58:	469c      	mov	ip, r3
10002e5a:	ab0a      	add	r3, sp, #40	; 0x28
10002e5c:	9203      	str	r2, [sp, #12]
10002e5e:	cb04      	ldmia	r3!, {r2}
10002e60:	1c0e      	adds	r6, r1, #0
10002e62:	781b      	ldrb	r3, [r3, #0]
10002e64:	0852      	lsrs	r2, r2, #1
10002e66:	9201      	str	r2, [sp, #4]
10002e68:	1c0c      	adds	r4, r1, #0
10002e6a:	1c0f      	adds	r7, r1, #0
10002e6c:	2b01      	cmp	r3, #1
10002e6e:	d136      	bne.n	10002ede <lradarsense2gol_calc_mag+0x8e>
10002e70:	9b01      	ldr	r3, [sp, #4]
10002e72:	429f      	cmp	r7, r3
10002e74:	d036      	beq.n	10002ee4 <lradarsense2gol_calc_mag+0x94>
10002e76:	9a02      	ldr	r2, [sp, #8]
10002e78:	007b      	lsls	r3, r7, #1
10002e7a:	5ed2      	ldrsh	r2, [r2, r3]
10002e7c:	9c03      	ldr	r4, [sp, #12]
10002e7e:	5ee3      	ldrsh	r3, [r4, r3]
10002e80:	1c14      	adds	r4, r2, #0
10002e82:	435b      	muls	r3, r3
10002e84:	4354      	muls	r4, r2
10002e86:	18e2      	adds	r2, r4, r3
10002e88:	2480      	movs	r4, #128	; 0x80
10002e8a:	05e4      	lsls	r4, r4, #23
10002e8c:	4294      	cmp	r4, r2
10002e8e:	d901      	bls.n	10002e94 <lradarsense2gol_calc_mag+0x44>
10002e90:	08a4      	lsrs	r4, r4, #2
10002e92:	e7fb      	b.n	10002e8c <lradarsense2gol_calc_mag+0x3c>
10002e94:	2500      	movs	r5, #0
10002e96:	2c00      	cmp	r4, #0
10002e98:	d007      	beq.n	10002eaa <lradarsense2gol_calc_mag+0x5a>
10002e9a:	1963      	adds	r3, r4, r5
10002e9c:	429a      	cmp	r2, r3
10002e9e:	d301      	bcc.n	10002ea4 <lradarsense2gol_calc_mag+0x54>
10002ea0:	1ad2      	subs	r2, r2, r3
10002ea2:	191d      	adds	r5, r3, r4
10002ea4:	086d      	lsrs	r5, r5, #1
10002ea6:	08a4      	lsrs	r4, r4, #2
10002ea8:	e7f5      	b.n	10002e96 <lradarsense2gol_calc_mag+0x46>
10002eaa:	4662      	mov	r2, ip
10002eac:	00bb      	lsls	r3, r7, #2
10002eae:	50d5      	str	r5, [r2, r3]
10002eb0:	42b5      	cmp	r5, r6
10002eb2:	d901      	bls.n	10002eb8 <lradarsense2gol_calc_mag+0x68>
10002eb4:	1c39      	adds	r1, r7, #0
10002eb6:	1c2e      	adds	r6, r5, #0
10002eb8:	3701      	adds	r7, #1
10002eba:	e7d9      	b.n	10002e70 <lradarsense2gol_calc_mag+0x20>
10002ebc:	9b02      	ldr	r3, [sp, #8]
10002ebe:	0062      	lsls	r2, r4, #1
10002ec0:	5e9b      	ldrsh	r3, [r3, r2]
10002ec2:	9d03      	ldr	r5, [sp, #12]
10002ec4:	5eaa      	ldrsh	r2, [r5, r2]
10002ec6:	1c1d      	adds	r5, r3, #0
10002ec8:	4352      	muls	r2, r2
10002eca:	435d      	muls	r5, r3
10002ecc:	18ab      	adds	r3, r5, r2
10002ece:	4665      	mov	r5, ip
10002ed0:	00a2      	lsls	r2, r4, #2
10002ed2:	50ab      	str	r3, [r5, r2]
10002ed4:	42b3      	cmp	r3, r6
10002ed6:	d901      	bls.n	10002edc <lradarsense2gol_calc_mag+0x8c>
10002ed8:	1c21      	adds	r1, r4, #0
10002eda:	1c1e      	adds	r6, r3, #0
10002edc:	3401      	adds	r4, #1
10002ede:	9b01      	ldr	r3, [sp, #4]
10002ee0:	429c      	cmp	r4, r3
10002ee2:	d1eb      	bne.n	10002ebc <lradarsense2gol_calc_mag+0x6c>
10002ee4:	6006      	str	r6, [r0, #0]
10002ee6:	6041      	str	r1, [r0, #4]
10002ee8:	b005      	add	sp, #20
10002eea:	bdf0      	pop	{r4, r5, r6, r7, pc}

10002eec <lradarsense2gol_calc_direction>:
10002eec:	b5f0      	push	{r4, r5, r6, r7, lr}
10002eee:	2401      	movs	r4, #1
10002ef0:	b087      	sub	sp, #28
10002ef2:	9302      	str	r3, [sp, #8]
10002ef4:	ab0c      	add	r3, sp, #48	; 0x30
10002ef6:	781b      	ldrb	r3, [r3, #0]
10002ef8:	1c15      	adds	r5, r2, #0
10002efa:	1c07      	adds	r7, r0, #0
10002efc:	1c0e      	adds	r6, r1, #0
10002efe:	9303      	str	r3, [sp, #12]
10002f00:	f7ff ff14 	bl	10002d2c <lradarsense2gol_fft>
10002f04:	1c22      	adds	r2, r4, #0
10002f06:	1c6b      	adds	r3, r5, #1
10002f08:	409a      	lsls	r2, r3
10002f0a:	40ac      	lsls	r4, r5
10002f0c:	9b03      	ldr	r3, [sp, #12]
10002f0e:	9200      	str	r2, [sp, #0]
10002f10:	9301      	str	r3, [sp, #4]
10002f12:	a804      	add	r0, sp, #16
10002f14:	1c39      	adds	r1, r7, #0
10002f16:	1c32      	adds	r2, r6, #0
10002f18:	9b02      	ldr	r3, [sp, #8]
10002f1a:	f7ff ff99 	bl	10002e50 <lradarsense2gol_calc_mag>
10002f1e:	9805      	ldr	r0, [sp, #20]
10002f20:	0864      	lsrs	r4, r4, #1
10002f22:	42a0      	cmp	r0, r4
10002f24:	41a4      	sbcs	r4, r4
10002f26:	4260      	negs	r0, r4
10002f28:	b007      	add	sp, #28
10002f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

10002f2c <__aeabi_cfrcmple>:
10002f2c:	4684      	mov	ip, r0
10002f2e:	1c08      	adds	r0, r1, #0
10002f30:	4661      	mov	r1, ip
10002f32:	e7ff      	b.n	10002f34 <__aeabi_cfcmpeq>

10002f34 <__aeabi_cfcmpeq>:
10002f34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10002f36:	f000 fa5f 	bl	100033f8 <__lesf2>
10002f3a:	2800      	cmp	r0, #0
10002f3c:	d401      	bmi.n	10002f42 <__aeabi_cfcmpeq+0xe>
10002f3e:	2100      	movs	r1, #0
10002f40:	42c8      	cmn	r0, r1
10002f42:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10002f44 <__aeabi_fcmpeq>:
10002f44:	b510      	push	{r4, lr}
10002f46:	f000 f9e3 	bl	10003310 <__eqsf2>
10002f4a:	4240      	negs	r0, r0
10002f4c:	3001      	adds	r0, #1
10002f4e:	bd10      	pop	{r4, pc}

10002f50 <__aeabi_fcmplt>:
10002f50:	b510      	push	{r4, lr}
10002f52:	f000 fa51 	bl	100033f8 <__lesf2>
10002f56:	2800      	cmp	r0, #0
10002f58:	db01      	blt.n	10002f5e <__aeabi_fcmplt+0xe>
10002f5a:	2000      	movs	r0, #0
10002f5c:	bd10      	pop	{r4, pc}
10002f5e:	2001      	movs	r0, #1
10002f60:	bd10      	pop	{r4, pc}
10002f62:	46c0      	nop			; (mov r8, r8)

10002f64 <__aeabi_fcmple>:
10002f64:	b510      	push	{r4, lr}
10002f66:	f000 fa47 	bl	100033f8 <__lesf2>
10002f6a:	2800      	cmp	r0, #0
10002f6c:	dd01      	ble.n	10002f72 <__aeabi_fcmple+0xe>
10002f6e:	2000      	movs	r0, #0
10002f70:	bd10      	pop	{r4, pc}
10002f72:	2001      	movs	r0, #1
10002f74:	bd10      	pop	{r4, pc}
10002f76:	46c0      	nop			; (mov r8, r8)

10002f78 <__aeabi_fcmpgt>:
10002f78:	b510      	push	{r4, lr}
10002f7a:	f000 f9f3 	bl	10003364 <__gesf2>
10002f7e:	2800      	cmp	r0, #0
10002f80:	dc01      	bgt.n	10002f86 <__aeabi_fcmpgt+0xe>
10002f82:	2000      	movs	r0, #0
10002f84:	bd10      	pop	{r4, pc}
10002f86:	2001      	movs	r0, #1
10002f88:	bd10      	pop	{r4, pc}
10002f8a:	46c0      	nop			; (mov r8, r8)

10002f8c <__aeabi_fcmpge>:
10002f8c:	b510      	push	{r4, lr}
10002f8e:	f000 f9e9 	bl	10003364 <__gesf2>
10002f92:	2800      	cmp	r0, #0
10002f94:	da01      	bge.n	10002f9a <__aeabi_fcmpge+0xe>
10002f96:	2000      	movs	r0, #0
10002f98:	bd10      	pop	{r4, pc}
10002f9a:	2001      	movs	r0, #1
10002f9c:	bd10      	pop	{r4, pc}
10002f9e:	46c0      	nop			; (mov r8, r8)

10002fa0 <__aeabi_uldivmod>:
10002fa0:	2b00      	cmp	r3, #0
10002fa2:	d111      	bne.n	10002fc8 <__aeabi_uldivmod+0x28>
10002fa4:	2a00      	cmp	r2, #0
10002fa6:	d10f      	bne.n	10002fc8 <__aeabi_uldivmod+0x28>
10002fa8:	2900      	cmp	r1, #0
10002faa:	d100      	bne.n	10002fae <__aeabi_uldivmod+0xe>
10002fac:	2800      	cmp	r0, #0
10002fae:	d002      	beq.n	10002fb6 <__aeabi_uldivmod+0x16>
10002fb0:	2100      	movs	r1, #0
10002fb2:	43c9      	mvns	r1, r1
10002fb4:	1c08      	adds	r0, r1, #0
10002fb6:	b407      	push	{r0, r1, r2}
10002fb8:	4802      	ldr	r0, [pc, #8]	; (10002fc4 <__aeabi_uldivmod+0x24>)
10002fba:	a102      	add	r1, pc, #8	; (adr r1, 10002fc4 <__aeabi_uldivmod+0x24>)
10002fbc:	1840      	adds	r0, r0, r1
10002fbe:	9002      	str	r0, [sp, #8]
10002fc0:	bd03      	pop	{r0, r1, pc}
10002fc2:	46c0      	nop			; (mov r8, r8)
10002fc4:	000007b5 	.word	0x000007b5
10002fc8:	b403      	push	{r0, r1}
10002fca:	4668      	mov	r0, sp
10002fcc:	b501      	push	{r0, lr}
10002fce:	9802      	ldr	r0, [sp, #8]
10002fd0:	f000 f84c 	bl	1000306c <__gnu_uldivmod_helper>
10002fd4:	9b01      	ldr	r3, [sp, #4]
10002fd6:	469e      	mov	lr, r3
10002fd8:	b002      	add	sp, #8
10002fda:	bc0c      	pop	{r2, r3}
10002fdc:	4770      	bx	lr
10002fde:	46c0      	nop			; (mov r8, r8)

10002fe0 <__aeabi_lmul>:
10002fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
10002fe2:	464f      	mov	r7, r9
10002fe4:	4646      	mov	r6, r8
10002fe6:	0405      	lsls	r5, r0, #16
10002fe8:	0c2d      	lsrs	r5, r5, #16
10002fea:	1c2c      	adds	r4, r5, #0
10002fec:	b4c0      	push	{r6, r7}
10002fee:	0417      	lsls	r7, r2, #16
10002ff0:	0c16      	lsrs	r6, r2, #16
10002ff2:	0c3f      	lsrs	r7, r7, #16
10002ff4:	4699      	mov	r9, r3
10002ff6:	0c03      	lsrs	r3, r0, #16
10002ff8:	437c      	muls	r4, r7
10002ffa:	4375      	muls	r5, r6
10002ffc:	435f      	muls	r7, r3
10002ffe:	4373      	muls	r3, r6
10003000:	197d      	adds	r5, r7, r5
10003002:	0c26      	lsrs	r6, r4, #16
10003004:	19ad      	adds	r5, r5, r6
10003006:	469c      	mov	ip, r3
10003008:	42af      	cmp	r7, r5
1000300a:	d903      	bls.n	10003014 <__aeabi_lmul+0x34>
1000300c:	2380      	movs	r3, #128	; 0x80
1000300e:	025b      	lsls	r3, r3, #9
10003010:	4698      	mov	r8, r3
10003012:	44c4      	add	ip, r8
10003014:	464b      	mov	r3, r9
10003016:	4351      	muls	r1, r2
10003018:	4343      	muls	r3, r0
1000301a:	0424      	lsls	r4, r4, #16
1000301c:	0c2e      	lsrs	r6, r5, #16
1000301e:	0c24      	lsrs	r4, r4, #16
10003020:	042d      	lsls	r5, r5, #16
10003022:	4466      	add	r6, ip
10003024:	192c      	adds	r4, r5, r4
10003026:	1859      	adds	r1, r3, r1
10003028:	1989      	adds	r1, r1, r6
1000302a:	1c20      	adds	r0, r4, #0
1000302c:	bc0c      	pop	{r2, r3}
1000302e:	4690      	mov	r8, r2
10003030:	4699      	mov	r9, r3
10003032:	bdf0      	pop	{r4, r5, r6, r7, pc}

10003034 <__gnu_ldivmod_helper>:
10003034:	b5f0      	push	{r4, r5, r6, r7, lr}
10003036:	b083      	sub	sp, #12
10003038:	1c16      	adds	r6, r2, #0
1000303a:	1c1f      	adds	r7, r3, #0
1000303c:	9000      	str	r0, [sp, #0]
1000303e:	9101      	str	r1, [sp, #4]
10003040:	f000 fbba 	bl	100037b8 <__divdi3>
10003044:	1c04      	adds	r4, r0, #0
10003046:	1c0d      	adds	r5, r1, #0
10003048:	1c22      	adds	r2, r4, #0
1000304a:	1c2b      	adds	r3, r5, #0
1000304c:	1c30      	adds	r0, r6, #0
1000304e:	1c39      	adds	r1, r7, #0
10003050:	f7ff ffc6 	bl	10002fe0 <__aeabi_lmul>
10003054:	9a00      	ldr	r2, [sp, #0]
10003056:	9b01      	ldr	r3, [sp, #4]
10003058:	1a12      	subs	r2, r2, r0
1000305a:	418b      	sbcs	r3, r1
1000305c:	9908      	ldr	r1, [sp, #32]
1000305e:	1c20      	adds	r0, r4, #0
10003060:	600a      	str	r2, [r1, #0]
10003062:	604b      	str	r3, [r1, #4]
10003064:	1c29      	adds	r1, r5, #0
10003066:	b003      	add	sp, #12
10003068:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000306a:	46c0      	nop			; (mov r8, r8)

1000306c <__gnu_uldivmod_helper>:
1000306c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000306e:	1c14      	adds	r4, r2, #0
10003070:	b083      	sub	sp, #12
10003072:	1c1d      	adds	r5, r3, #0
10003074:	9000      	str	r0, [sp, #0]
10003076:	9101      	str	r1, [sp, #4]
10003078:	f000 fc96 	bl	100039a8 <__udivdi3>
1000307c:	1c22      	adds	r2, r4, #0
1000307e:	1c2b      	adds	r3, r5, #0
10003080:	1c06      	adds	r6, r0, #0
10003082:	1c0f      	adds	r7, r1, #0
10003084:	f7ff ffac 	bl	10002fe0 <__aeabi_lmul>
10003088:	9a00      	ldr	r2, [sp, #0]
1000308a:	9b01      	ldr	r3, [sp, #4]
1000308c:	1a12      	subs	r2, r2, r0
1000308e:	418b      	sbcs	r3, r1
10003090:	9908      	ldr	r1, [sp, #32]
10003092:	1c30      	adds	r0, r6, #0
10003094:	600a      	str	r2, [r1, #0]
10003096:	604b      	str	r3, [r1, #4]
10003098:	1c39      	adds	r1, r7, #0
1000309a:	b003      	add	sp, #12
1000309c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000309e:	46c0      	nop			; (mov r8, r8)

100030a0 <__aeabi_fdiv>:
100030a0:	b5f0      	push	{r4, r5, r6, r7, lr}
100030a2:	4656      	mov	r6, sl
100030a4:	464d      	mov	r5, r9
100030a6:	465f      	mov	r7, fp
100030a8:	4644      	mov	r4, r8
100030aa:	b4f0      	push	{r4, r5, r6, r7}
100030ac:	0243      	lsls	r3, r0, #9
100030ae:	0045      	lsls	r5, r0, #1
100030b0:	0fc7      	lsrs	r7, r0, #31
100030b2:	b083      	sub	sp, #12
100030b4:	468a      	mov	sl, r1
100030b6:	0a5c      	lsrs	r4, r3, #9
100030b8:	0e2e      	lsrs	r6, r5, #24
100030ba:	46b9      	mov	r9, r7
100030bc:	d041      	beq.n	10003142 <__aeabi_fdiv+0xa2>
100030be:	2eff      	cmp	r6, #255	; 0xff
100030c0:	d026      	beq.n	10003110 <__aeabi_fdiv+0x70>
100030c2:	2380      	movs	r3, #128	; 0x80
100030c4:	041b      	lsls	r3, r3, #16
100030c6:	4323      	orrs	r3, r4
100030c8:	00dc      	lsls	r4, r3, #3
100030ca:	2300      	movs	r3, #0
100030cc:	4698      	mov	r8, r3
100030ce:	469b      	mov	fp, r3
100030d0:	3e7f      	subs	r6, #127	; 0x7f
100030d2:	4653      	mov	r3, sl
100030d4:	025b      	lsls	r3, r3, #9
100030d6:	0a5d      	lsrs	r5, r3, #9
100030d8:	4653      	mov	r3, sl
100030da:	005a      	lsls	r2, r3, #1
100030dc:	0fdb      	lsrs	r3, r3, #31
100030de:	0e12      	lsrs	r2, r2, #24
100030e0:	469a      	mov	sl, r3
100030e2:	d039      	beq.n	10003158 <__aeabi_fdiv+0xb8>
100030e4:	2aff      	cmp	r2, #255	; 0xff
100030e6:	d033      	beq.n	10003150 <__aeabi_fdiv+0xb0>
100030e8:	2380      	movs	r3, #128	; 0x80
100030ea:	041b      	lsls	r3, r3, #16
100030ec:	432b      	orrs	r3, r5
100030ee:	00dd      	lsls	r5, r3, #3
100030f0:	2300      	movs	r3, #0
100030f2:	3a7f      	subs	r2, #127	; 0x7f
100030f4:	4651      	mov	r1, sl
100030f6:	1ab2      	subs	r2, r6, r2
100030f8:	4646      	mov	r6, r8
100030fa:	4079      	eors	r1, r7
100030fc:	1c08      	adds	r0, r1, #0
100030fe:	9201      	str	r2, [sp, #4]
10003100:	431e      	orrs	r6, r3
10003102:	2e0f      	cmp	r6, #15
10003104:	d900      	bls.n	10003108 <__aeabi_fdiv+0x68>
10003106:	e076      	b.n	100031f6 <__aeabi_fdiv+0x156>
10003108:	4a7e      	ldr	r2, [pc, #504]	; (10003304 <__aeabi_fdiv+0x264>)
1000310a:	00b6      	lsls	r6, r6, #2
1000310c:	5996      	ldr	r6, [r2, r6]
1000310e:	46b7      	mov	pc, r6
10003110:	2c00      	cmp	r4, #0
10003112:	d130      	bne.n	10003176 <__aeabi_fdiv+0xd6>
10003114:	2308      	movs	r3, #8
10003116:	4698      	mov	r8, r3
10003118:	3b06      	subs	r3, #6
1000311a:	469b      	mov	fp, r3
1000311c:	e7d9      	b.n	100030d2 <__aeabi_fdiv+0x32>
1000311e:	2380      	movs	r3, #128	; 0x80
10003120:	2100      	movs	r1, #0
10003122:	03db      	lsls	r3, r3, #15
10003124:	24ff      	movs	r4, #255	; 0xff
10003126:	025b      	lsls	r3, r3, #9
10003128:	05e4      	lsls	r4, r4, #23
1000312a:	0a5b      	lsrs	r3, r3, #9
1000312c:	07c9      	lsls	r1, r1, #31
1000312e:	4323      	orrs	r3, r4
10003130:	430b      	orrs	r3, r1
10003132:	1c18      	adds	r0, r3, #0
10003134:	b003      	add	sp, #12
10003136:	bc3c      	pop	{r2, r3, r4, r5}
10003138:	4690      	mov	r8, r2
1000313a:	4699      	mov	r9, r3
1000313c:	46a2      	mov	sl, r4
1000313e:	46ab      	mov	fp, r5
10003140:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003142:	2c00      	cmp	r4, #0
10003144:	d128      	bne.n	10003198 <__aeabi_fdiv+0xf8>
10003146:	2304      	movs	r3, #4
10003148:	4698      	mov	r8, r3
1000314a:	3b03      	subs	r3, #3
1000314c:	469b      	mov	fp, r3
1000314e:	e7c0      	b.n	100030d2 <__aeabi_fdiv+0x32>
10003150:	2d00      	cmp	r5, #0
10003152:	d11f      	bne.n	10003194 <__aeabi_fdiv+0xf4>
10003154:	2302      	movs	r3, #2
10003156:	e002      	b.n	1000315e <__aeabi_fdiv+0xbe>
10003158:	2d00      	cmp	r5, #0
1000315a:	d111      	bne.n	10003180 <__aeabi_fdiv+0xe0>
1000315c:	2301      	movs	r3, #1
1000315e:	1ab2      	subs	r2, r6, r2
10003160:	4650      	mov	r0, sl
10003162:	4646      	mov	r6, r8
10003164:	4078      	eors	r0, r7
10003166:	9201      	str	r2, [sp, #4]
10003168:	431e      	orrs	r6, r3
1000316a:	2e0f      	cmp	r6, #15
1000316c:	d827      	bhi.n	100031be <__aeabi_fdiv+0x11e>
1000316e:	4966      	ldr	r1, [pc, #408]	; (10003308 <__aeabi_fdiv+0x268>)
10003170:	00b6      	lsls	r6, r6, #2
10003172:	5989      	ldr	r1, [r1, r6]
10003174:	468f      	mov	pc, r1
10003176:	230c      	movs	r3, #12
10003178:	4698      	mov	r8, r3
1000317a:	3b09      	subs	r3, #9
1000317c:	469b      	mov	fp, r3
1000317e:	e7a8      	b.n	100030d2 <__aeabi_fdiv+0x32>
10003180:	1c28      	adds	r0, r5, #0
10003182:	f000 fafb 	bl	1000377c <__clzsi2>
10003186:	2276      	movs	r2, #118	; 0x76
10003188:	1f43      	subs	r3, r0, #5
1000318a:	4252      	negs	r2, r2
1000318c:	409d      	lsls	r5, r3
1000318e:	1a12      	subs	r2, r2, r0
10003190:	2300      	movs	r3, #0
10003192:	e7af      	b.n	100030f4 <__aeabi_fdiv+0x54>
10003194:	2303      	movs	r3, #3
10003196:	e7ad      	b.n	100030f4 <__aeabi_fdiv+0x54>
10003198:	1c20      	adds	r0, r4, #0
1000319a:	f000 faef 	bl	1000377c <__clzsi2>
1000319e:	1f43      	subs	r3, r0, #5
100031a0:	409c      	lsls	r4, r3
100031a2:	2376      	movs	r3, #118	; 0x76
100031a4:	425b      	negs	r3, r3
100031a6:	1a1e      	subs	r6, r3, r0
100031a8:	2300      	movs	r3, #0
100031aa:	4698      	mov	r8, r3
100031ac:	469b      	mov	fp, r3
100031ae:	e790      	b.n	100030d2 <__aeabi_fdiv+0x32>
100031b0:	2500      	movs	r5, #0
100031b2:	46d1      	mov	r9, sl
100031b4:	469b      	mov	fp, r3
100031b6:	465b      	mov	r3, fp
100031b8:	4648      	mov	r0, r9
100031ba:	2b02      	cmp	r3, #2
100031bc:	d16f      	bne.n	1000329e <__aeabi_fdiv+0x1fe>
100031be:	2101      	movs	r1, #1
100031c0:	24ff      	movs	r4, #255	; 0xff
100031c2:	4001      	ands	r1, r0
100031c4:	2300      	movs	r3, #0
100031c6:	e7ae      	b.n	10003126 <__aeabi_fdiv+0x86>
100031c8:	237e      	movs	r3, #126	; 0x7e
100031ca:	9a01      	ldr	r2, [sp, #4]
100031cc:	425b      	negs	r3, r3
100031ce:	1a9b      	subs	r3, r3, r2
100031d0:	2b1b      	cmp	r3, #27
100031d2:	dd6d      	ble.n	100032b0 <__aeabi_fdiv+0x210>
100031d4:	2101      	movs	r1, #1
100031d6:	464b      	mov	r3, r9
100031d8:	4019      	ands	r1, r3
100031da:	2400      	movs	r4, #0
100031dc:	2300      	movs	r3, #0
100031de:	e7a2      	b.n	10003126 <__aeabi_fdiv+0x86>
100031e0:	2380      	movs	r3, #128	; 0x80
100031e2:	03db      	lsls	r3, r3, #15
100031e4:	421c      	tst	r4, r3
100031e6:	d149      	bne.n	1000327c <__aeabi_fdiv+0x1dc>
100031e8:	2380      	movs	r3, #128	; 0x80
100031ea:	03db      	lsls	r3, r3, #15
100031ec:	4323      	orrs	r3, r4
100031ee:	025b      	lsls	r3, r3, #9
100031f0:	0a5b      	lsrs	r3, r3, #9
100031f2:	1c39      	adds	r1, r7, #0
100031f4:	e796      	b.n	10003124 <__aeabi_fdiv+0x84>
100031f6:	0163      	lsls	r3, r4, #5
100031f8:	016d      	lsls	r5, r5, #5
100031fa:	42ab      	cmp	r3, r5
100031fc:	d337      	bcc.n	1000326e <__aeabi_fdiv+0x1ce>
100031fe:	4689      	mov	r9, r1
10003200:	201a      	movs	r0, #26
10003202:	2101      	movs	r1, #1
10003204:	1b5b      	subs	r3, r3, r5
10003206:	2401      	movs	r4, #1
10003208:	1c1e      	adds	r6, r3, #0
1000320a:	0049      	lsls	r1, r1, #1
1000320c:	005b      	lsls	r3, r3, #1
1000320e:	2e00      	cmp	r6, #0
10003210:	db01      	blt.n	10003216 <__aeabi_fdiv+0x176>
10003212:	42ab      	cmp	r3, r5
10003214:	d301      	bcc.n	1000321a <__aeabi_fdiv+0x17a>
10003216:	1b5b      	subs	r3, r3, r5
10003218:	4321      	orrs	r1, r4
1000321a:	3801      	subs	r0, #1
1000321c:	2800      	cmp	r0, #0
1000321e:	d1f3      	bne.n	10003208 <__aeabi_fdiv+0x168>
10003220:	1e58      	subs	r0, r3, #1
10003222:	4183      	sbcs	r3, r0
10003224:	430b      	orrs	r3, r1
10003226:	1c1d      	adds	r5, r3, #0
10003228:	9c01      	ldr	r4, [sp, #4]
1000322a:	347f      	adds	r4, #127	; 0x7f
1000322c:	2c00      	cmp	r4, #0
1000322e:	ddcb      	ble.n	100031c8 <__aeabi_fdiv+0x128>
10003230:	076b      	lsls	r3, r5, #29
10003232:	d004      	beq.n	1000323e <__aeabi_fdiv+0x19e>
10003234:	230f      	movs	r3, #15
10003236:	402b      	ands	r3, r5
10003238:	2b04      	cmp	r3, #4
1000323a:	d000      	beq.n	1000323e <__aeabi_fdiv+0x19e>
1000323c:	3504      	adds	r5, #4
1000323e:	012b      	lsls	r3, r5, #4
10003240:	d504      	bpl.n	1000324c <__aeabi_fdiv+0x1ac>
10003242:	9a01      	ldr	r2, [sp, #4]
10003244:	4b31      	ldr	r3, [pc, #196]	; (1000330c <__aeabi_fdiv+0x26c>)
10003246:	3280      	adds	r2, #128	; 0x80
10003248:	1c14      	adds	r4, r2, #0
1000324a:	401d      	ands	r5, r3
1000324c:	2cfe      	cmp	r4, #254	; 0xfe
1000324e:	dd07      	ble.n	10003260 <__aeabi_fdiv+0x1c0>
10003250:	464b      	mov	r3, r9
10003252:	2101      	movs	r1, #1
10003254:	24ff      	movs	r4, #255	; 0xff
10003256:	4019      	ands	r1, r3
10003258:	2300      	movs	r3, #0
1000325a:	e764      	b.n	10003126 <__aeabi_fdiv+0x86>
1000325c:	1c25      	adds	r5, r4, #0
1000325e:	e7aa      	b.n	100031b6 <__aeabi_fdiv+0x116>
10003260:	2101      	movs	r1, #1
10003262:	464a      	mov	r2, r9
10003264:	01ab      	lsls	r3, r5, #6
10003266:	0a5b      	lsrs	r3, r3, #9
10003268:	b2e4      	uxtb	r4, r4
1000326a:	4011      	ands	r1, r2
1000326c:	e75b      	b.n	10003126 <__aeabi_fdiv+0x86>
1000326e:	9a01      	ldr	r2, [sp, #4]
10003270:	4689      	mov	r9, r1
10003272:	3a01      	subs	r2, #1
10003274:	9201      	str	r2, [sp, #4]
10003276:	201b      	movs	r0, #27
10003278:	2100      	movs	r1, #0
1000327a:	e7c4      	b.n	10003206 <__aeabi_fdiv+0x166>
1000327c:	421d      	tst	r5, r3
1000327e:	d007      	beq.n	10003290 <__aeabi_fdiv+0x1f0>
10003280:	4323      	orrs	r3, r4
10003282:	025b      	lsls	r3, r3, #9
10003284:	0a5b      	lsrs	r3, r3, #9
10003286:	1c39      	adds	r1, r7, #0
10003288:	e74c      	b.n	10003124 <__aeabi_fdiv+0x84>
1000328a:	2500      	movs	r5, #0
1000328c:	0263      	lsls	r3, r4, #9
1000328e:	d5ab      	bpl.n	100031e8 <__aeabi_fdiv+0x148>
10003290:	2380      	movs	r3, #128	; 0x80
10003292:	03db      	lsls	r3, r3, #15
10003294:	432b      	orrs	r3, r5
10003296:	025b      	lsls	r3, r3, #9
10003298:	0a5b      	lsrs	r3, r3, #9
1000329a:	4651      	mov	r1, sl
1000329c:	e742      	b.n	10003124 <__aeabi_fdiv+0x84>
1000329e:	2b03      	cmp	r3, #3
100032a0:	d025      	beq.n	100032ee <__aeabi_fdiv+0x24e>
100032a2:	2b01      	cmp	r3, #1
100032a4:	d1c0      	bne.n	10003228 <__aeabi_fdiv+0x188>
100032a6:	2101      	movs	r1, #1
100032a8:	2400      	movs	r4, #0
100032aa:	4001      	ands	r1, r0
100032ac:	2300      	movs	r3, #0
100032ae:	e73a      	b.n	10003126 <__aeabi_fdiv+0x86>
100032b0:	1c29      	adds	r1, r5, #0
100032b2:	40d9      	lsrs	r1, r3
100032b4:	1c2b      	adds	r3, r5, #0
100032b6:	9a01      	ldr	r2, [sp, #4]
100032b8:	329e      	adds	r2, #158	; 0x9e
100032ba:	4093      	lsls	r3, r2
100032bc:	1e5d      	subs	r5, r3, #1
100032be:	41ab      	sbcs	r3, r5
100032c0:	430b      	orrs	r3, r1
100032c2:	075a      	lsls	r2, r3, #29
100032c4:	d004      	beq.n	100032d0 <__aeabi_fdiv+0x230>
100032c6:	220f      	movs	r2, #15
100032c8:	401a      	ands	r2, r3
100032ca:	2a04      	cmp	r2, #4
100032cc:	d000      	beq.n	100032d0 <__aeabi_fdiv+0x230>
100032ce:	3304      	adds	r3, #4
100032d0:	015a      	lsls	r2, r3, #5
100032d2:	d505      	bpl.n	100032e0 <__aeabi_fdiv+0x240>
100032d4:	464b      	mov	r3, r9
100032d6:	2101      	movs	r1, #1
100032d8:	2401      	movs	r4, #1
100032da:	4019      	ands	r1, r3
100032dc:	2300      	movs	r3, #0
100032de:	e722      	b.n	10003126 <__aeabi_fdiv+0x86>
100032e0:	2101      	movs	r1, #1
100032e2:	464a      	mov	r2, r9
100032e4:	019b      	lsls	r3, r3, #6
100032e6:	0a5b      	lsrs	r3, r3, #9
100032e8:	4011      	ands	r1, r2
100032ea:	2400      	movs	r4, #0
100032ec:	e71b      	b.n	10003126 <__aeabi_fdiv+0x86>
100032ee:	2380      	movs	r3, #128	; 0x80
100032f0:	2101      	movs	r1, #1
100032f2:	464a      	mov	r2, r9
100032f4:	03db      	lsls	r3, r3, #15
100032f6:	432b      	orrs	r3, r5
100032f8:	025b      	lsls	r3, r3, #9
100032fa:	400a      	ands	r2, r1
100032fc:	0a5b      	lsrs	r3, r3, #9
100032fe:	1c11      	adds	r1, r2, #0
10003300:	e710      	b.n	10003124 <__aeabi_fdiv+0x84>
10003302:	46c0      	nop			; (mov r8, r8)
10003304:	10004588 	.word	0x10004588
10003308:	100045c8 	.word	0x100045c8
1000330c:	f7ffffff 	.word	0xf7ffffff

10003310 <__eqsf2>:
10003310:	0243      	lsls	r3, r0, #9
10003312:	b570      	push	{r4, r5, r6, lr}
10003314:	0042      	lsls	r2, r0, #1
10003316:	004c      	lsls	r4, r1, #1
10003318:	0a5d      	lsrs	r5, r3, #9
1000331a:	0fc3      	lsrs	r3, r0, #31
1000331c:	0248      	lsls	r0, r1, #9
1000331e:	0e12      	lsrs	r2, r2, #24
10003320:	0a46      	lsrs	r6, r0, #9
10003322:	0e24      	lsrs	r4, r4, #24
10003324:	0fc9      	lsrs	r1, r1, #31
10003326:	2aff      	cmp	r2, #255	; 0xff
10003328:	d005      	beq.n	10003336 <__eqsf2+0x26>
1000332a:	2cff      	cmp	r4, #255	; 0xff
1000332c:	d008      	beq.n	10003340 <__eqsf2+0x30>
1000332e:	2001      	movs	r0, #1
10003330:	42a2      	cmp	r2, r4
10003332:	d00b      	beq.n	1000334c <__eqsf2+0x3c>
10003334:	bd70      	pop	{r4, r5, r6, pc}
10003336:	2001      	movs	r0, #1
10003338:	2d00      	cmp	r5, #0
1000333a:	d1fb      	bne.n	10003334 <__eqsf2+0x24>
1000333c:	2cff      	cmp	r4, #255	; 0xff
1000333e:	d1f6      	bne.n	1000332e <__eqsf2+0x1e>
10003340:	2001      	movs	r0, #1
10003342:	2e00      	cmp	r6, #0
10003344:	d1f6      	bne.n	10003334 <__eqsf2+0x24>
10003346:	2001      	movs	r0, #1
10003348:	42a2      	cmp	r2, r4
1000334a:	d1f3      	bne.n	10003334 <__eqsf2+0x24>
1000334c:	42b5      	cmp	r5, r6
1000334e:	d1f1      	bne.n	10003334 <__eqsf2+0x24>
10003350:	428b      	cmp	r3, r1
10003352:	d005      	beq.n	10003360 <__eqsf2+0x50>
10003354:	2a00      	cmp	r2, #0
10003356:	d1ed      	bne.n	10003334 <__eqsf2+0x24>
10003358:	1c28      	adds	r0, r5, #0
1000335a:	1e43      	subs	r3, r0, #1
1000335c:	4198      	sbcs	r0, r3
1000335e:	e7e9      	b.n	10003334 <__eqsf2+0x24>
10003360:	2000      	movs	r0, #0
10003362:	e7e7      	b.n	10003334 <__eqsf2+0x24>

10003364 <__gesf2>:
10003364:	b5f0      	push	{r4, r5, r6, r7, lr}
10003366:	0243      	lsls	r3, r0, #9
10003368:	024d      	lsls	r5, r1, #9
1000336a:	004a      	lsls	r2, r1, #1
1000336c:	0044      	lsls	r4, r0, #1
1000336e:	0a5e      	lsrs	r6, r3, #9
10003370:	0e24      	lsrs	r4, r4, #24
10003372:	0fc3      	lsrs	r3, r0, #31
10003374:	0a6d      	lsrs	r5, r5, #9
10003376:	0e12      	lsrs	r2, r2, #24
10003378:	0fc9      	lsrs	r1, r1, #31
1000337a:	2cff      	cmp	r4, #255	; 0xff
1000337c:	d00d      	beq.n	1000339a <__gesf2+0x36>
1000337e:	2aff      	cmp	r2, #255	; 0xff
10003380:	d031      	beq.n	100033e6 <__gesf2+0x82>
10003382:	2c00      	cmp	r4, #0
10003384:	d10d      	bne.n	100033a2 <__gesf2+0x3e>
10003386:	4277      	negs	r7, r6
10003388:	4177      	adcs	r7, r6
1000338a:	2a00      	cmp	r2, #0
1000338c:	d123      	bne.n	100033d6 <__gesf2+0x72>
1000338e:	2d00      	cmp	r5, #0
10003390:	d121      	bne.n	100033d6 <__gesf2+0x72>
10003392:	2000      	movs	r0, #0
10003394:	2f00      	cmp	r7, #0
10003396:	d10b      	bne.n	100033b0 <__gesf2+0x4c>
10003398:	e007      	b.n	100033aa <__gesf2+0x46>
1000339a:	2e00      	cmp	r6, #0
1000339c:	d128      	bne.n	100033f0 <__gesf2+0x8c>
1000339e:	2aff      	cmp	r2, #255	; 0xff
100033a0:	d021      	beq.n	100033e6 <__gesf2+0x82>
100033a2:	2a00      	cmp	r2, #0
100033a4:	d005      	beq.n	100033b2 <__gesf2+0x4e>
100033a6:	428b      	cmp	r3, r1
100033a8:	d007      	beq.n	100033ba <__gesf2+0x56>
100033aa:	4258      	negs	r0, r3
100033ac:	2301      	movs	r3, #1
100033ae:	4318      	orrs	r0, r3
100033b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100033b2:	2d00      	cmp	r5, #0
100033b4:	d0f9      	beq.n	100033aa <__gesf2+0x46>
100033b6:	428b      	cmp	r3, r1
100033b8:	d1f7      	bne.n	100033aa <__gesf2+0x46>
100033ba:	4294      	cmp	r4, r2
100033bc:	dcf5      	bgt.n	100033aa <__gesf2+0x46>
100033be:	db04      	blt.n	100033ca <__gesf2+0x66>
100033c0:	42ae      	cmp	r6, r5
100033c2:	d8f2      	bhi.n	100033aa <__gesf2+0x46>
100033c4:	2000      	movs	r0, #0
100033c6:	42ae      	cmp	r6, r5
100033c8:	d2f2      	bcs.n	100033b0 <__gesf2+0x4c>
100033ca:	4258      	negs	r0, r3
100033cc:	4143      	adcs	r3, r0
100033ce:	2001      	movs	r0, #1
100033d0:	425b      	negs	r3, r3
100033d2:	4318      	orrs	r0, r3
100033d4:	e7ec      	b.n	100033b0 <__gesf2+0x4c>
100033d6:	2f00      	cmp	r7, #0
100033d8:	d0e5      	beq.n	100033a6 <__gesf2+0x42>
100033da:	4248      	negs	r0, r1
100033dc:	4141      	adcs	r1, r0
100033de:	2001      	movs	r0, #1
100033e0:	4249      	negs	r1, r1
100033e2:	4308      	orrs	r0, r1
100033e4:	e7e4      	b.n	100033b0 <__gesf2+0x4c>
100033e6:	2d00      	cmp	r5, #0
100033e8:	d102      	bne.n	100033f0 <__gesf2+0x8c>
100033ea:	2c00      	cmp	r4, #0
100033ec:	d0cb      	beq.n	10003386 <__gesf2+0x22>
100033ee:	e7da      	b.n	100033a6 <__gesf2+0x42>
100033f0:	2002      	movs	r0, #2
100033f2:	4240      	negs	r0, r0
100033f4:	e7dc      	b.n	100033b0 <__gesf2+0x4c>
100033f6:	46c0      	nop			; (mov r8, r8)

100033f8 <__lesf2>:
100033f8:	0243      	lsls	r3, r0, #9
100033fa:	b5f0      	push	{r4, r5, r6, r7, lr}
100033fc:	0042      	lsls	r2, r0, #1
100033fe:	004c      	lsls	r4, r1, #1
10003400:	0a5e      	lsrs	r6, r3, #9
10003402:	0fc3      	lsrs	r3, r0, #31
10003404:	0248      	lsls	r0, r1, #9
10003406:	0e12      	lsrs	r2, r2, #24
10003408:	0a45      	lsrs	r5, r0, #9
1000340a:	0e24      	lsrs	r4, r4, #24
1000340c:	0fc9      	lsrs	r1, r1, #31
1000340e:	2aff      	cmp	r2, #255	; 0xff
10003410:	d00f      	beq.n	10003432 <__lesf2+0x3a>
10003412:	2cff      	cmp	r4, #255	; 0xff
10003414:	d01a      	beq.n	1000344c <__lesf2+0x54>
10003416:	2a00      	cmp	r2, #0
10003418:	d110      	bne.n	1000343c <__lesf2+0x44>
1000341a:	4277      	negs	r7, r6
1000341c:	4177      	adcs	r7, r6
1000341e:	2c00      	cmp	r4, #0
10003420:	d029      	beq.n	10003476 <__lesf2+0x7e>
10003422:	2f00      	cmp	r7, #0
10003424:	d017      	beq.n	10003456 <__lesf2+0x5e>
10003426:	4248      	negs	r0, r1
10003428:	4141      	adcs	r1, r0
1000342a:	2001      	movs	r0, #1
1000342c:	4249      	negs	r1, r1
1000342e:	4308      	orrs	r0, r1
10003430:	e00b      	b.n	1000344a <__lesf2+0x52>
10003432:	2002      	movs	r0, #2
10003434:	2e00      	cmp	r6, #0
10003436:	d108      	bne.n	1000344a <__lesf2+0x52>
10003438:	2cff      	cmp	r4, #255	; 0xff
1000343a:	d007      	beq.n	1000344c <__lesf2+0x54>
1000343c:	2c00      	cmp	r4, #0
1000343e:	d10a      	bne.n	10003456 <__lesf2+0x5e>
10003440:	2d00      	cmp	r5, #0
10003442:	d108      	bne.n	10003456 <__lesf2+0x5e>
10003444:	4258      	negs	r0, r3
10003446:	2301      	movs	r3, #1
10003448:	4318      	orrs	r0, r3
1000344a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000344c:	2002      	movs	r0, #2
1000344e:	2d00      	cmp	r5, #0
10003450:	d1fb      	bne.n	1000344a <__lesf2+0x52>
10003452:	2a00      	cmp	r2, #0
10003454:	d0e1      	beq.n	1000341a <__lesf2+0x22>
10003456:	428b      	cmp	r3, r1
10003458:	d1f4      	bne.n	10003444 <__lesf2+0x4c>
1000345a:	42a2      	cmp	r2, r4
1000345c:	dcf2      	bgt.n	10003444 <__lesf2+0x4c>
1000345e:	db04      	blt.n	1000346a <__lesf2+0x72>
10003460:	42ae      	cmp	r6, r5
10003462:	d8ef      	bhi.n	10003444 <__lesf2+0x4c>
10003464:	2000      	movs	r0, #0
10003466:	42ae      	cmp	r6, r5
10003468:	d2ef      	bcs.n	1000344a <__lesf2+0x52>
1000346a:	4258      	negs	r0, r3
1000346c:	4143      	adcs	r3, r0
1000346e:	2001      	movs	r0, #1
10003470:	425b      	negs	r3, r3
10003472:	4318      	orrs	r0, r3
10003474:	e7e9      	b.n	1000344a <__lesf2+0x52>
10003476:	2d00      	cmp	r5, #0
10003478:	d1d3      	bne.n	10003422 <__lesf2+0x2a>
1000347a:	2000      	movs	r0, #0
1000347c:	2f00      	cmp	r7, #0
1000347e:	d1e4      	bne.n	1000344a <__lesf2+0x52>
10003480:	e7e0      	b.n	10003444 <__lesf2+0x4c>
10003482:	46c0      	nop			; (mov r8, r8)

10003484 <__aeabi_fmul>:
10003484:	b5f0      	push	{r4, r5, r6, r7, lr}
10003486:	465f      	mov	r7, fp
10003488:	4656      	mov	r6, sl
1000348a:	464d      	mov	r5, r9
1000348c:	4644      	mov	r4, r8
1000348e:	b4f0      	push	{r4, r5, r6, r7}
10003490:	0245      	lsls	r5, r0, #9
10003492:	0046      	lsls	r6, r0, #1
10003494:	0fc4      	lsrs	r4, r0, #31
10003496:	b083      	sub	sp, #12
10003498:	1c0f      	adds	r7, r1, #0
1000349a:	0a6d      	lsrs	r5, r5, #9
1000349c:	0e36      	lsrs	r6, r6, #24
1000349e:	46a3      	mov	fp, r4
100034a0:	d045      	beq.n	1000352e <__aeabi_fmul+0xaa>
100034a2:	2eff      	cmp	r6, #255	; 0xff
100034a4:	d025      	beq.n	100034f2 <__aeabi_fmul+0x6e>
100034a6:	2380      	movs	r3, #128	; 0x80
100034a8:	041b      	lsls	r3, r3, #16
100034aa:	431d      	orrs	r5, r3
100034ac:	2300      	movs	r3, #0
100034ae:	469a      	mov	sl, r3
100034b0:	00ed      	lsls	r5, r5, #3
100034b2:	3e7f      	subs	r6, #127	; 0x7f
100034b4:	9301      	str	r3, [sp, #4]
100034b6:	027b      	lsls	r3, r7, #9
100034b8:	0a5b      	lsrs	r3, r3, #9
100034ba:	4698      	mov	r8, r3
100034bc:	0078      	lsls	r0, r7, #1
100034be:	0ffb      	lsrs	r3, r7, #31
100034c0:	0e00      	lsrs	r0, r0, #24
100034c2:	4699      	mov	r9, r3
100034c4:	d040      	beq.n	10003548 <__aeabi_fmul+0xc4>
100034c6:	28ff      	cmp	r0, #255	; 0xff
100034c8:	d038      	beq.n	1000353c <__aeabi_fmul+0xb8>
100034ca:	2380      	movs	r3, #128	; 0x80
100034cc:	4642      	mov	r2, r8
100034ce:	041b      	lsls	r3, r3, #16
100034d0:	4313      	orrs	r3, r2
100034d2:	00db      	lsls	r3, r3, #3
100034d4:	4698      	mov	r8, r3
100034d6:	2300      	movs	r3, #0
100034d8:	387f      	subs	r0, #127	; 0x7f
100034da:	464a      	mov	r2, r9
100034dc:	9f01      	ldr	r7, [sp, #4]
100034de:	1830      	adds	r0, r6, r0
100034e0:	4062      	eors	r2, r4
100034e2:	1c41      	adds	r1, r0, #1
100034e4:	431f      	orrs	r7, r3
100034e6:	2f0f      	cmp	r7, #15
100034e8:	d869      	bhi.n	100035be <__aeabi_fmul+0x13a>
100034ea:	4e7d      	ldr	r6, [pc, #500]	; (100036e0 <__aeabi_fmul+0x25c>)
100034ec:	00bf      	lsls	r7, r7, #2
100034ee:	59f6      	ldr	r6, [r6, r7]
100034f0:	46b7      	mov	pc, r6
100034f2:	2d00      	cmp	r5, #0
100034f4:	d145      	bne.n	10003582 <__aeabi_fmul+0xfe>
100034f6:	2308      	movs	r3, #8
100034f8:	9301      	str	r3, [sp, #4]
100034fa:	3b06      	subs	r3, #6
100034fc:	469a      	mov	sl, r3
100034fe:	e7da      	b.n	100034b6 <__aeabi_fmul+0x32>
10003500:	4693      	mov	fp, r2
10003502:	4653      	mov	r3, sl
10003504:	2b02      	cmp	r3, #2
10003506:	d12f      	bne.n	10003568 <__aeabi_fmul+0xe4>
10003508:	465b      	mov	r3, fp
1000350a:	2401      	movs	r4, #1
1000350c:	2500      	movs	r5, #0
1000350e:	401c      	ands	r4, r3
10003510:	23ff      	movs	r3, #255	; 0xff
10003512:	026d      	lsls	r5, r5, #9
10003514:	05db      	lsls	r3, r3, #23
10003516:	0a6d      	lsrs	r5, r5, #9
10003518:	07e4      	lsls	r4, r4, #31
1000351a:	431d      	orrs	r5, r3
1000351c:	4325      	orrs	r5, r4
1000351e:	1c28      	adds	r0, r5, #0
10003520:	b003      	add	sp, #12
10003522:	bc3c      	pop	{r2, r3, r4, r5}
10003524:	4690      	mov	r8, r2
10003526:	4699      	mov	r9, r3
10003528:	46a2      	mov	sl, r4
1000352a:	46ab      	mov	fp, r5
1000352c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000352e:	2d00      	cmp	r5, #0
10003530:	d12c      	bne.n	1000358c <__aeabi_fmul+0x108>
10003532:	2304      	movs	r3, #4
10003534:	9301      	str	r3, [sp, #4]
10003536:	3b03      	subs	r3, #3
10003538:	469a      	mov	sl, r3
1000353a:	e7bc      	b.n	100034b6 <__aeabi_fmul+0x32>
1000353c:	4643      	mov	r3, r8
1000353e:	425a      	negs	r2, r3
10003540:	4153      	adcs	r3, r2
10003542:	2203      	movs	r2, #3
10003544:	1ad3      	subs	r3, r2, r3
10003546:	e7c8      	b.n	100034da <__aeabi_fmul+0x56>
10003548:	4642      	mov	r2, r8
1000354a:	2301      	movs	r3, #1
1000354c:	2a00      	cmp	r2, #0
1000354e:	d0c4      	beq.n	100034da <__aeabi_fmul+0x56>
10003550:	4640      	mov	r0, r8
10003552:	f000 f913 	bl	1000377c <__clzsi2>
10003556:	4642      	mov	r2, r8
10003558:	1f43      	subs	r3, r0, #5
1000355a:	409a      	lsls	r2, r3
1000355c:	2376      	movs	r3, #118	; 0x76
1000355e:	425b      	negs	r3, r3
10003560:	1a18      	subs	r0, r3, r0
10003562:	4690      	mov	r8, r2
10003564:	2300      	movs	r3, #0
10003566:	e7b8      	b.n	100034da <__aeabi_fmul+0x56>
10003568:	2b03      	cmp	r3, #3
1000356a:	d100      	bne.n	1000356e <__aeabi_fmul+0xea>
1000356c:	e0ad      	b.n	100036ca <__aeabi_fmul+0x246>
1000356e:	2b01      	cmp	r3, #1
10003570:	d000      	beq.n	10003574 <__aeabi_fmul+0xf0>
10003572:	e08c      	b.n	1000368e <__aeabi_fmul+0x20a>
10003574:	465b      	mov	r3, fp
10003576:	4654      	mov	r4, sl
10003578:	401c      	ands	r4, r3
1000357a:	b2e4      	uxtb	r4, r4
1000357c:	2300      	movs	r3, #0
1000357e:	2500      	movs	r5, #0
10003580:	e7c7      	b.n	10003512 <__aeabi_fmul+0x8e>
10003582:	230c      	movs	r3, #12
10003584:	9301      	str	r3, [sp, #4]
10003586:	3b09      	subs	r3, #9
10003588:	469a      	mov	sl, r3
1000358a:	e794      	b.n	100034b6 <__aeabi_fmul+0x32>
1000358c:	1c28      	adds	r0, r5, #0
1000358e:	f000 f8f5 	bl	1000377c <__clzsi2>
10003592:	2676      	movs	r6, #118	; 0x76
10003594:	1f43      	subs	r3, r0, #5
10003596:	409d      	lsls	r5, r3
10003598:	2300      	movs	r3, #0
1000359a:	4276      	negs	r6, r6
1000359c:	1a36      	subs	r6, r6, r0
1000359e:	9301      	str	r3, [sp, #4]
100035a0:	469a      	mov	sl, r3
100035a2:	e788      	b.n	100034b6 <__aeabi_fmul+0x32>
100035a4:	2580      	movs	r5, #128	; 0x80
100035a6:	2400      	movs	r4, #0
100035a8:	03ed      	lsls	r5, r5, #15
100035aa:	23ff      	movs	r3, #255	; 0xff
100035ac:	e7b1      	b.n	10003512 <__aeabi_fmul+0x8e>
100035ae:	4645      	mov	r5, r8
100035b0:	46cb      	mov	fp, r9
100035b2:	469a      	mov	sl, r3
100035b4:	e7a5      	b.n	10003502 <__aeabi_fmul+0x7e>
100035b6:	4645      	mov	r5, r8
100035b8:	4693      	mov	fp, r2
100035ba:	469a      	mov	sl, r3
100035bc:	e7a1      	b.n	10003502 <__aeabi_fmul+0x7e>
100035be:	4643      	mov	r3, r8
100035c0:	042c      	lsls	r4, r5, #16
100035c2:	0c1b      	lsrs	r3, r3, #16
100035c4:	469c      	mov	ip, r3
100035c6:	0c23      	lsrs	r3, r4, #16
100035c8:	4644      	mov	r4, r8
100035ca:	0426      	lsls	r6, r4, #16
100035cc:	1c1c      	adds	r4, r3, #0
100035ce:	0c36      	lsrs	r6, r6, #16
100035d0:	0c2f      	lsrs	r7, r5, #16
100035d2:	4374      	muls	r4, r6
100035d4:	1c35      	adds	r5, r6, #0
100035d6:	4666      	mov	r6, ip
100035d8:	437d      	muls	r5, r7
100035da:	4373      	muls	r3, r6
100035dc:	4377      	muls	r7, r6
100035de:	18eb      	adds	r3, r5, r3
100035e0:	0c26      	lsrs	r6, r4, #16
100035e2:	199e      	adds	r6, r3, r6
100035e4:	42b5      	cmp	r5, r6
100035e6:	d903      	bls.n	100035f0 <__aeabi_fmul+0x16c>
100035e8:	2380      	movs	r3, #128	; 0x80
100035ea:	025b      	lsls	r3, r3, #9
100035ec:	469c      	mov	ip, r3
100035ee:	4467      	add	r7, ip
100035f0:	0424      	lsls	r4, r4, #16
100035f2:	0433      	lsls	r3, r6, #16
100035f4:	0c24      	lsrs	r4, r4, #16
100035f6:	191b      	adds	r3, r3, r4
100035f8:	019d      	lsls	r5, r3, #6
100035fa:	1e6c      	subs	r4, r5, #1
100035fc:	41a5      	sbcs	r5, r4
100035fe:	0e9b      	lsrs	r3, r3, #26
10003600:	0c36      	lsrs	r6, r6, #16
10003602:	432b      	orrs	r3, r5
10003604:	19bd      	adds	r5, r7, r6
10003606:	01ad      	lsls	r5, r5, #6
10003608:	431d      	orrs	r5, r3
1000360a:	012b      	lsls	r3, r5, #4
1000360c:	d504      	bpl.n	10003618 <__aeabi_fmul+0x194>
1000360e:	2301      	movs	r3, #1
10003610:	0868      	lsrs	r0, r5, #1
10003612:	401d      	ands	r5, r3
10003614:	4305      	orrs	r5, r0
10003616:	1c08      	adds	r0, r1, #0
10003618:	1c03      	adds	r3, r0, #0
1000361a:	337f      	adds	r3, #127	; 0x7f
1000361c:	2b00      	cmp	r3, #0
1000361e:	dd2c      	ble.n	1000367a <__aeabi_fmul+0x1f6>
10003620:	0769      	lsls	r1, r5, #29
10003622:	d004      	beq.n	1000362e <__aeabi_fmul+0x1aa>
10003624:	210f      	movs	r1, #15
10003626:	4029      	ands	r1, r5
10003628:	2904      	cmp	r1, #4
1000362a:	d000      	beq.n	1000362e <__aeabi_fmul+0x1aa>
1000362c:	3504      	adds	r5, #4
1000362e:	0129      	lsls	r1, r5, #4
10003630:	d503      	bpl.n	1000363a <__aeabi_fmul+0x1b6>
10003632:	4b2c      	ldr	r3, [pc, #176]	; (100036e4 <__aeabi_fmul+0x260>)
10003634:	401d      	ands	r5, r3
10003636:	1c03      	adds	r3, r0, #0
10003638:	3380      	adds	r3, #128	; 0x80
1000363a:	2bfe      	cmp	r3, #254	; 0xfe
1000363c:	dd17      	ble.n	1000366e <__aeabi_fmul+0x1ea>
1000363e:	2401      	movs	r4, #1
10003640:	23ff      	movs	r3, #255	; 0xff
10003642:	4014      	ands	r4, r2
10003644:	2500      	movs	r5, #0
10003646:	e764      	b.n	10003512 <__aeabi_fmul+0x8e>
10003648:	2080      	movs	r0, #128	; 0x80
1000364a:	03c0      	lsls	r0, r0, #15
1000364c:	4205      	tst	r5, r0
1000364e:	d009      	beq.n	10003664 <__aeabi_fmul+0x1e0>
10003650:	4643      	mov	r3, r8
10003652:	4203      	tst	r3, r0
10003654:	d106      	bne.n	10003664 <__aeabi_fmul+0x1e0>
10003656:	4645      	mov	r5, r8
10003658:	4305      	orrs	r5, r0
1000365a:	026d      	lsls	r5, r5, #9
1000365c:	0a6d      	lsrs	r5, r5, #9
1000365e:	464c      	mov	r4, r9
10003660:	23ff      	movs	r3, #255	; 0xff
10003662:	e756      	b.n	10003512 <__aeabi_fmul+0x8e>
10003664:	4305      	orrs	r5, r0
10003666:	026d      	lsls	r5, r5, #9
10003668:	0a6d      	lsrs	r5, r5, #9
1000366a:	23ff      	movs	r3, #255	; 0xff
1000366c:	e751      	b.n	10003512 <__aeabi_fmul+0x8e>
1000366e:	2401      	movs	r4, #1
10003670:	01ad      	lsls	r5, r5, #6
10003672:	0a6d      	lsrs	r5, r5, #9
10003674:	b2db      	uxtb	r3, r3
10003676:	4014      	ands	r4, r2
10003678:	e74b      	b.n	10003512 <__aeabi_fmul+0x8e>
1000367a:	237e      	movs	r3, #126	; 0x7e
1000367c:	425b      	negs	r3, r3
1000367e:	1a1b      	subs	r3, r3, r0
10003680:	2b1b      	cmp	r3, #27
10003682:	dd07      	ble.n	10003694 <__aeabi_fmul+0x210>
10003684:	2401      	movs	r4, #1
10003686:	2300      	movs	r3, #0
10003688:	4014      	ands	r4, r2
1000368a:	2500      	movs	r5, #0
1000368c:	e741      	b.n	10003512 <__aeabi_fmul+0x8e>
1000368e:	1c08      	adds	r0, r1, #0
10003690:	465a      	mov	r2, fp
10003692:	e7c1      	b.n	10003618 <__aeabi_fmul+0x194>
10003694:	309e      	adds	r0, #158	; 0x9e
10003696:	1c29      	adds	r1, r5, #0
10003698:	4085      	lsls	r5, r0
1000369a:	40d9      	lsrs	r1, r3
1000369c:	1e68      	subs	r0, r5, #1
1000369e:	4185      	sbcs	r5, r0
100036a0:	430d      	orrs	r5, r1
100036a2:	076b      	lsls	r3, r5, #29
100036a4:	d004      	beq.n	100036b0 <__aeabi_fmul+0x22c>
100036a6:	230f      	movs	r3, #15
100036a8:	402b      	ands	r3, r5
100036aa:	2b04      	cmp	r3, #4
100036ac:	d000      	beq.n	100036b0 <__aeabi_fmul+0x22c>
100036ae:	3504      	adds	r5, #4
100036b0:	016b      	lsls	r3, r5, #5
100036b2:	d504      	bpl.n	100036be <__aeabi_fmul+0x23a>
100036b4:	2401      	movs	r4, #1
100036b6:	2301      	movs	r3, #1
100036b8:	4014      	ands	r4, r2
100036ba:	2500      	movs	r5, #0
100036bc:	e729      	b.n	10003512 <__aeabi_fmul+0x8e>
100036be:	2401      	movs	r4, #1
100036c0:	01ad      	lsls	r5, r5, #6
100036c2:	0a6d      	lsrs	r5, r5, #9
100036c4:	4014      	ands	r4, r2
100036c6:	2300      	movs	r3, #0
100036c8:	e723      	b.n	10003512 <__aeabi_fmul+0x8e>
100036ca:	2380      	movs	r3, #128	; 0x80
100036cc:	03db      	lsls	r3, r3, #15
100036ce:	431d      	orrs	r5, r3
100036d0:	2401      	movs	r4, #1
100036d2:	465b      	mov	r3, fp
100036d4:	026d      	lsls	r5, r5, #9
100036d6:	4023      	ands	r3, r4
100036d8:	1c1c      	adds	r4, r3, #0
100036da:	0a6d      	lsrs	r5, r5, #9
100036dc:	23ff      	movs	r3, #255	; 0xff
100036de:	e718      	b.n	10003512 <__aeabi_fmul+0x8e>
100036e0:	10004608 	.word	0x10004608
100036e4:	f7ffffff 	.word	0xf7ffffff

100036e8 <__aeabi_ui2f>:
100036e8:	b510      	push	{r4, lr}
100036ea:	1e04      	subs	r4, r0, #0
100036ec:	d035      	beq.n	1000375a <__aeabi_ui2f+0x72>
100036ee:	f000 f845 	bl	1000377c <__clzsi2>
100036f2:	219e      	movs	r1, #158	; 0x9e
100036f4:	1a09      	subs	r1, r1, r0
100036f6:	2996      	cmp	r1, #150	; 0x96
100036f8:	dc09      	bgt.n	1000370e <__aeabi_ui2f+0x26>
100036fa:	2808      	cmp	r0, #8
100036fc:	dd30      	ble.n	10003760 <__aeabi_ui2f+0x78>
100036fe:	1c02      	adds	r2, r0, #0
10003700:	1c23      	adds	r3, r4, #0
10003702:	3a08      	subs	r2, #8
10003704:	4093      	lsls	r3, r2
10003706:	025b      	lsls	r3, r3, #9
10003708:	0a5b      	lsrs	r3, r3, #9
1000370a:	b2c8      	uxtb	r0, r1
1000370c:	e020      	b.n	10003750 <__aeabi_ui2f+0x68>
1000370e:	2999      	cmp	r1, #153	; 0x99
10003710:	dd0c      	ble.n	1000372c <__aeabi_ui2f+0x44>
10003712:	2205      	movs	r2, #5
10003714:	1c23      	adds	r3, r4, #0
10003716:	1a12      	subs	r2, r2, r0
10003718:	40d3      	lsrs	r3, r2
1000371a:	1c1a      	adds	r2, r3, #0
1000371c:	1c03      	adds	r3, r0, #0
1000371e:	331b      	adds	r3, #27
10003720:	409c      	lsls	r4, r3
10003722:	1c23      	adds	r3, r4, #0
10003724:	1e5c      	subs	r4, r3, #1
10003726:	41a3      	sbcs	r3, r4
10003728:	4313      	orrs	r3, r2
1000372a:	1c1c      	adds	r4, r3, #0
1000372c:	2805      	cmp	r0, #5
1000372e:	dd01      	ble.n	10003734 <__aeabi_ui2f+0x4c>
10003730:	1f43      	subs	r3, r0, #5
10003732:	409c      	lsls	r4, r3
10003734:	4b0f      	ldr	r3, [pc, #60]	; (10003774 <__aeabi_ui2f+0x8c>)
10003736:	4023      	ands	r3, r4
10003738:	0762      	lsls	r2, r4, #29
1000373a:	d004      	beq.n	10003746 <__aeabi_ui2f+0x5e>
1000373c:	220f      	movs	r2, #15
1000373e:	4014      	ands	r4, r2
10003740:	2c04      	cmp	r4, #4
10003742:	d000      	beq.n	10003746 <__aeabi_ui2f+0x5e>
10003744:	3304      	adds	r3, #4
10003746:	015a      	lsls	r2, r3, #5
10003748:	d40e      	bmi.n	10003768 <__aeabi_ui2f+0x80>
1000374a:	019b      	lsls	r3, r3, #6
1000374c:	0a5b      	lsrs	r3, r3, #9
1000374e:	b2c8      	uxtb	r0, r1
10003750:	025b      	lsls	r3, r3, #9
10003752:	0a5b      	lsrs	r3, r3, #9
10003754:	05c0      	lsls	r0, r0, #23
10003756:	4318      	orrs	r0, r3
10003758:	bd10      	pop	{r4, pc}
1000375a:	2000      	movs	r0, #0
1000375c:	2300      	movs	r3, #0
1000375e:	e7f7      	b.n	10003750 <__aeabi_ui2f+0x68>
10003760:	0263      	lsls	r3, r4, #9
10003762:	0a5b      	lsrs	r3, r3, #9
10003764:	b2c8      	uxtb	r0, r1
10003766:	e7f3      	b.n	10003750 <__aeabi_ui2f+0x68>
10003768:	219f      	movs	r1, #159	; 0x9f
1000376a:	4a02      	ldr	r2, [pc, #8]	; (10003774 <__aeabi_ui2f+0x8c>)
1000376c:	1a09      	subs	r1, r1, r0
1000376e:	4013      	ands	r3, r2
10003770:	e7eb      	b.n	1000374a <__aeabi_ui2f+0x62>
10003772:	46c0      	nop			; (mov r8, r8)
10003774:	fbffffff 	.word	0xfbffffff

10003778 <__aeabi_idiv0>:
10003778:	4770      	bx	lr
1000377a:	46c0      	nop			; (mov r8, r8)

1000377c <__clzsi2>:
1000377c:	211c      	movs	r1, #28
1000377e:	2301      	movs	r3, #1
10003780:	041b      	lsls	r3, r3, #16
10003782:	4298      	cmp	r0, r3
10003784:	d301      	bcc.n	1000378a <__clzsi2+0xe>
10003786:	0c00      	lsrs	r0, r0, #16
10003788:	3910      	subs	r1, #16
1000378a:	0a1b      	lsrs	r3, r3, #8
1000378c:	4298      	cmp	r0, r3
1000378e:	d301      	bcc.n	10003794 <__clzsi2+0x18>
10003790:	0a00      	lsrs	r0, r0, #8
10003792:	3908      	subs	r1, #8
10003794:	091b      	lsrs	r3, r3, #4
10003796:	4298      	cmp	r0, r3
10003798:	d301      	bcc.n	1000379e <__clzsi2+0x22>
1000379a:	0900      	lsrs	r0, r0, #4
1000379c:	3904      	subs	r1, #4
1000379e:	a202      	add	r2, pc, #8	; (adr r2, 100037a8 <__clzsi2+0x2c>)
100037a0:	5c10      	ldrb	r0, [r2, r0]
100037a2:	1840      	adds	r0, r0, r1
100037a4:	4770      	bx	lr
100037a6:	46c0      	nop			; (mov r8, r8)
100037a8:	02020304 	.word	0x02020304
100037ac:	01010101 	.word	0x01010101
	...

100037b8 <__divdi3>:
100037b8:	b5f0      	push	{r4, r5, r6, r7, lr}
100037ba:	4644      	mov	r4, r8
100037bc:	465f      	mov	r7, fp
100037be:	4656      	mov	r6, sl
100037c0:	464d      	mov	r5, r9
100037c2:	b4f0      	push	{r4, r5, r6, r7}
100037c4:	1c1c      	adds	r4, r3, #0
100037c6:	b085      	sub	sp, #20
100037c8:	2900      	cmp	r1, #0
100037ca:	da00      	bge.n	100037ce <__divdi3+0x16>
100037cc:	e0a9      	b.n	10003922 <__divdi3+0x16a>
100037ce:	1c0f      	adds	r7, r1, #0
100037d0:	2100      	movs	r1, #0
100037d2:	1c06      	adds	r6, r0, #0
100037d4:	4688      	mov	r8, r1
100037d6:	1c10      	adds	r0, r2, #0
100037d8:	1c19      	adds	r1, r3, #0
100037da:	2c00      	cmp	r4, #0
100037dc:	da00      	bge.n	100037e0 <__divdi3+0x28>
100037de:	e097      	b.n	10003910 <__divdi3+0x158>
100037e0:	1c34      	adds	r4, r6, #0
100037e2:	1c3d      	adds	r5, r7, #0
100037e4:	4682      	mov	sl, r0
100037e6:	4689      	mov	r9, r1
100037e8:	42b9      	cmp	r1, r7
100037ea:	d873      	bhi.n	100038d4 <__divdi3+0x11c>
100037ec:	d070      	beq.n	100038d0 <__divdi3+0x118>
100037ee:	4649      	mov	r1, r9
100037f0:	4650      	mov	r0, sl
100037f2:	f000 f985 	bl	10003b00 <__clzdi2>
100037f6:	4683      	mov	fp, r0
100037f8:	1c39      	adds	r1, r7, #0
100037fa:	1c30      	adds	r0, r6, #0
100037fc:	f000 f980 	bl	10003b00 <__clzdi2>
10003800:	465b      	mov	r3, fp
10003802:	1a18      	subs	r0, r3, r0
10003804:	1c03      	adds	r3, r0, #0
10003806:	4683      	mov	fp, r0
10003808:	3b20      	subs	r3, #32
1000380a:	469c      	mov	ip, r3
1000380c:	d500      	bpl.n	10003810 <__divdi3+0x58>
1000380e:	e09c      	b.n	1000394a <__divdi3+0x192>
10003810:	2300      	movs	r3, #0
10003812:	2200      	movs	r2, #0
10003814:	4651      	mov	r1, sl
10003816:	9200      	str	r2, [sp, #0]
10003818:	9301      	str	r3, [sp, #4]
1000381a:	4663      	mov	r3, ip
1000381c:	4099      	lsls	r1, r3
1000381e:	9101      	str	r1, [sp, #4]
10003820:	4651      	mov	r1, sl
10003822:	4081      	lsls	r1, r0
10003824:	9b01      	ldr	r3, [sp, #4]
10003826:	9100      	str	r1, [sp, #0]
10003828:	42bb      	cmp	r3, r7
1000382a:	d900      	bls.n	1000382e <__divdi3+0x76>
1000382c:	e083      	b.n	10003936 <__divdi3+0x17e>
1000382e:	d100      	bne.n	10003832 <__divdi3+0x7a>
10003830:	e07e      	b.n	10003930 <__divdi3+0x178>
10003832:	9a00      	ldr	r2, [sp, #0]
10003834:	9b01      	ldr	r3, [sp, #4]
10003836:	1c34      	adds	r4, r6, #0
10003838:	1c3d      	adds	r5, r7, #0
1000383a:	1aa4      	subs	r4, r4, r2
1000383c:	419d      	sbcs	r5, r3
1000383e:	4663      	mov	r3, ip
10003840:	2b00      	cmp	r3, #0
10003842:	da00      	bge.n	10003846 <__divdi3+0x8e>
10003844:	e09a      	b.n	1000397c <__divdi3+0x1c4>
10003846:	2600      	movs	r6, #0
10003848:	2700      	movs	r7, #0
1000384a:	9602      	str	r6, [sp, #8]
1000384c:	9703      	str	r7, [sp, #12]
1000384e:	3601      	adds	r6, #1
10003850:	409e      	lsls	r6, r3
10003852:	9603      	str	r6, [sp, #12]
10003854:	2601      	movs	r6, #1
10003856:	4086      	lsls	r6, r0
10003858:	9602      	str	r6, [sp, #8]
1000385a:	2800      	cmp	r0, #0
1000385c:	d100      	bne.n	10003860 <__divdi3+0xa8>
1000385e:	e071      	b.n	10003944 <__divdi3+0x18c>
10003860:	9900      	ldr	r1, [sp, #0]
10003862:	9a01      	ldr	r2, [sp, #4]
10003864:	07d3      	lsls	r3, r2, #31
10003866:	4699      	mov	r9, r3
10003868:	464b      	mov	r3, r9
1000386a:	084e      	lsrs	r6, r1, #1
1000386c:	431e      	orrs	r6, r3
1000386e:	0857      	lsrs	r7, r2, #1
10003870:	2300      	movs	r3, #0
10003872:	2201      	movs	r2, #1
10003874:	e00c      	b.n	10003890 <__divdi3+0xd8>
10003876:	42af      	cmp	r7, r5
10003878:	d101      	bne.n	1000387e <__divdi3+0xc6>
1000387a:	42a6      	cmp	r6, r4
1000387c:	d80a      	bhi.n	10003894 <__divdi3+0xdc>
1000387e:	1ba4      	subs	r4, r4, r6
10003880:	41bd      	sbcs	r5, r7
10003882:	1924      	adds	r4, r4, r4
10003884:	416d      	adcs	r5, r5
10003886:	3801      	subs	r0, #1
10003888:	18a4      	adds	r4, r4, r2
1000388a:	415d      	adcs	r5, r3
1000388c:	2800      	cmp	r0, #0
1000388e:	d006      	beq.n	1000389e <__divdi3+0xe6>
10003890:	42af      	cmp	r7, r5
10003892:	d9f0      	bls.n	10003876 <__divdi3+0xbe>
10003894:	3801      	subs	r0, #1
10003896:	1924      	adds	r4, r4, r4
10003898:	416d      	adcs	r5, r5
1000389a:	2800      	cmp	r0, #0
1000389c:	d1f8      	bne.n	10003890 <__divdi3+0xd8>
1000389e:	2220      	movs	r2, #32
100038a0:	9e02      	ldr	r6, [sp, #8]
100038a2:	9f03      	ldr	r7, [sp, #12]
100038a4:	465b      	mov	r3, fp
100038a6:	4252      	negs	r2, r2
100038a8:	1936      	adds	r6, r6, r4
100038aa:	416f      	adcs	r7, r5
100038ac:	1899      	adds	r1, r3, r2
100038ae:	d45a      	bmi.n	10003966 <__divdi3+0x1ae>
100038b0:	1c28      	adds	r0, r5, #0
100038b2:	40c8      	lsrs	r0, r1
100038b4:	1c2c      	adds	r4, r5, #0
100038b6:	465b      	mov	r3, fp
100038b8:	40dc      	lsrs	r4, r3
100038ba:	2900      	cmp	r1, #0
100038bc:	db68      	blt.n	10003990 <__divdi3+0x1d8>
100038be:	1c04      	adds	r4, r0, #0
100038c0:	408c      	lsls	r4, r1
100038c2:	1c23      	adds	r3, r4, #0
100038c4:	4659      	mov	r1, fp
100038c6:	4088      	lsls	r0, r1
100038c8:	1c02      	adds	r2, r0, #0
100038ca:	1ab6      	subs	r6, r6, r2
100038cc:	419f      	sbcs	r7, r3
100038ce:	e003      	b.n	100038d8 <__divdi3+0x120>
100038d0:	42b0      	cmp	r0, r6
100038d2:	d98c      	bls.n	100037ee <__divdi3+0x36>
100038d4:	2600      	movs	r6, #0
100038d6:	2700      	movs	r7, #0
100038d8:	4641      	mov	r1, r8
100038da:	1e4b      	subs	r3, r1, #1
100038dc:	4199      	sbcs	r1, r3
100038de:	2300      	movs	r3, #0
100038e0:	9100      	str	r1, [sp, #0]
100038e2:	9301      	str	r3, [sp, #4]
100038e4:	9a00      	ldr	r2, [sp, #0]
100038e6:	9b01      	ldr	r3, [sp, #4]
100038e8:	2500      	movs	r5, #0
100038ea:	4254      	negs	r4, r2
100038ec:	419d      	sbcs	r5, r3
100038ee:	1c33      	adds	r3, r6, #0
100038f0:	4063      	eors	r3, r4
100038f2:	1c18      	adds	r0, r3, #0
100038f4:	1c3b      	adds	r3, r7, #0
100038f6:	406b      	eors	r3, r5
100038f8:	1c19      	adds	r1, r3, #0
100038fa:	9b00      	ldr	r3, [sp, #0]
100038fc:	9c01      	ldr	r4, [sp, #4]
100038fe:	18c0      	adds	r0, r0, r3
10003900:	4161      	adcs	r1, r4
10003902:	b005      	add	sp, #20
10003904:	bc3c      	pop	{r2, r3, r4, r5}
10003906:	4690      	mov	r8, r2
10003908:	4699      	mov	r9, r3
1000390a:	46a2      	mov	sl, r4
1000390c:	46ab      	mov	fp, r5
1000390e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003910:	4643      	mov	r3, r8
10003912:	43db      	mvns	r3, r3
10003914:	1c0c      	adds	r4, r1, #0
10003916:	4698      	mov	r8, r3
10003918:	1c13      	adds	r3, r2, #0
1000391a:	2100      	movs	r1, #0
1000391c:	4258      	negs	r0, r3
1000391e:	41a1      	sbcs	r1, r4
10003920:	e75e      	b.n	100037e0 <__divdi3+0x28>
10003922:	2700      	movs	r7, #0
10003924:	4246      	negs	r6, r0
10003926:	418f      	sbcs	r7, r1
10003928:	2101      	movs	r1, #1
1000392a:	4249      	negs	r1, r1
1000392c:	4688      	mov	r8, r1
1000392e:	e752      	b.n	100037d6 <__divdi3+0x1e>
10003930:	42b1      	cmp	r1, r6
10003932:	d800      	bhi.n	10003936 <__divdi3+0x17e>
10003934:	e77d      	b.n	10003832 <__divdi3+0x7a>
10003936:	2600      	movs	r6, #0
10003938:	2700      	movs	r7, #0
1000393a:	9602      	str	r6, [sp, #8]
1000393c:	9703      	str	r7, [sp, #12]
1000393e:	2800      	cmp	r0, #0
10003940:	d000      	beq.n	10003944 <__divdi3+0x18c>
10003942:	e78d      	b.n	10003860 <__divdi3+0xa8>
10003944:	9e02      	ldr	r6, [sp, #8]
10003946:	9f03      	ldr	r7, [sp, #12]
10003948:	e7c6      	b.n	100038d8 <__divdi3+0x120>
1000394a:	2120      	movs	r1, #32
1000394c:	4653      	mov	r3, sl
1000394e:	1a09      	subs	r1, r1, r0
10003950:	40cb      	lsrs	r3, r1
10003952:	2200      	movs	r2, #0
10003954:	1c19      	adds	r1, r3, #0
10003956:	2300      	movs	r3, #0
10003958:	9200      	str	r2, [sp, #0]
1000395a:	9301      	str	r3, [sp, #4]
1000395c:	464b      	mov	r3, r9
1000395e:	4083      	lsls	r3, r0
10003960:	430b      	orrs	r3, r1
10003962:	9301      	str	r3, [sp, #4]
10003964:	e75c      	b.n	10003820 <__divdi3+0x68>
10003966:	465a      	mov	r2, fp
10003968:	2320      	movs	r3, #32
1000396a:	1a9b      	subs	r3, r3, r2
1000396c:	1c2a      	adds	r2, r5, #0
1000396e:	409a      	lsls	r2, r3
10003970:	1c20      	adds	r0, r4, #0
10003972:	1c13      	adds	r3, r2, #0
10003974:	465a      	mov	r2, fp
10003976:	40d0      	lsrs	r0, r2
10003978:	4318      	orrs	r0, r3
1000397a:	e79b      	b.n	100038b4 <__divdi3+0xfc>
1000397c:	2620      	movs	r6, #32
1000397e:	2700      	movs	r7, #0
10003980:	1a33      	subs	r3, r6, r0
10003982:	2600      	movs	r6, #0
10003984:	9602      	str	r6, [sp, #8]
10003986:	9703      	str	r7, [sp, #12]
10003988:	2701      	movs	r7, #1
1000398a:	40df      	lsrs	r7, r3
1000398c:	9703      	str	r7, [sp, #12]
1000398e:	e761      	b.n	10003854 <__divdi3+0x9c>
10003990:	465b      	mov	r3, fp
10003992:	2120      	movs	r1, #32
10003994:	465d      	mov	r5, fp
10003996:	1ac9      	subs	r1, r1, r3
10003998:	1c03      	adds	r3, r0, #0
1000399a:	40ac      	lsls	r4, r5
1000399c:	40cb      	lsrs	r3, r1
1000399e:	1c19      	adds	r1, r3, #0
100039a0:	1c23      	adds	r3, r4, #0
100039a2:	430b      	orrs	r3, r1
100039a4:	e78e      	b.n	100038c4 <__divdi3+0x10c>
100039a6:	46c0      	nop			; (mov r8, r8)

100039a8 <__udivdi3>:
100039a8:	b5f0      	push	{r4, r5, r6, r7, lr}
100039aa:	4645      	mov	r5, r8
100039ac:	464e      	mov	r6, r9
100039ae:	4657      	mov	r7, sl
100039b0:	b4e0      	push	{r5, r6, r7}
100039b2:	1c04      	adds	r4, r0, #0
100039b4:	b082      	sub	sp, #8
100039b6:	1c0d      	adds	r5, r1, #0
100039b8:	4691      	mov	r9, r2
100039ba:	4698      	mov	r8, r3
100039bc:	428b      	cmp	r3, r1
100039be:	d862      	bhi.n	10003a86 <__udivdi3+0xde>
100039c0:	d05f      	beq.n	10003a82 <__udivdi3+0xda>
100039c2:	4641      	mov	r1, r8
100039c4:	4648      	mov	r0, r9
100039c6:	f000 f89b 	bl	10003b00 <__clzdi2>
100039ca:	1c29      	adds	r1, r5, #0
100039cc:	1c06      	adds	r6, r0, #0
100039ce:	1c20      	adds	r0, r4, #0
100039d0:	f000 f896 	bl	10003b00 <__clzdi2>
100039d4:	2320      	movs	r3, #32
100039d6:	1a31      	subs	r1, r6, r0
100039d8:	425b      	negs	r3, r3
100039da:	468a      	mov	sl, r1
100039dc:	18c8      	adds	r0, r1, r3
100039de:	d465      	bmi.n	10003aac <__udivdi3+0x104>
100039e0:	464b      	mov	r3, r9
100039e2:	4083      	lsls	r3, r0
100039e4:	1c1f      	adds	r7, r3, #0
100039e6:	464b      	mov	r3, r9
100039e8:	408b      	lsls	r3, r1
100039ea:	1c1e      	adds	r6, r3, #0
100039ec:	42af      	cmp	r7, r5
100039ee:	d858      	bhi.n	10003aa2 <__udivdi3+0xfa>
100039f0:	d055      	beq.n	10003a9e <__udivdi3+0xf6>
100039f2:	1ba4      	subs	r4, r4, r6
100039f4:	41bd      	sbcs	r5, r7
100039f6:	2800      	cmp	r0, #0
100039f8:	da00      	bge.n	100039fc <__udivdi3+0x54>
100039fa:	e077      	b.n	10003aec <__udivdi3+0x144>
100039fc:	2200      	movs	r2, #0
100039fe:	2300      	movs	r3, #0
10003a00:	9200      	str	r2, [sp, #0]
10003a02:	9301      	str	r3, [sp, #4]
10003a04:	3201      	adds	r2, #1
10003a06:	4082      	lsls	r2, r0
10003a08:	9201      	str	r2, [sp, #4]
10003a0a:	2301      	movs	r3, #1
10003a0c:	408b      	lsls	r3, r1
10003a0e:	9300      	str	r3, [sp, #0]
10003a10:	2900      	cmp	r1, #0
10003a12:	d03c      	beq.n	10003a8e <__udivdi3+0xe6>
10003a14:	07fb      	lsls	r3, r7, #31
10003a16:	4698      	mov	r8, r3
10003a18:	4640      	mov	r0, r8
10003a1a:	0872      	lsrs	r2, r6, #1
10003a1c:	087b      	lsrs	r3, r7, #1
10003a1e:	4302      	orrs	r2, r0
10003a20:	2601      	movs	r6, #1
10003a22:	2700      	movs	r7, #0
10003a24:	e00c      	b.n	10003a40 <__udivdi3+0x98>
10003a26:	42ab      	cmp	r3, r5
10003a28:	d101      	bne.n	10003a2e <__udivdi3+0x86>
10003a2a:	42a2      	cmp	r2, r4
10003a2c:	d80a      	bhi.n	10003a44 <__udivdi3+0x9c>
10003a2e:	1aa4      	subs	r4, r4, r2
10003a30:	419d      	sbcs	r5, r3
10003a32:	1924      	adds	r4, r4, r4
10003a34:	416d      	adcs	r5, r5
10003a36:	3901      	subs	r1, #1
10003a38:	19a4      	adds	r4, r4, r6
10003a3a:	417d      	adcs	r5, r7
10003a3c:	2900      	cmp	r1, #0
10003a3e:	d006      	beq.n	10003a4e <__udivdi3+0xa6>
10003a40:	42ab      	cmp	r3, r5
10003a42:	d9f0      	bls.n	10003a26 <__udivdi3+0x7e>
10003a44:	3901      	subs	r1, #1
10003a46:	1924      	adds	r4, r4, r4
10003a48:	416d      	adcs	r5, r5
10003a4a:	2900      	cmp	r1, #0
10003a4c:	d1f8      	bne.n	10003a40 <__udivdi3+0x98>
10003a4e:	2220      	movs	r2, #32
10003a50:	9800      	ldr	r0, [sp, #0]
10003a52:	9901      	ldr	r1, [sp, #4]
10003a54:	4653      	mov	r3, sl
10003a56:	4252      	negs	r2, r2
10003a58:	1900      	adds	r0, r0, r4
10003a5a:	4169      	adcs	r1, r5
10003a5c:	189e      	adds	r6, r3, r2
10003a5e:	d43a      	bmi.n	10003ad6 <__udivdi3+0x12e>
10003a60:	1c2f      	adds	r7, r5, #0
10003a62:	40f7      	lsrs	r7, r6
10003a64:	4653      	mov	r3, sl
10003a66:	40dd      	lsrs	r5, r3
10003a68:	2e00      	cmp	r6, #0
10003a6a:	db29      	blt.n	10003ac0 <__udivdi3+0x118>
10003a6c:	1c3c      	adds	r4, r7, #0
10003a6e:	40b4      	lsls	r4, r6
10003a70:	1c23      	adds	r3, r4, #0
10003a72:	4654      	mov	r4, sl
10003a74:	40a7      	lsls	r7, r4
10003a76:	1c3a      	adds	r2, r7, #0
10003a78:	1a80      	subs	r0, r0, r2
10003a7a:	4199      	sbcs	r1, r3
10003a7c:	9000      	str	r0, [sp, #0]
10003a7e:	9101      	str	r1, [sp, #4]
10003a80:	e005      	b.n	10003a8e <__udivdi3+0xe6>
10003a82:	4282      	cmp	r2, r0
10003a84:	d99d      	bls.n	100039c2 <__udivdi3+0x1a>
10003a86:	2300      	movs	r3, #0
10003a88:	2400      	movs	r4, #0
10003a8a:	9300      	str	r3, [sp, #0]
10003a8c:	9401      	str	r4, [sp, #4]
10003a8e:	9800      	ldr	r0, [sp, #0]
10003a90:	9901      	ldr	r1, [sp, #4]
10003a92:	b002      	add	sp, #8
10003a94:	bc1c      	pop	{r2, r3, r4}
10003a96:	4690      	mov	r8, r2
10003a98:	4699      	mov	r9, r3
10003a9a:	46a2      	mov	sl, r4
10003a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003a9e:	42a3      	cmp	r3, r4
10003aa0:	d9a7      	bls.n	100039f2 <__udivdi3+0x4a>
10003aa2:	2200      	movs	r2, #0
10003aa4:	2300      	movs	r3, #0
10003aa6:	9200      	str	r2, [sp, #0]
10003aa8:	9301      	str	r3, [sp, #4]
10003aaa:	e7b1      	b.n	10003a10 <__udivdi3+0x68>
10003aac:	2220      	movs	r2, #32
10003aae:	464b      	mov	r3, r9
10003ab0:	1a52      	subs	r2, r2, r1
10003ab2:	40d3      	lsrs	r3, r2
10003ab4:	1c1a      	adds	r2, r3, #0
10003ab6:	4643      	mov	r3, r8
10003ab8:	408b      	lsls	r3, r1
10003aba:	1c1f      	adds	r7, r3, #0
10003abc:	4317      	orrs	r7, r2
10003abe:	e792      	b.n	100039e6 <__udivdi3+0x3e>
10003ac0:	4653      	mov	r3, sl
10003ac2:	2420      	movs	r4, #32
10003ac4:	4656      	mov	r6, sl
10003ac6:	1ae4      	subs	r4, r4, r3
10003ac8:	1c3b      	adds	r3, r7, #0
10003aca:	40b5      	lsls	r5, r6
10003acc:	40e3      	lsrs	r3, r4
10003ace:	1c1c      	adds	r4, r3, #0
10003ad0:	1c2b      	adds	r3, r5, #0
10003ad2:	4323      	orrs	r3, r4
10003ad4:	e7cd      	b.n	10003a72 <__udivdi3+0xca>
10003ad6:	4652      	mov	r2, sl
10003ad8:	2320      	movs	r3, #32
10003ada:	1a9b      	subs	r3, r3, r2
10003adc:	1c2a      	adds	r2, r5, #0
10003ade:	409a      	lsls	r2, r3
10003ae0:	1c27      	adds	r7, r4, #0
10003ae2:	1c13      	adds	r3, r2, #0
10003ae4:	4652      	mov	r2, sl
10003ae6:	40d7      	lsrs	r7, r2
10003ae8:	431f      	orrs	r7, r3
10003aea:	e7bb      	b.n	10003a64 <__udivdi3+0xbc>
10003aec:	2320      	movs	r3, #32
10003aee:	2200      	movs	r2, #0
10003af0:	1a58      	subs	r0, r3, r1
10003af2:	2300      	movs	r3, #0
10003af4:	9200      	str	r2, [sp, #0]
10003af6:	9301      	str	r3, [sp, #4]
10003af8:	3201      	adds	r2, #1
10003afa:	40c2      	lsrs	r2, r0
10003afc:	9201      	str	r2, [sp, #4]
10003afe:	e784      	b.n	10003a0a <__udivdi3+0x62>

10003b00 <__clzdi2>:
10003b00:	b510      	push	{r4, lr}
10003b02:	2900      	cmp	r1, #0
10003b04:	d103      	bne.n	10003b0e <__clzdi2+0xe>
10003b06:	f7ff fe39 	bl	1000377c <__clzsi2>
10003b0a:	3020      	adds	r0, #32
10003b0c:	e002      	b.n	10003b14 <__clzdi2+0x14>
10003b0e:	1c08      	adds	r0, r1, #0
10003b10:	f7ff fe34 	bl	1000377c <__clzsi2>
10003b14:	bd10      	pop	{r4, pc}
10003b16:	46c0      	nop			; (mov r8, r8)

10003b18 <__errno>:
10003b18:	4b01      	ldr	r3, [pc, #4]	; (10003b20 <__errno+0x8>)
10003b1a:	6818      	ldr	r0, [r3, #0]
10003b1c:	4770      	bx	lr
10003b1e:	46c0      	nop			; (mov r8, r8)
10003b20:	200008d0 	.word	0x200008d0

10003b24 <__libc_init_array>:
10003b24:	4b0e      	ldr	r3, [pc, #56]	; (10003b60 <__libc_init_array+0x3c>)
10003b26:	b570      	push	{r4, r5, r6, lr}
10003b28:	2500      	movs	r5, #0
10003b2a:	1c1e      	adds	r6, r3, #0
10003b2c:	4c0d      	ldr	r4, [pc, #52]	; (10003b64 <__libc_init_array+0x40>)
10003b2e:	1ae4      	subs	r4, r4, r3
10003b30:	10a4      	asrs	r4, r4, #2
10003b32:	42a5      	cmp	r5, r4
10003b34:	d004      	beq.n	10003b40 <__libc_init_array+0x1c>
10003b36:	00ab      	lsls	r3, r5, #2
10003b38:	58f3      	ldr	r3, [r6, r3]
10003b3a:	4798      	blx	r3
10003b3c:	3501      	adds	r5, #1
10003b3e:	e7f8      	b.n	10003b32 <__libc_init_array+0xe>
10003b40:	f7fd ffe2 	bl	10001b08 <_init>
10003b44:	4b08      	ldr	r3, [pc, #32]	; (10003b68 <__libc_init_array+0x44>)
10003b46:	2500      	movs	r5, #0
10003b48:	1c1e      	adds	r6, r3, #0
10003b4a:	4c08      	ldr	r4, [pc, #32]	; (10003b6c <__libc_init_array+0x48>)
10003b4c:	1ae4      	subs	r4, r4, r3
10003b4e:	10a4      	asrs	r4, r4, #2
10003b50:	42a5      	cmp	r5, r4
10003b52:	d004      	beq.n	10003b5e <__libc_init_array+0x3a>
10003b54:	00ab      	lsls	r3, r5, #2
10003b56:	58f3      	ldr	r3, [r6, r3]
10003b58:	4798      	blx	r3
10003b5a:	3501      	adds	r5, #1
10003b5c:	e7f8      	b.n	10003b50 <__libc_init_array+0x2c>
10003b5e:	bd70      	pop	{r4, r5, r6, pc}
10003b60:	200008d4 	.word	0x200008d4
10003b64:	200008d4 	.word	0x200008d4
10003b68:	200008d4 	.word	0x200008d4
10003b6c:	200008d4 	.word	0x200008d4

10003b70 <memcpy>:
10003b70:	2300      	movs	r3, #0
10003b72:	b510      	push	{r4, lr}
10003b74:	4293      	cmp	r3, r2
10003b76:	d003      	beq.n	10003b80 <memcpy+0x10>
10003b78:	5ccc      	ldrb	r4, [r1, r3]
10003b7a:	54c4      	strb	r4, [r0, r3]
10003b7c:	3301      	adds	r3, #1
10003b7e:	e7f9      	b.n	10003b74 <memcpy+0x4>
10003b80:	bd10      	pop	{r4, pc}
	...

10003b84 <siprintf>:
10003b84:	b40e      	push	{r1, r2, r3}
10003b86:	b510      	push	{r4, lr}
10003b88:	b09d      	sub	sp, #116	; 0x74
10003b8a:	a902      	add	r1, sp, #8
10003b8c:	9002      	str	r0, [sp, #8]
10003b8e:	6108      	str	r0, [r1, #16]
10003b90:	480b      	ldr	r0, [pc, #44]	; (10003bc0 <siprintf+0x3c>)
10003b92:	2482      	movs	r4, #130	; 0x82
10003b94:	6088      	str	r0, [r1, #8]
10003b96:	6148      	str	r0, [r1, #20]
10003b98:	2001      	movs	r0, #1
10003b9a:	4240      	negs	r0, r0
10003b9c:	ab1f      	add	r3, sp, #124	; 0x7c
10003b9e:	81c8      	strh	r0, [r1, #14]
10003ba0:	4808      	ldr	r0, [pc, #32]	; (10003bc4 <siprintf+0x40>)
10003ba2:	cb04      	ldmia	r3!, {r2}
10003ba4:	00a4      	lsls	r4, r4, #2
10003ba6:	6800      	ldr	r0, [r0, #0]
10003ba8:	9301      	str	r3, [sp, #4]
10003baa:	818c      	strh	r4, [r1, #12]
10003bac:	f000 f86c 	bl	10003c88 <_svfiprintf_r>
10003bb0:	2300      	movs	r3, #0
10003bb2:	9a02      	ldr	r2, [sp, #8]
10003bb4:	7013      	strb	r3, [r2, #0]
10003bb6:	b01d      	add	sp, #116	; 0x74
10003bb8:	bc10      	pop	{r4}
10003bba:	bc08      	pop	{r3}
10003bbc:	b003      	add	sp, #12
10003bbe:	4718      	bx	r3
10003bc0:	7fffffff 	.word	0x7fffffff
10003bc4:	200008d0 	.word	0x200008d0

10003bc8 <__ssputs_r>:
10003bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
10003bca:	688e      	ldr	r6, [r1, #8]
10003bcc:	b085      	sub	sp, #20
10003bce:	1c07      	adds	r7, r0, #0
10003bd0:	1c0c      	adds	r4, r1, #0
10003bd2:	9203      	str	r2, [sp, #12]
10003bd4:	9301      	str	r3, [sp, #4]
10003bd6:	42b3      	cmp	r3, r6
10003bd8:	d345      	bcc.n	10003c66 <__ssputs_r+0x9e>
10003bda:	2390      	movs	r3, #144	; 0x90
10003bdc:	898a      	ldrh	r2, [r1, #12]
10003bde:	00db      	lsls	r3, r3, #3
10003be0:	421a      	tst	r2, r3
10003be2:	d03d      	beq.n	10003c60 <__ssputs_r+0x98>
10003be4:	2503      	movs	r5, #3
10003be6:	6909      	ldr	r1, [r1, #16]
10003be8:	6823      	ldr	r3, [r4, #0]
10003bea:	9801      	ldr	r0, [sp, #4]
10003bec:	1a5b      	subs	r3, r3, r1
10003bee:	9302      	str	r3, [sp, #8]
10003bf0:	6963      	ldr	r3, [r4, #20]
10003bf2:	435d      	muls	r5, r3
10003bf4:	0feb      	lsrs	r3, r5, #31
10003bf6:	195d      	adds	r5, r3, r5
10003bf8:	9b02      	ldr	r3, [sp, #8]
10003bfa:	106d      	asrs	r5, r5, #1
10003bfc:	3301      	adds	r3, #1
10003bfe:	181b      	adds	r3, r3, r0
10003c00:	429d      	cmp	r5, r3
10003c02:	d200      	bcs.n	10003c06 <__ssputs_r+0x3e>
10003c04:	1c1d      	adds	r5, r3, #0
10003c06:	1c38      	adds	r0, r7, #0
10003c08:	0553      	lsls	r3, r2, #21
10003c0a:	d50f      	bpl.n	10003c2c <__ssputs_r+0x64>
10003c0c:	1c29      	adds	r1, r5, #0
10003c0e:	f000 fb1d 	bl	1000424c <_malloc_r>
10003c12:	1e06      	subs	r6, r0, #0
10003c14:	d013      	beq.n	10003c3e <__ssputs_r+0x76>
10003c16:	9a02      	ldr	r2, [sp, #8]
10003c18:	6921      	ldr	r1, [r4, #16]
10003c1a:	f7ff ffa9 	bl	10003b70 <memcpy>
10003c1e:	89a2      	ldrh	r2, [r4, #12]
10003c20:	4b18      	ldr	r3, [pc, #96]	; (10003c84 <__ssputs_r+0xbc>)
10003c22:	4013      	ands	r3, r2
10003c24:	2280      	movs	r2, #128	; 0x80
10003c26:	4313      	orrs	r3, r2
10003c28:	81a3      	strh	r3, [r4, #12]
10003c2a:	e011      	b.n	10003c50 <__ssputs_r+0x88>
10003c2c:	1c2a      	adds	r2, r5, #0
10003c2e:	f000 fb65 	bl	100042fc <_realloc_r>
10003c32:	1e06      	subs	r6, r0, #0
10003c34:	d10c      	bne.n	10003c50 <__ssputs_r+0x88>
10003c36:	1c38      	adds	r0, r7, #0
10003c38:	6921      	ldr	r1, [r4, #16]
10003c3a:	f000 fac1 	bl	100041c0 <_free_r>
10003c3e:	230c      	movs	r3, #12
10003c40:	2240      	movs	r2, #64	; 0x40
10003c42:	2001      	movs	r0, #1
10003c44:	603b      	str	r3, [r7, #0]
10003c46:	89a3      	ldrh	r3, [r4, #12]
10003c48:	4240      	negs	r0, r0
10003c4a:	4313      	orrs	r3, r2
10003c4c:	81a3      	strh	r3, [r4, #12]
10003c4e:	e017      	b.n	10003c80 <__ssputs_r+0xb8>
10003c50:	9b02      	ldr	r3, [sp, #8]
10003c52:	6126      	str	r6, [r4, #16]
10003c54:	18f6      	adds	r6, r6, r3
10003c56:	6026      	str	r6, [r4, #0]
10003c58:	6165      	str	r5, [r4, #20]
10003c5a:	9e01      	ldr	r6, [sp, #4]
10003c5c:	1aed      	subs	r5, r5, r3
10003c5e:	60a5      	str	r5, [r4, #8]
10003c60:	9b01      	ldr	r3, [sp, #4]
10003c62:	42b3      	cmp	r3, r6
10003c64:	d200      	bcs.n	10003c68 <__ssputs_r+0xa0>
10003c66:	9e01      	ldr	r6, [sp, #4]
10003c68:	1c32      	adds	r2, r6, #0
10003c6a:	6820      	ldr	r0, [r4, #0]
10003c6c:	9903      	ldr	r1, [sp, #12]
10003c6e:	f000 fa92 	bl	10004196 <memmove>
10003c72:	2000      	movs	r0, #0
10003c74:	68a3      	ldr	r3, [r4, #8]
10003c76:	1b9b      	subs	r3, r3, r6
10003c78:	60a3      	str	r3, [r4, #8]
10003c7a:	6823      	ldr	r3, [r4, #0]
10003c7c:	199e      	adds	r6, r3, r6
10003c7e:	6026      	str	r6, [r4, #0]
10003c80:	b005      	add	sp, #20
10003c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003c84:	fffffb7f 	.word	0xfffffb7f

10003c88 <_svfiprintf_r>:
10003c88:	b5f0      	push	{r4, r5, r6, r7, lr}
10003c8a:	b09f      	sub	sp, #124	; 0x7c
10003c8c:	9002      	str	r0, [sp, #8]
10003c8e:	9305      	str	r3, [sp, #20]
10003c90:	898b      	ldrh	r3, [r1, #12]
10003c92:	1c0e      	adds	r6, r1, #0
10003c94:	1c17      	adds	r7, r2, #0
10003c96:	061b      	lsls	r3, r3, #24
10003c98:	d510      	bpl.n	10003cbc <_svfiprintf_r+0x34>
10003c9a:	690b      	ldr	r3, [r1, #16]
10003c9c:	2b00      	cmp	r3, #0
10003c9e:	d10d      	bne.n	10003cbc <_svfiprintf_r+0x34>
10003ca0:	2140      	movs	r1, #64	; 0x40
10003ca2:	f000 fad3 	bl	1000424c <_malloc_r>
10003ca6:	6030      	str	r0, [r6, #0]
10003ca8:	6130      	str	r0, [r6, #16]
10003caa:	2800      	cmp	r0, #0
10003cac:	d104      	bne.n	10003cb8 <_svfiprintf_r+0x30>
10003cae:	230c      	movs	r3, #12
10003cb0:	9a02      	ldr	r2, [sp, #8]
10003cb2:	3801      	subs	r0, #1
10003cb4:	6013      	str	r3, [r2, #0]
10003cb6:	e0d0      	b.n	10003e5a <_svfiprintf_r+0x1d2>
10003cb8:	2340      	movs	r3, #64	; 0x40
10003cba:	6173      	str	r3, [r6, #20]
10003cbc:	2300      	movs	r3, #0
10003cbe:	ad06      	add	r5, sp, #24
10003cc0:	616b      	str	r3, [r5, #20]
10003cc2:	3320      	adds	r3, #32
10003cc4:	766b      	strb	r3, [r5, #25]
10003cc6:	3310      	adds	r3, #16
10003cc8:	76ab      	strb	r3, [r5, #26]
10003cca:	1c3c      	adds	r4, r7, #0
10003ccc:	7823      	ldrb	r3, [r4, #0]
10003cce:	2b00      	cmp	r3, #0
10003cd0:	d103      	bne.n	10003cda <_svfiprintf_r+0x52>
10003cd2:	1be3      	subs	r3, r4, r7
10003cd4:	9304      	str	r3, [sp, #16]
10003cd6:	d012      	beq.n	10003cfe <_svfiprintf_r+0x76>
10003cd8:	e003      	b.n	10003ce2 <_svfiprintf_r+0x5a>
10003cda:	2b25      	cmp	r3, #37	; 0x25
10003cdc:	d0f9      	beq.n	10003cd2 <_svfiprintf_r+0x4a>
10003cde:	3401      	adds	r4, #1
10003ce0:	e7f4      	b.n	10003ccc <_svfiprintf_r+0x44>
10003ce2:	9b04      	ldr	r3, [sp, #16]
10003ce4:	9802      	ldr	r0, [sp, #8]
10003ce6:	1c31      	adds	r1, r6, #0
10003ce8:	1c3a      	adds	r2, r7, #0
10003cea:	f7ff ff6d 	bl	10003bc8 <__ssputs_r>
10003cee:	1c43      	adds	r3, r0, #1
10003cf0:	d100      	bne.n	10003cf4 <_svfiprintf_r+0x6c>
10003cf2:	e0ac      	b.n	10003e4e <_svfiprintf_r+0x1c6>
10003cf4:	696a      	ldr	r2, [r5, #20]
10003cf6:	9b04      	ldr	r3, [sp, #16]
10003cf8:	4694      	mov	ip, r2
10003cfa:	4463      	add	r3, ip
10003cfc:	616b      	str	r3, [r5, #20]
10003cfe:	7823      	ldrb	r3, [r4, #0]
10003d00:	2b00      	cmp	r3, #0
10003d02:	d100      	bne.n	10003d06 <_svfiprintf_r+0x7e>
10003d04:	e0a3      	b.n	10003e4e <_svfiprintf_r+0x1c6>
10003d06:	2201      	movs	r2, #1
10003d08:	2300      	movs	r3, #0
10003d0a:	4252      	negs	r2, r2
10003d0c:	606a      	str	r2, [r5, #4]
10003d0e:	a902      	add	r1, sp, #8
10003d10:	3254      	adds	r2, #84	; 0x54
10003d12:	1852      	adds	r2, r2, r1
10003d14:	3401      	adds	r4, #1
10003d16:	602b      	str	r3, [r5, #0]
10003d18:	60eb      	str	r3, [r5, #12]
10003d1a:	60ab      	str	r3, [r5, #8]
10003d1c:	7013      	strb	r3, [r2, #0]
10003d1e:	65ab      	str	r3, [r5, #88]	; 0x58
10003d20:	4f4f      	ldr	r7, [pc, #316]	; (10003e60 <_svfiprintf_r+0x1d8>)
10003d22:	7821      	ldrb	r1, [r4, #0]
10003d24:	1c38      	adds	r0, r7, #0
10003d26:	2205      	movs	r2, #5
10003d28:	f000 fa2a 	bl	10004180 <memchr>
10003d2c:	2800      	cmp	r0, #0
10003d2e:	d008      	beq.n	10003d42 <_svfiprintf_r+0xba>
10003d30:	1bc0      	subs	r0, r0, r7
10003d32:	2701      	movs	r7, #1
10003d34:	4087      	lsls	r7, r0
10003d36:	1c38      	adds	r0, r7, #0
10003d38:	682b      	ldr	r3, [r5, #0]
10003d3a:	3401      	adds	r4, #1
10003d3c:	4318      	orrs	r0, r3
10003d3e:	6028      	str	r0, [r5, #0]
10003d40:	e7ee      	b.n	10003d20 <_svfiprintf_r+0x98>
10003d42:	682b      	ldr	r3, [r5, #0]
10003d44:	06da      	lsls	r2, r3, #27
10003d46:	d504      	bpl.n	10003d52 <_svfiprintf_r+0xca>
10003d48:	2253      	movs	r2, #83	; 0x53
10003d4a:	2120      	movs	r1, #32
10003d4c:	a802      	add	r0, sp, #8
10003d4e:	1812      	adds	r2, r2, r0
10003d50:	7011      	strb	r1, [r2, #0]
10003d52:	071a      	lsls	r2, r3, #28
10003d54:	d504      	bpl.n	10003d60 <_svfiprintf_r+0xd8>
10003d56:	2253      	movs	r2, #83	; 0x53
10003d58:	212b      	movs	r1, #43	; 0x2b
10003d5a:	a802      	add	r0, sp, #8
10003d5c:	1812      	adds	r2, r2, r0
10003d5e:	7011      	strb	r1, [r2, #0]
10003d60:	7822      	ldrb	r2, [r4, #0]
10003d62:	2a2a      	cmp	r2, #42	; 0x2a
10003d64:	d001      	beq.n	10003d6a <_svfiprintf_r+0xe2>
10003d66:	9b09      	ldr	r3, [sp, #36]	; 0x24
10003d68:	e00e      	b.n	10003d88 <_svfiprintf_r+0x100>
10003d6a:	9a05      	ldr	r2, [sp, #20]
10003d6c:	1d11      	adds	r1, r2, #4
10003d6e:	6812      	ldr	r2, [r2, #0]
10003d70:	9105      	str	r1, [sp, #20]
10003d72:	2a00      	cmp	r2, #0
10003d74:	db01      	blt.n	10003d7a <_svfiprintf_r+0xf2>
10003d76:	9209      	str	r2, [sp, #36]	; 0x24
10003d78:	e004      	b.n	10003d84 <_svfiprintf_r+0xfc>
10003d7a:	4252      	negs	r2, r2
10003d7c:	60ea      	str	r2, [r5, #12]
10003d7e:	2202      	movs	r2, #2
10003d80:	4313      	orrs	r3, r2
10003d82:	602b      	str	r3, [r5, #0]
10003d84:	3401      	adds	r4, #1
10003d86:	e009      	b.n	10003d9c <_svfiprintf_r+0x114>
10003d88:	7822      	ldrb	r2, [r4, #0]
10003d8a:	3a30      	subs	r2, #48	; 0x30
10003d8c:	2a09      	cmp	r2, #9
10003d8e:	d804      	bhi.n	10003d9a <_svfiprintf_r+0x112>
10003d90:	210a      	movs	r1, #10
10003d92:	434b      	muls	r3, r1
10003d94:	3401      	adds	r4, #1
10003d96:	189b      	adds	r3, r3, r2
10003d98:	e7f6      	b.n	10003d88 <_svfiprintf_r+0x100>
10003d9a:	9309      	str	r3, [sp, #36]	; 0x24
10003d9c:	7823      	ldrb	r3, [r4, #0]
10003d9e:	2b2e      	cmp	r3, #46	; 0x2e
10003da0:	d118      	bne.n	10003dd4 <_svfiprintf_r+0x14c>
10003da2:	7863      	ldrb	r3, [r4, #1]
10003da4:	2b2a      	cmp	r3, #42	; 0x2a
10003da6:	d109      	bne.n	10003dbc <_svfiprintf_r+0x134>
10003da8:	9b05      	ldr	r3, [sp, #20]
10003daa:	3402      	adds	r4, #2
10003dac:	1d1a      	adds	r2, r3, #4
10003dae:	681b      	ldr	r3, [r3, #0]
10003db0:	9205      	str	r2, [sp, #20]
10003db2:	2b00      	cmp	r3, #0
10003db4:	da0d      	bge.n	10003dd2 <_svfiprintf_r+0x14a>
10003db6:	2301      	movs	r3, #1
10003db8:	425b      	negs	r3, r3
10003dba:	e00a      	b.n	10003dd2 <_svfiprintf_r+0x14a>
10003dbc:	2300      	movs	r3, #0
10003dbe:	3401      	adds	r4, #1
10003dc0:	7822      	ldrb	r2, [r4, #0]
10003dc2:	3a30      	subs	r2, #48	; 0x30
10003dc4:	2a09      	cmp	r2, #9
10003dc6:	d804      	bhi.n	10003dd2 <_svfiprintf_r+0x14a>
10003dc8:	210a      	movs	r1, #10
10003dca:	434b      	muls	r3, r1
10003dcc:	3401      	adds	r4, #1
10003dce:	189b      	adds	r3, r3, r2
10003dd0:	e7f6      	b.n	10003dc0 <_svfiprintf_r+0x138>
10003dd2:	9307      	str	r3, [sp, #28]
10003dd4:	4f23      	ldr	r7, [pc, #140]	; (10003e64 <_svfiprintf_r+0x1dc>)
10003dd6:	7821      	ldrb	r1, [r4, #0]
10003dd8:	1c38      	adds	r0, r7, #0
10003dda:	2203      	movs	r2, #3
10003ddc:	f000 f9d0 	bl	10004180 <memchr>
10003de0:	2800      	cmp	r0, #0
10003de2:	d007      	beq.n	10003df4 <_svfiprintf_r+0x16c>
10003de4:	1bc0      	subs	r0, r0, r7
10003de6:	2740      	movs	r7, #64	; 0x40
10003de8:	4087      	lsls	r7, r0
10003dea:	1c38      	adds	r0, r7, #0
10003dec:	682b      	ldr	r3, [r5, #0]
10003dee:	3401      	adds	r4, #1
10003df0:	4318      	orrs	r0, r3
10003df2:	6028      	str	r0, [r5, #0]
10003df4:	7821      	ldrb	r1, [r4, #0]
10003df6:	481c      	ldr	r0, [pc, #112]	; (10003e68 <_svfiprintf_r+0x1e0>)
10003df8:	2206      	movs	r2, #6
10003dfa:	1c67      	adds	r7, r4, #1
10003dfc:	7629      	strb	r1, [r5, #24]
10003dfe:	f000 f9bf 	bl	10004180 <memchr>
10003e02:	2800      	cmp	r0, #0
10003e04:	d012      	beq.n	10003e2c <_svfiprintf_r+0x1a4>
10003e06:	4b19      	ldr	r3, [pc, #100]	; (10003e6c <_svfiprintf_r+0x1e4>)
10003e08:	2b00      	cmp	r3, #0
10003e0a:	d106      	bne.n	10003e1a <_svfiprintf_r+0x192>
10003e0c:	2207      	movs	r2, #7
10003e0e:	9b05      	ldr	r3, [sp, #20]
10003e10:	3307      	adds	r3, #7
10003e12:	4393      	bics	r3, r2
10003e14:	3308      	adds	r3, #8
10003e16:	9305      	str	r3, [sp, #20]
10003e18:	e014      	b.n	10003e44 <_svfiprintf_r+0x1bc>
10003e1a:	ab05      	add	r3, sp, #20
10003e1c:	9300      	str	r3, [sp, #0]
10003e1e:	9802      	ldr	r0, [sp, #8]
10003e20:	1c29      	adds	r1, r5, #0
10003e22:	1c32      	adds	r2, r6, #0
10003e24:	4b12      	ldr	r3, [pc, #72]	; (10003e70 <_svfiprintf_r+0x1e8>)
10003e26:	e000      	b.n	10003e2a <_svfiprintf_r+0x1a2>
10003e28:	bf00      	nop
10003e2a:	e007      	b.n	10003e3c <_svfiprintf_r+0x1b4>
10003e2c:	ab05      	add	r3, sp, #20
10003e2e:	9300      	str	r3, [sp, #0]
10003e30:	9802      	ldr	r0, [sp, #8]
10003e32:	1c29      	adds	r1, r5, #0
10003e34:	1c32      	adds	r2, r6, #0
10003e36:	4b0e      	ldr	r3, [pc, #56]	; (10003e70 <_svfiprintf_r+0x1e8>)
10003e38:	f000 f88a 	bl	10003f50 <_printf_i>
10003e3c:	9003      	str	r0, [sp, #12]
10003e3e:	9b03      	ldr	r3, [sp, #12]
10003e40:	3301      	adds	r3, #1
10003e42:	d004      	beq.n	10003e4e <_svfiprintf_r+0x1c6>
10003e44:	696b      	ldr	r3, [r5, #20]
10003e46:	9a03      	ldr	r2, [sp, #12]
10003e48:	189b      	adds	r3, r3, r2
10003e4a:	616b      	str	r3, [r5, #20]
10003e4c:	e73d      	b.n	10003cca <_svfiprintf_r+0x42>
10003e4e:	89b3      	ldrh	r3, [r6, #12]
10003e50:	980b      	ldr	r0, [sp, #44]	; 0x2c
10003e52:	065b      	lsls	r3, r3, #25
10003e54:	d501      	bpl.n	10003e5a <_svfiprintf_r+0x1d2>
10003e56:	2001      	movs	r0, #1
10003e58:	4240      	negs	r0, r0
10003e5a:	b01f      	add	sp, #124	; 0x7c
10003e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003e5e:	46c0      	nop			; (mov r8, r8)
10003e60:	1000464a 	.word	0x1000464a
10003e64:	10004650 	.word	0x10004650
10003e68:	10004654 	.word	0x10004654
10003e6c:	00000000 	.word	0x00000000
10003e70:	10003bc9 	.word	0x10003bc9

10003e74 <_printf_common>:
10003e74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10003e76:	1c17      	adds	r7, r2, #0
10003e78:	9301      	str	r3, [sp, #4]
10003e7a:	690a      	ldr	r2, [r1, #16]
10003e7c:	688b      	ldr	r3, [r1, #8]
10003e7e:	9000      	str	r0, [sp, #0]
10003e80:	1c0c      	adds	r4, r1, #0
10003e82:	4293      	cmp	r3, r2
10003e84:	da00      	bge.n	10003e88 <_printf_common+0x14>
10003e86:	1c13      	adds	r3, r2, #0
10003e88:	1c22      	adds	r2, r4, #0
10003e8a:	603b      	str	r3, [r7, #0]
10003e8c:	3243      	adds	r2, #67	; 0x43
10003e8e:	7812      	ldrb	r2, [r2, #0]
10003e90:	2a00      	cmp	r2, #0
10003e92:	d001      	beq.n	10003e98 <_printf_common+0x24>
10003e94:	3301      	adds	r3, #1
10003e96:	603b      	str	r3, [r7, #0]
10003e98:	6823      	ldr	r3, [r4, #0]
10003e9a:	069b      	lsls	r3, r3, #26
10003e9c:	d502      	bpl.n	10003ea4 <_printf_common+0x30>
10003e9e:	683b      	ldr	r3, [r7, #0]
10003ea0:	3302      	adds	r3, #2
10003ea2:	603b      	str	r3, [r7, #0]
10003ea4:	2506      	movs	r5, #6
10003ea6:	6823      	ldr	r3, [r4, #0]
10003ea8:	401d      	ands	r5, r3
10003eaa:	d01e      	beq.n	10003eea <_printf_common+0x76>
10003eac:	1c23      	adds	r3, r4, #0
10003eae:	3343      	adds	r3, #67	; 0x43
10003eb0:	781b      	ldrb	r3, [r3, #0]
10003eb2:	1e5a      	subs	r2, r3, #1
10003eb4:	4193      	sbcs	r3, r2
10003eb6:	6822      	ldr	r2, [r4, #0]
10003eb8:	0692      	lsls	r2, r2, #26
10003eba:	d51c      	bpl.n	10003ef6 <_printf_common+0x82>
10003ebc:	2030      	movs	r0, #48	; 0x30
10003ebe:	18e1      	adds	r1, r4, r3
10003ec0:	3140      	adds	r1, #64	; 0x40
10003ec2:	70c8      	strb	r0, [r1, #3]
10003ec4:	1c21      	adds	r1, r4, #0
10003ec6:	1c5a      	adds	r2, r3, #1
10003ec8:	3145      	adds	r1, #69	; 0x45
10003eca:	7809      	ldrb	r1, [r1, #0]
10003ecc:	18a2      	adds	r2, r4, r2
10003ece:	3240      	adds	r2, #64	; 0x40
10003ed0:	3302      	adds	r3, #2
10003ed2:	70d1      	strb	r1, [r2, #3]
10003ed4:	e00f      	b.n	10003ef6 <_printf_common+0x82>
10003ed6:	1c22      	adds	r2, r4, #0
10003ed8:	2301      	movs	r3, #1
10003eda:	9800      	ldr	r0, [sp, #0]
10003edc:	9901      	ldr	r1, [sp, #4]
10003ede:	3219      	adds	r2, #25
10003ee0:	9e08      	ldr	r6, [sp, #32]
10003ee2:	47b0      	blx	r6
10003ee4:	1c43      	adds	r3, r0, #1
10003ee6:	d00e      	beq.n	10003f06 <_printf_common+0x92>
10003ee8:	3501      	adds	r5, #1
10003eea:	68e3      	ldr	r3, [r4, #12]
10003eec:	683a      	ldr	r2, [r7, #0]
10003eee:	1a9b      	subs	r3, r3, r2
10003ef0:	429d      	cmp	r5, r3
10003ef2:	dbf0      	blt.n	10003ed6 <_printf_common+0x62>
10003ef4:	e7da      	b.n	10003eac <_printf_common+0x38>
10003ef6:	1c22      	adds	r2, r4, #0
10003ef8:	9800      	ldr	r0, [sp, #0]
10003efa:	9901      	ldr	r1, [sp, #4]
10003efc:	3243      	adds	r2, #67	; 0x43
10003efe:	9d08      	ldr	r5, [sp, #32]
10003f00:	47a8      	blx	r5
10003f02:	1c43      	adds	r3, r0, #1
10003f04:	d102      	bne.n	10003f0c <_printf_common+0x98>
10003f06:	2001      	movs	r0, #1
10003f08:	4240      	negs	r0, r0
10003f0a:	e020      	b.n	10003f4e <_printf_common+0xda>
10003f0c:	2306      	movs	r3, #6
10003f0e:	6820      	ldr	r0, [r4, #0]
10003f10:	68e1      	ldr	r1, [r4, #12]
10003f12:	683a      	ldr	r2, [r7, #0]
10003f14:	4003      	ands	r3, r0
10003f16:	2500      	movs	r5, #0
10003f18:	2b04      	cmp	r3, #4
10003f1a:	d103      	bne.n	10003f24 <_printf_common+0xb0>
10003f1c:	1a8d      	subs	r5, r1, r2
10003f1e:	43eb      	mvns	r3, r5
10003f20:	17db      	asrs	r3, r3, #31
10003f22:	401d      	ands	r5, r3
10003f24:	68a3      	ldr	r3, [r4, #8]
10003f26:	6922      	ldr	r2, [r4, #16]
10003f28:	4293      	cmp	r3, r2
10003f2a:	dd01      	ble.n	10003f30 <_printf_common+0xbc>
10003f2c:	1a9b      	subs	r3, r3, r2
10003f2e:	18ed      	adds	r5, r5, r3
10003f30:	2700      	movs	r7, #0
10003f32:	42af      	cmp	r7, r5
10003f34:	da0a      	bge.n	10003f4c <_printf_common+0xd8>
10003f36:	1c22      	adds	r2, r4, #0
10003f38:	2301      	movs	r3, #1
10003f3a:	9800      	ldr	r0, [sp, #0]
10003f3c:	9901      	ldr	r1, [sp, #4]
10003f3e:	321a      	adds	r2, #26
10003f40:	9e08      	ldr	r6, [sp, #32]
10003f42:	47b0      	blx	r6
10003f44:	1c43      	adds	r3, r0, #1
10003f46:	d0de      	beq.n	10003f06 <_printf_common+0x92>
10003f48:	3701      	adds	r7, #1
10003f4a:	e7f2      	b.n	10003f32 <_printf_common+0xbe>
10003f4c:	2000      	movs	r0, #0
10003f4e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10003f50 <_printf_i>:
10003f50:	b5f0      	push	{r4, r5, r6, r7, lr}
10003f52:	b08b      	sub	sp, #44	; 0x2c
10003f54:	9206      	str	r2, [sp, #24]
10003f56:	1c0a      	adds	r2, r1, #0
10003f58:	3243      	adds	r2, #67	; 0x43
10003f5a:	9307      	str	r3, [sp, #28]
10003f5c:	9005      	str	r0, [sp, #20]
10003f5e:	9204      	str	r2, [sp, #16]
10003f60:	7e0a      	ldrb	r2, [r1, #24]
10003f62:	1c0c      	adds	r4, r1, #0
10003f64:	9b10      	ldr	r3, [sp, #64]	; 0x40
10003f66:	2a6e      	cmp	r2, #110	; 0x6e
10003f68:	d100      	bne.n	10003f6c <_printf_i+0x1c>
10003f6a:	e0a8      	b.n	100040be <_printf_i+0x16e>
10003f6c:	d811      	bhi.n	10003f92 <_printf_i+0x42>
10003f6e:	2a63      	cmp	r2, #99	; 0x63
10003f70:	d022      	beq.n	10003fb8 <_printf_i+0x68>
10003f72:	d809      	bhi.n	10003f88 <_printf_i+0x38>
10003f74:	2a00      	cmp	r2, #0
10003f76:	d100      	bne.n	10003f7a <_printf_i+0x2a>
10003f78:	e0b2      	b.n	100040e0 <_printf_i+0x190>
10003f7a:	2a58      	cmp	r2, #88	; 0x58
10003f7c:	d000      	beq.n	10003f80 <_printf_i+0x30>
10003f7e:	e0c2      	b.n	10004106 <_printf_i+0x1b6>
10003f80:	3145      	adds	r1, #69	; 0x45
10003f82:	700a      	strb	r2, [r1, #0]
10003f84:	4a7c      	ldr	r2, [pc, #496]	; (10004178 <_printf_i+0x228>)
10003f86:	e04f      	b.n	10004028 <_printf_i+0xd8>
10003f88:	2a64      	cmp	r2, #100	; 0x64
10003f8a:	d01d      	beq.n	10003fc8 <_printf_i+0x78>
10003f8c:	2a69      	cmp	r2, #105	; 0x69
10003f8e:	d01b      	beq.n	10003fc8 <_printf_i+0x78>
10003f90:	e0b9      	b.n	10004106 <_printf_i+0x1b6>
10003f92:	2a73      	cmp	r2, #115	; 0x73
10003f94:	d100      	bne.n	10003f98 <_printf_i+0x48>
10003f96:	e0a7      	b.n	100040e8 <_printf_i+0x198>
10003f98:	d809      	bhi.n	10003fae <_printf_i+0x5e>
10003f9a:	2a6f      	cmp	r2, #111	; 0x6f
10003f9c:	d029      	beq.n	10003ff2 <_printf_i+0xa2>
10003f9e:	2a70      	cmp	r2, #112	; 0x70
10003fa0:	d000      	beq.n	10003fa4 <_printf_i+0x54>
10003fa2:	e0b0      	b.n	10004106 <_printf_i+0x1b6>
10003fa4:	2220      	movs	r2, #32
10003fa6:	6809      	ldr	r1, [r1, #0]
10003fa8:	430a      	orrs	r2, r1
10003faa:	6022      	str	r2, [r4, #0]
10003fac:	e037      	b.n	1000401e <_printf_i+0xce>
10003fae:	2a75      	cmp	r2, #117	; 0x75
10003fb0:	d01f      	beq.n	10003ff2 <_printf_i+0xa2>
10003fb2:	2a78      	cmp	r2, #120	; 0x78
10003fb4:	d033      	beq.n	1000401e <_printf_i+0xce>
10003fb6:	e0a6      	b.n	10004106 <_printf_i+0x1b6>
10003fb8:	1c0d      	adds	r5, r1, #0
10003fba:	681a      	ldr	r2, [r3, #0]
10003fbc:	3542      	adds	r5, #66	; 0x42
10003fbe:	1d11      	adds	r1, r2, #4
10003fc0:	6019      	str	r1, [r3, #0]
10003fc2:	6813      	ldr	r3, [r2, #0]
10003fc4:	702b      	strb	r3, [r5, #0]
10003fc6:	e0a1      	b.n	1000410c <_printf_i+0x1bc>
10003fc8:	6821      	ldr	r1, [r4, #0]
10003fca:	681a      	ldr	r2, [r3, #0]
10003fcc:	0608      	lsls	r0, r1, #24
10003fce:	d503      	bpl.n	10003fd8 <_printf_i+0x88>
10003fd0:	1d11      	adds	r1, r2, #4
10003fd2:	6019      	str	r1, [r3, #0]
10003fd4:	6816      	ldr	r6, [r2, #0]
10003fd6:	e005      	b.n	10003fe4 <_printf_i+0x94>
10003fd8:	0649      	lsls	r1, r1, #25
10003fda:	d5f9      	bpl.n	10003fd0 <_printf_i+0x80>
10003fdc:	1d11      	adds	r1, r2, #4
10003fde:	6019      	str	r1, [r3, #0]
10003fe0:	2300      	movs	r3, #0
10003fe2:	5ed6      	ldrsh	r6, [r2, r3]
10003fe4:	2e00      	cmp	r6, #0
10003fe6:	da3b      	bge.n	10004060 <_printf_i+0x110>
10003fe8:	232d      	movs	r3, #45	; 0x2d
10003fea:	9a04      	ldr	r2, [sp, #16]
10003fec:	4276      	negs	r6, r6
10003fee:	7013      	strb	r3, [r2, #0]
10003ff0:	e036      	b.n	10004060 <_printf_i+0x110>
10003ff2:	6821      	ldr	r1, [r4, #0]
10003ff4:	681a      	ldr	r2, [r3, #0]
10003ff6:	0608      	lsls	r0, r1, #24
10003ff8:	d503      	bpl.n	10004002 <_printf_i+0xb2>
10003ffa:	1d11      	adds	r1, r2, #4
10003ffc:	6019      	str	r1, [r3, #0]
10003ffe:	6816      	ldr	r6, [r2, #0]
10004000:	e005      	b.n	1000400e <_printf_i+0xbe>
10004002:	0649      	lsls	r1, r1, #25
10004004:	d5f9      	bpl.n	10003ffa <_printf_i+0xaa>
10004006:	1d11      	adds	r1, r2, #4
10004008:	6019      	str	r1, [r3, #0]
1000400a:	6816      	ldr	r6, [r2, #0]
1000400c:	b2b6      	uxth	r6, r6
1000400e:	4b5a      	ldr	r3, [pc, #360]	; (10004178 <_printf_i+0x228>)
10004010:	7e22      	ldrb	r2, [r4, #24]
10004012:	9303      	str	r3, [sp, #12]
10004014:	270a      	movs	r7, #10
10004016:	2a6f      	cmp	r2, #111	; 0x6f
10004018:	d11d      	bne.n	10004056 <_printf_i+0x106>
1000401a:	2708      	movs	r7, #8
1000401c:	e01b      	b.n	10004056 <_printf_i+0x106>
1000401e:	1c22      	adds	r2, r4, #0
10004020:	2178      	movs	r1, #120	; 0x78
10004022:	3245      	adds	r2, #69	; 0x45
10004024:	7011      	strb	r1, [r2, #0]
10004026:	4a55      	ldr	r2, [pc, #340]	; (1000417c <_printf_i+0x22c>)
10004028:	6819      	ldr	r1, [r3, #0]
1000402a:	9203      	str	r2, [sp, #12]
1000402c:	1d08      	adds	r0, r1, #4
1000402e:	6822      	ldr	r2, [r4, #0]
10004030:	6018      	str	r0, [r3, #0]
10004032:	680e      	ldr	r6, [r1, #0]
10004034:	0610      	lsls	r0, r2, #24
10004036:	d402      	bmi.n	1000403e <_printf_i+0xee>
10004038:	0650      	lsls	r0, r2, #25
1000403a:	d500      	bpl.n	1000403e <_printf_i+0xee>
1000403c:	b2b6      	uxth	r6, r6
1000403e:	07d3      	lsls	r3, r2, #31
10004040:	d502      	bpl.n	10004048 <_printf_i+0xf8>
10004042:	2320      	movs	r3, #32
10004044:	431a      	orrs	r2, r3
10004046:	6022      	str	r2, [r4, #0]
10004048:	2710      	movs	r7, #16
1000404a:	2e00      	cmp	r6, #0
1000404c:	d103      	bne.n	10004056 <_printf_i+0x106>
1000404e:	2320      	movs	r3, #32
10004050:	6822      	ldr	r2, [r4, #0]
10004052:	439a      	bics	r2, r3
10004054:	6022      	str	r2, [r4, #0]
10004056:	1c23      	adds	r3, r4, #0
10004058:	2200      	movs	r2, #0
1000405a:	3343      	adds	r3, #67	; 0x43
1000405c:	701a      	strb	r2, [r3, #0]
1000405e:	e002      	b.n	10004066 <_printf_i+0x116>
10004060:	270a      	movs	r7, #10
10004062:	4b45      	ldr	r3, [pc, #276]	; (10004178 <_printf_i+0x228>)
10004064:	9303      	str	r3, [sp, #12]
10004066:	6863      	ldr	r3, [r4, #4]
10004068:	60a3      	str	r3, [r4, #8]
1000406a:	2b00      	cmp	r3, #0
1000406c:	db03      	blt.n	10004076 <_printf_i+0x126>
1000406e:	2204      	movs	r2, #4
10004070:	6821      	ldr	r1, [r4, #0]
10004072:	4391      	bics	r1, r2
10004074:	6021      	str	r1, [r4, #0]
10004076:	2e00      	cmp	r6, #0
10004078:	d102      	bne.n	10004080 <_printf_i+0x130>
1000407a:	9d04      	ldr	r5, [sp, #16]
1000407c:	2b00      	cmp	r3, #0
1000407e:	d00e      	beq.n	1000409e <_printf_i+0x14e>
10004080:	9d04      	ldr	r5, [sp, #16]
10004082:	1c30      	adds	r0, r6, #0
10004084:	1c39      	adds	r1, r7, #0
10004086:	f7fd fa2d 	bl	100014e4 <__aeabi_uidivmod>
1000408a:	9b03      	ldr	r3, [sp, #12]
1000408c:	3d01      	subs	r5, #1
1000408e:	5c5b      	ldrb	r3, [r3, r1]
10004090:	1c30      	adds	r0, r6, #0
10004092:	702b      	strb	r3, [r5, #0]
10004094:	1c39      	adds	r1, r7, #0
10004096:	f7fd fa11 	bl	100014bc <__aeabi_uidiv>
1000409a:	1e06      	subs	r6, r0, #0
1000409c:	d1f1      	bne.n	10004082 <_printf_i+0x132>
1000409e:	2f08      	cmp	r7, #8
100040a0:	d109      	bne.n	100040b6 <_printf_i+0x166>
100040a2:	6823      	ldr	r3, [r4, #0]
100040a4:	07db      	lsls	r3, r3, #31
100040a6:	d506      	bpl.n	100040b6 <_printf_i+0x166>
100040a8:	6863      	ldr	r3, [r4, #4]
100040aa:	6922      	ldr	r2, [r4, #16]
100040ac:	4293      	cmp	r3, r2
100040ae:	dc02      	bgt.n	100040b6 <_printf_i+0x166>
100040b0:	2330      	movs	r3, #48	; 0x30
100040b2:	3d01      	subs	r5, #1
100040b4:	702b      	strb	r3, [r5, #0]
100040b6:	9b04      	ldr	r3, [sp, #16]
100040b8:	1b5b      	subs	r3, r3, r5
100040ba:	6123      	str	r3, [r4, #16]
100040bc:	e02b      	b.n	10004116 <_printf_i+0x1c6>
100040be:	6809      	ldr	r1, [r1, #0]
100040c0:	681a      	ldr	r2, [r3, #0]
100040c2:	0608      	lsls	r0, r1, #24
100040c4:	d407      	bmi.n	100040d6 <_printf_i+0x186>
100040c6:	0649      	lsls	r1, r1, #25
100040c8:	d505      	bpl.n	100040d6 <_printf_i+0x186>
100040ca:	1d11      	adds	r1, r2, #4
100040cc:	6019      	str	r1, [r3, #0]
100040ce:	6813      	ldr	r3, [r2, #0]
100040d0:	8aa2      	ldrh	r2, [r4, #20]
100040d2:	801a      	strh	r2, [r3, #0]
100040d4:	e004      	b.n	100040e0 <_printf_i+0x190>
100040d6:	1d11      	adds	r1, r2, #4
100040d8:	6019      	str	r1, [r3, #0]
100040da:	6813      	ldr	r3, [r2, #0]
100040dc:	6962      	ldr	r2, [r4, #20]
100040de:	601a      	str	r2, [r3, #0]
100040e0:	2300      	movs	r3, #0
100040e2:	9d04      	ldr	r5, [sp, #16]
100040e4:	6123      	str	r3, [r4, #16]
100040e6:	e016      	b.n	10004116 <_printf_i+0x1c6>
100040e8:	681a      	ldr	r2, [r3, #0]
100040ea:	1d11      	adds	r1, r2, #4
100040ec:	6019      	str	r1, [r3, #0]
100040ee:	6815      	ldr	r5, [r2, #0]
100040f0:	2100      	movs	r1, #0
100040f2:	1c28      	adds	r0, r5, #0
100040f4:	6862      	ldr	r2, [r4, #4]
100040f6:	f000 f843 	bl	10004180 <memchr>
100040fa:	2800      	cmp	r0, #0
100040fc:	d001      	beq.n	10004102 <_printf_i+0x1b2>
100040fe:	1b40      	subs	r0, r0, r5
10004100:	6060      	str	r0, [r4, #4]
10004102:	6863      	ldr	r3, [r4, #4]
10004104:	e003      	b.n	1000410e <_printf_i+0x1be>
10004106:	1c25      	adds	r5, r4, #0
10004108:	3542      	adds	r5, #66	; 0x42
1000410a:	702a      	strb	r2, [r5, #0]
1000410c:	2301      	movs	r3, #1
1000410e:	6123      	str	r3, [r4, #16]
10004110:	2300      	movs	r3, #0
10004112:	9a04      	ldr	r2, [sp, #16]
10004114:	7013      	strb	r3, [r2, #0]
10004116:	9b07      	ldr	r3, [sp, #28]
10004118:	9805      	ldr	r0, [sp, #20]
1000411a:	9300      	str	r3, [sp, #0]
1000411c:	1c21      	adds	r1, r4, #0
1000411e:	9b06      	ldr	r3, [sp, #24]
10004120:	aa09      	add	r2, sp, #36	; 0x24
10004122:	f7ff fea7 	bl	10003e74 <_printf_common>
10004126:	1c43      	adds	r3, r0, #1
10004128:	d102      	bne.n	10004130 <_printf_i+0x1e0>
1000412a:	2001      	movs	r0, #1
1000412c:	4240      	negs	r0, r0
1000412e:	e021      	b.n	10004174 <_printf_i+0x224>
10004130:	1c2a      	adds	r2, r5, #0
10004132:	6923      	ldr	r3, [r4, #16]
10004134:	9805      	ldr	r0, [sp, #20]
10004136:	9906      	ldr	r1, [sp, #24]
10004138:	9d07      	ldr	r5, [sp, #28]
1000413a:	47a8      	blx	r5
1000413c:	1c43      	adds	r3, r0, #1
1000413e:	d0f4      	beq.n	1000412a <_printf_i+0x1da>
10004140:	6823      	ldr	r3, [r4, #0]
10004142:	079b      	lsls	r3, r3, #30
10004144:	d405      	bmi.n	10004152 <_printf_i+0x202>
10004146:	9b09      	ldr	r3, [sp, #36]	; 0x24
10004148:	68e0      	ldr	r0, [r4, #12]
1000414a:	4298      	cmp	r0, r3
1000414c:	da12      	bge.n	10004174 <_printf_i+0x224>
1000414e:	1c18      	adds	r0, r3, #0
10004150:	e010      	b.n	10004174 <_printf_i+0x224>
10004152:	2500      	movs	r5, #0
10004154:	68e3      	ldr	r3, [r4, #12]
10004156:	9a09      	ldr	r2, [sp, #36]	; 0x24
10004158:	1a9b      	subs	r3, r3, r2
1000415a:	429d      	cmp	r5, r3
1000415c:	daf3      	bge.n	10004146 <_printf_i+0x1f6>
1000415e:	1c22      	adds	r2, r4, #0
10004160:	2301      	movs	r3, #1
10004162:	9805      	ldr	r0, [sp, #20]
10004164:	9906      	ldr	r1, [sp, #24]
10004166:	3219      	adds	r2, #25
10004168:	9e07      	ldr	r6, [sp, #28]
1000416a:	47b0      	blx	r6
1000416c:	1c43      	adds	r3, r0, #1
1000416e:	d0dc      	beq.n	1000412a <_printf_i+0x1da>
10004170:	3501      	adds	r5, #1
10004172:	e7ef      	b.n	10004154 <_printf_i+0x204>
10004174:	b00b      	add	sp, #44	; 0x2c
10004176:	bdf0      	pop	{r4, r5, r6, r7, pc}
10004178:	1000465b 	.word	0x1000465b
1000417c:	1000466c 	.word	0x1000466c

10004180 <memchr>:
10004180:	b2c9      	uxtb	r1, r1
10004182:	1882      	adds	r2, r0, r2
10004184:	4290      	cmp	r0, r2
10004186:	d004      	beq.n	10004192 <memchr+0x12>
10004188:	7803      	ldrb	r3, [r0, #0]
1000418a:	428b      	cmp	r3, r1
1000418c:	d002      	beq.n	10004194 <memchr+0x14>
1000418e:	3001      	adds	r0, #1
10004190:	e7f8      	b.n	10004184 <memchr+0x4>
10004192:	2000      	movs	r0, #0
10004194:	4770      	bx	lr

10004196 <memmove>:
10004196:	b510      	push	{r4, lr}
10004198:	4281      	cmp	r1, r0
1000419a:	d208      	bcs.n	100041ae <memmove+0x18>
1000419c:	188b      	adds	r3, r1, r2
1000419e:	4298      	cmp	r0, r3
100041a0:	d205      	bcs.n	100041ae <memmove+0x18>
100041a2:	1a9b      	subs	r3, r3, r2
100041a4:	3a01      	subs	r2, #1
100041a6:	d309      	bcc.n	100041bc <memmove+0x26>
100041a8:	5c99      	ldrb	r1, [r3, r2]
100041aa:	5481      	strb	r1, [r0, r2]
100041ac:	e7fa      	b.n	100041a4 <memmove+0xe>
100041ae:	2300      	movs	r3, #0
100041b0:	4293      	cmp	r3, r2
100041b2:	d003      	beq.n	100041bc <memmove+0x26>
100041b4:	5ccc      	ldrb	r4, [r1, r3]
100041b6:	54c4      	strb	r4, [r0, r3]
100041b8:	3301      	adds	r3, #1
100041ba:	e7f9      	b.n	100041b0 <memmove+0x1a>
100041bc:	bd10      	pop	{r4, pc}
	...

100041c0 <_free_r>:
100041c0:	b530      	push	{r4, r5, lr}
100041c2:	2900      	cmp	r1, #0
100041c4:	d03e      	beq.n	10004244 <_free_r+0x84>
100041c6:	3904      	subs	r1, #4
100041c8:	680b      	ldr	r3, [r1, #0]
100041ca:	2b00      	cmp	r3, #0
100041cc:	da00      	bge.n	100041d0 <_free_r+0x10>
100041ce:	18c9      	adds	r1, r1, r3
100041d0:	4a1d      	ldr	r2, [pc, #116]	; (10004248 <_free_r+0x88>)
100041d2:	6813      	ldr	r3, [r2, #0]
100041d4:	1c14      	adds	r4, r2, #0
100041d6:	2b00      	cmp	r3, #0
100041d8:	d102      	bne.n	100041e0 <_free_r+0x20>
100041da:	604b      	str	r3, [r1, #4]
100041dc:	6011      	str	r1, [r2, #0]
100041de:	e031      	b.n	10004244 <_free_r+0x84>
100041e0:	4299      	cmp	r1, r3
100041e2:	d20d      	bcs.n	10004200 <_free_r+0x40>
100041e4:	6808      	ldr	r0, [r1, #0]
100041e6:	180a      	adds	r2, r1, r0
100041e8:	429a      	cmp	r2, r3
100041ea:	d103      	bne.n	100041f4 <_free_r+0x34>
100041ec:	6813      	ldr	r3, [r2, #0]
100041ee:	18c3      	adds	r3, r0, r3
100041f0:	600b      	str	r3, [r1, #0]
100041f2:	6853      	ldr	r3, [r2, #4]
100041f4:	604b      	str	r3, [r1, #4]
100041f6:	6021      	str	r1, [r4, #0]
100041f8:	e024      	b.n	10004244 <_free_r+0x84>
100041fa:	428a      	cmp	r2, r1
100041fc:	d803      	bhi.n	10004206 <_free_r+0x46>
100041fe:	1c13      	adds	r3, r2, #0
10004200:	685a      	ldr	r2, [r3, #4]
10004202:	2a00      	cmp	r2, #0
10004204:	d1f9      	bne.n	100041fa <_free_r+0x3a>
10004206:	681d      	ldr	r5, [r3, #0]
10004208:	195c      	adds	r4, r3, r5
1000420a:	428c      	cmp	r4, r1
1000420c:	d10b      	bne.n	10004226 <_free_r+0x66>
1000420e:	6809      	ldr	r1, [r1, #0]
10004210:	1869      	adds	r1, r5, r1
10004212:	1858      	adds	r0, r3, r1
10004214:	6019      	str	r1, [r3, #0]
10004216:	4290      	cmp	r0, r2
10004218:	d114      	bne.n	10004244 <_free_r+0x84>
1000421a:	6810      	ldr	r0, [r2, #0]
1000421c:	6852      	ldr	r2, [r2, #4]
1000421e:	1809      	adds	r1, r1, r0
10004220:	6019      	str	r1, [r3, #0]
10004222:	605a      	str	r2, [r3, #4]
10004224:	e00e      	b.n	10004244 <_free_r+0x84>
10004226:	428c      	cmp	r4, r1
10004228:	d902      	bls.n	10004230 <_free_r+0x70>
1000422a:	230c      	movs	r3, #12
1000422c:	6003      	str	r3, [r0, #0]
1000422e:	e009      	b.n	10004244 <_free_r+0x84>
10004230:	6808      	ldr	r0, [r1, #0]
10004232:	180c      	adds	r4, r1, r0
10004234:	4294      	cmp	r4, r2
10004236:	d103      	bne.n	10004240 <_free_r+0x80>
10004238:	6814      	ldr	r4, [r2, #0]
1000423a:	6852      	ldr	r2, [r2, #4]
1000423c:	1900      	adds	r0, r0, r4
1000423e:	6008      	str	r0, [r1, #0]
10004240:	604a      	str	r2, [r1, #4]
10004242:	6059      	str	r1, [r3, #4]
10004244:	bd30      	pop	{r4, r5, pc}
10004246:	46c0      	nop			; (mov r8, r8)
10004248:	20000ce8 	.word	0x20000ce8

1000424c <_malloc_r>:
1000424c:	2303      	movs	r3, #3
1000424e:	b570      	push	{r4, r5, r6, lr}
10004250:	1ccc      	adds	r4, r1, #3
10004252:	439c      	bics	r4, r3
10004254:	3408      	adds	r4, #8
10004256:	1c05      	adds	r5, r0, #0
10004258:	2c0c      	cmp	r4, #12
1000425a:	d201      	bcs.n	10004260 <_malloc_r+0x14>
1000425c:	240c      	movs	r4, #12
1000425e:	e005      	b.n	1000426c <_malloc_r+0x20>
10004260:	2c00      	cmp	r4, #0
10004262:	da03      	bge.n	1000426c <_malloc_r+0x20>
10004264:	230c      	movs	r3, #12
10004266:	2000      	movs	r0, #0
10004268:	602b      	str	r3, [r5, #0]
1000426a:	e042      	b.n	100042f2 <_malloc_r+0xa6>
1000426c:	428c      	cmp	r4, r1
1000426e:	d3f9      	bcc.n	10004264 <_malloc_r+0x18>
10004270:	4a20      	ldr	r2, [pc, #128]	; (100042f4 <_malloc_r+0xa8>)
10004272:	6813      	ldr	r3, [r2, #0]
10004274:	1c10      	adds	r0, r2, #0
10004276:	1c19      	adds	r1, r3, #0
10004278:	2900      	cmp	r1, #0
1000427a:	d013      	beq.n	100042a4 <_malloc_r+0x58>
1000427c:	680a      	ldr	r2, [r1, #0]
1000427e:	1b12      	subs	r2, r2, r4
10004280:	d40d      	bmi.n	1000429e <_malloc_r+0x52>
10004282:	2a0b      	cmp	r2, #11
10004284:	d902      	bls.n	1000428c <_malloc_r+0x40>
10004286:	600a      	str	r2, [r1, #0]
10004288:	188b      	adds	r3, r1, r2
1000428a:	e01f      	b.n	100042cc <_malloc_r+0x80>
1000428c:	428b      	cmp	r3, r1
1000428e:	d102      	bne.n	10004296 <_malloc_r+0x4a>
10004290:	685a      	ldr	r2, [r3, #4]
10004292:	6002      	str	r2, [r0, #0]
10004294:	e01b      	b.n	100042ce <_malloc_r+0x82>
10004296:	684a      	ldr	r2, [r1, #4]
10004298:	605a      	str	r2, [r3, #4]
1000429a:	1c0b      	adds	r3, r1, #0
1000429c:	e017      	b.n	100042ce <_malloc_r+0x82>
1000429e:	1c0b      	adds	r3, r1, #0
100042a0:	6849      	ldr	r1, [r1, #4]
100042a2:	e7e9      	b.n	10004278 <_malloc_r+0x2c>
100042a4:	4e14      	ldr	r6, [pc, #80]	; (100042f8 <_malloc_r+0xac>)
100042a6:	6833      	ldr	r3, [r6, #0]
100042a8:	2b00      	cmp	r3, #0
100042aa:	d103      	bne.n	100042b4 <_malloc_r+0x68>
100042ac:	1c28      	adds	r0, r5, #0
100042ae:	f000 f84b 	bl	10004348 <_sbrk_r>
100042b2:	6030      	str	r0, [r6, #0]
100042b4:	1c28      	adds	r0, r5, #0
100042b6:	1c21      	adds	r1, r4, #0
100042b8:	f000 f846 	bl	10004348 <_sbrk_r>
100042bc:	1c03      	adds	r3, r0, #0
100042be:	1c42      	adds	r2, r0, #1
100042c0:	d0d0      	beq.n	10004264 <_malloc_r+0x18>
100042c2:	2203      	movs	r2, #3
100042c4:	1cc6      	adds	r6, r0, #3
100042c6:	4396      	bics	r6, r2
100042c8:	4286      	cmp	r6, r0
100042ca:	d10a      	bne.n	100042e2 <_malloc_r+0x96>
100042cc:	601c      	str	r4, [r3, #0]
100042ce:	1c18      	adds	r0, r3, #0
100042d0:	2107      	movs	r1, #7
100042d2:	300b      	adds	r0, #11
100042d4:	1d1a      	adds	r2, r3, #4
100042d6:	4388      	bics	r0, r1
100042d8:	1a82      	subs	r2, r0, r2
100042da:	d00a      	beq.n	100042f2 <_malloc_r+0xa6>
100042dc:	4251      	negs	r1, r2
100042de:	5099      	str	r1, [r3, r2]
100042e0:	e007      	b.n	100042f2 <_malloc_r+0xa6>
100042e2:	1a31      	subs	r1, r6, r0
100042e4:	1c28      	adds	r0, r5, #0
100042e6:	f000 f82f 	bl	10004348 <_sbrk_r>
100042ea:	1c43      	adds	r3, r0, #1
100042ec:	d0ba      	beq.n	10004264 <_malloc_r+0x18>
100042ee:	1c33      	adds	r3, r6, #0
100042f0:	e7ec      	b.n	100042cc <_malloc_r+0x80>
100042f2:	bd70      	pop	{r4, r5, r6, pc}
100042f4:	20000ce8 	.word	0x20000ce8
100042f8:	20000ce4 	.word	0x20000ce4

100042fc <_realloc_r>:
100042fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100042fe:	1c06      	adds	r6, r0, #0
10004300:	1c0c      	adds	r4, r1, #0
10004302:	1c15      	adds	r5, r2, #0
10004304:	2900      	cmp	r1, #0
10004306:	d104      	bne.n	10004312 <_realloc_r+0x16>
10004308:	1c11      	adds	r1, r2, #0
1000430a:	f7ff ff9f 	bl	1000424c <_malloc_r>
1000430e:	1c04      	adds	r4, r0, #0
10004310:	e018      	b.n	10004344 <_realloc_r+0x48>
10004312:	2a00      	cmp	r2, #0
10004314:	d103      	bne.n	1000431e <_realloc_r+0x22>
10004316:	f7ff ff53 	bl	100041c0 <_free_r>
1000431a:	1c2c      	adds	r4, r5, #0
1000431c:	e012      	b.n	10004344 <_realloc_r+0x48>
1000431e:	f000 f825 	bl	1000436c <_malloc_usable_size_r>
10004322:	42a8      	cmp	r0, r5
10004324:	d20e      	bcs.n	10004344 <_realloc_r+0x48>
10004326:	1c30      	adds	r0, r6, #0
10004328:	1c29      	adds	r1, r5, #0
1000432a:	f7ff ff8f 	bl	1000424c <_malloc_r>
1000432e:	1e07      	subs	r7, r0, #0
10004330:	d007      	beq.n	10004342 <_realloc_r+0x46>
10004332:	1c21      	adds	r1, r4, #0
10004334:	1c2a      	adds	r2, r5, #0
10004336:	f7ff fc1b 	bl	10003b70 <memcpy>
1000433a:	1c30      	adds	r0, r6, #0
1000433c:	1c21      	adds	r1, r4, #0
1000433e:	f7ff ff3f 	bl	100041c0 <_free_r>
10004342:	1c3c      	adds	r4, r7, #0
10004344:	1c20      	adds	r0, r4, #0
10004346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10004348 <_sbrk_r>:
10004348:	b538      	push	{r3, r4, r5, lr}
1000434a:	2300      	movs	r3, #0
1000434c:	4c06      	ldr	r4, [pc, #24]	; (10004368 <_sbrk_r+0x20>)
1000434e:	1c05      	adds	r5, r0, #0
10004350:	1c08      	adds	r0, r1, #0
10004352:	6023      	str	r3, [r4, #0]
10004354:	f7fd fbb8 	bl	10001ac8 <_sbrk>
10004358:	1c43      	adds	r3, r0, #1
1000435a:	d103      	bne.n	10004364 <_sbrk_r+0x1c>
1000435c:	6823      	ldr	r3, [r4, #0]
1000435e:	2b00      	cmp	r3, #0
10004360:	d000      	beq.n	10004364 <_sbrk_r+0x1c>
10004362:	602b      	str	r3, [r5, #0]
10004364:	bd38      	pop	{r3, r4, r5, pc}
10004366:	46c0      	nop			; (mov r8, r8)
10004368:	200020ec 	.word	0x200020ec

1000436c <_malloc_usable_size_r>:
1000436c:	1f0b      	subs	r3, r1, #4
1000436e:	681a      	ldr	r2, [r3, #0]
10004370:	1f10      	subs	r0, r2, #4
10004372:	2a00      	cmp	r2, #0
10004374:	da04      	bge.n	10004380 <_malloc_usable_size_r+0x14>
10004376:	1889      	adds	r1, r1, r2
10004378:	3904      	subs	r1, #4
1000437a:	680b      	ldr	r3, [r1, #0]
1000437c:	18d0      	adds	r0, r2, r3
1000437e:	3804      	subs	r0, #4
10004380:	4770      	bx	lr
	...

10004384 <event_masks>:
10004384:	0000 001f 008f ff60 ff70 0000               ......`.p...

10004390 <CSWTCH.37>:
	...
10004398:	0002 0000 0002 0000 000c 0000 000c 0000     ................
100043a8:	000c 0000 000c 0000 0008 0000 000a 0000     ................

100043b8 <CSWTCH.38>:
100043b8:	0003 0000 0003 0000 000c 0000 000c 0000     ................
100043c8:	3000 0000 3000 0000 3000 0000 3000 0000     .0...0...0...0..
100043d8:	0300 0000 0c00 0000 631b 0000 0d0a 0000     .........c......
100043e8:	7525 0020 200a 2d20 2d2d 2d2d 2d2d 2d2d     %u ..  ---------
100043f8:	2d2d 2d2d 4920 7220 7761 7320 6d61 6c70     ---- I raw sampl
10004408:	7365 2d20 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     es -------------
10004418:	0a20 000d 200a 2d20 2d2d 2d2d 2d2d 2d2d      ....  ---------
10004428:	2d2d 2d2d 5120 7220 7761 7320 6d61 6c70     ---- Q raw sampl
10004438:	7365 2d20 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     es -------------
10004448:	0a20 000d 6c25 2075 0000 0000 6925 0020      ...%lu ....%i .
10004458:	6625 0020                                   %f .

1000445c <UART_0_config>:
1000445c:	44a8 1000 1d71 1000 0000 0000 0000 0000     .D..q...........
	...
10004480:	4494 1000 0000 0400 0204 0000               .D..........

1000448c <UART_0_rx_pin_config>:
1000448c:	0000 0000 0001 0000                         ........

10004494 <UART_0_tx_pin>:
10004494:	0200 4004 0000 0000 44a0 1000               ...@.....D..

100044a0 <UART_0_tx_pin_config>:
100044a0:	00b0 0000 0001 0000                         ........

100044a8 <UART_0_channel_config>:
100044a8:	f400 0001 0808 1001 0000 0000               ............

100044b4 <RTC_0_config>:
100044b4:	0100 0000 0000 0000 2c45 1000 0000 0000     ........E,......

100044c4 <RTC_0_time_alarm_config>:
100044c4:	0000 0000 0004 07b2 0100 0000 0000 07b2     ................
100044d4:	7fff 0000                                   ....

100044d8 <INTERRUPT_0>:
100044d8:	0317 0001                                   ....

100044dc <GLOBAL_SCU_XMC1_0_config>:
100044dc:	0303 0103 0101 0000                         ........

100044e4 <group_init_handle0>:
	...

100044f8 <group_init_handle1>:
	...

1000450c <global_config>:
	...

10004524 <BGT24>:
10004524:	0000 4004 0080 0000 0000 0001 0006 0000     ...@............

10004534 <LED_ORANGE>:
10004534:	0000 4004 0080 0000 0000 0001 0009 0000     ...@............

10004544 <LED_RED>:
10004544:	0000 4004 0080 0000 0000 0001 0007 0000     ...@............

10004554 <LED_BLUE>:
10004554:	0000 4004 0080 0000 0000 0001 0005 0000     ...@............
10004564:	0100 0000 0000 0001 0000 0000               ............

10004570 <backgnd_rs_intr_handle>:
10004570:	000f 0000 0002 0000                         ........

10004578 <backgnd_config>:
10004578:	0005 0000 0000 0000 0008 0000               ............

10004584 <global_iclass_config>:
10004584:	0001 0000 31f6 1000 31be 1000 31da 1000     .....1...1...1..
10004594:	31b2 1000 31da 1000 311e 1000 31da 1000     .1...1...1...1..
100045a4:	31b2 1000 31be 1000 31be 1000 311e 1000     .1...1...1...1..
100045b4:	31b2 1000 325c 1000 325c 1000 325c 1000     .1..\2..\2..\2..
100045c4:	31e0 1000 31be 1000 31be 1000 32a6 1000     .1...1...1...2..
100045d4:	31b0 1000 32a6 1000 311e 1000 32a6 1000     .1...2...1...2..
100045e4:	31b0 1000 31be 1000 31be 1000 311e 1000     .1...1...1...1..
100045f4:	31b0 1000 325c 1000 325c 1000 325c 1000     .1..\2..\2..\2..
10004604:	328a 1000 35be 1000 35b6 1000 35b6 1000     .2...5...5...5..
10004614:	35ae 1000 3500 1000 3500 1000 35a4 1000     .5...5...5...5..
10004624:	35ae 1000 3500 1000 35a4 1000 3500 1000     .5...5...5...5..
10004634:	35ae 1000 3502 1000 3502 1000 3502 1000     .5...5...5...5..
10004644:	3648 1000 0043 2d23 2b30 0020 6c68 004c     H6..C.#-0+ .hlL.
10004654:	6665 4567 4746 3000 3231 3433 3635 3837     efgEFG.012345678
10004664:	4139 4342 4544 0046 3130 3332 3534 3736     9ABCDEF.01234567
10004674:	3938 6261 6463 6665 0000                         89abcdef.

Disassembly of section .VENEER_Code:

2000000c <HardFault_Veneer>:
    
    .align 1
    
    .globl HardFault_Veneer
HardFault_Veneer:
    LDR R0, =HardFault_Handler
2000000c:	482c      	ldr	r0, [pc, #176]	; (200000c0 <BCCU0_0_Veneer+0x4>)
    MOV PC,R0
2000000e:	4687      	mov	pc, r0
	...

2000002c <SVC_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
    .globl SVC_Veneer
SVC_Veneer:
    LDR R0, =SVC_Handler
2000002c:	4825      	ldr	r0, [pc, #148]	; (200000c4 <BCCU0_0_Veneer+0x8>)
    MOV PC,R0
2000002e:	4687      	mov	pc, r0
	...

20000038 <PendSV_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
    .globl PendSV_Veneer
PendSV_Veneer:
    LDR R0, =PendSV_Handler
20000038:	4823      	ldr	r0, [pc, #140]	; (200000c8 <BCCU0_0_Veneer+0xc>)
    MOV PC,R0
2000003a:	4687      	mov	pc, r0

2000003c <SysTick_Veneer>:
/* ======================================================================== */
    .globl SysTick_Veneer 
SysTick_Veneer:
    LDR R0, =SysTick_Handler
2000003c:	4823      	ldr	r0, [pc, #140]	; (200000cc <BCCU0_0_Veneer+0x10>)
    MOV PC,R0
2000003e:	4687      	mov	pc, r0

20000040 <SCU_0_Veneer>:
/* ======================================================================== */
    .globl SCU_0_Veneer 
SCU_0_Veneer:
    LDR R0, =SCU_0_IRQHandler
20000040:	4823      	ldr	r0, [pc, #140]	; (200000d0 <BCCU0_0_Veneer+0x14>)
    MOV PC,R0
20000042:	4687      	mov	pc, r0

20000044 <SCU_1_Veneer>:
/* ======================================================================== */
    .globl SCU_1_Veneer 
SCU_1_Veneer:
    LDR R0, =SCU_1_IRQHandler
20000044:	4823      	ldr	r0, [pc, #140]	; (200000d4 <BCCU0_0_Veneer+0x18>)
    MOV PC,R0
20000046:	4687      	mov	pc, r0

20000048 <SCU_2_Veneer>:
/* ======================================================================== */
    .globl SCU_2_Veneer
SCU_2_Veneer:
    LDR R0, =SCU_2_IRQHandler
20000048:	4823      	ldr	r0, [pc, #140]	; (200000d8 <BCCU0_0_Veneer+0x1c>)
    MOV PC,R0
2000004a:	4687      	mov	pc, r0

2000004c <SCU_3_Veneer>:
/* ======================================================================== */
    .globl SCU_3_Veneer 
SCU_3_Veneer:
    LDR R0, =ERU0_0_IRQHandler
2000004c:	4823      	ldr	r0, [pc, #140]	; (200000dc <BCCU0_0_Veneer+0x20>)
    MOV PC,R0
2000004e:	4687      	mov	pc, r0

20000050 <SCU_4_Veneer>:
/* ======================================================================== */
    .globl SCU_4_Veneer 
SCU_4_Veneer:
    LDR R0, =ERU0_1_IRQHandler
20000050:	4823      	ldr	r0, [pc, #140]	; (200000e0 <BCCU0_0_Veneer+0x24>)
    MOV PC,R0
20000052:	4687      	mov	pc, r0

20000054 <SCU_5_Veneer>:
/* ======================================================================== */
    .globl SCU_5_Veneer 
SCU_5_Veneer:
    LDR R0, =ERU0_2_IRQHandler
20000054:	4823      	ldr	r0, [pc, #140]	; (200000e4 <BCCU0_0_Veneer+0x28>)
    MOV PC,R0
20000056:	4687      	mov	pc, r0

20000058 <SCU_6_Veneer>:
/* ======================================================================== */
    .globl SCU_6_Veneer 
SCU_6_Veneer:
    LDR R0, =ERU0_3_IRQHandler
20000058:	4823      	ldr	r0, [pc, #140]	; (200000e8 <BCCU0_0_Veneer+0x2c>)
    MOV PC,R0
2000005a:	4687      	mov	pc, r0

2000005c <MATH_Veneer>:
/* ======================================================================== */
    .globl MATH_Veneer 
MATH_Veneer:
    LDR R0, =MATH0_0_IRQHandler
2000005c:	4823      	ldr	r0, [pc, #140]	; (200000ec <BCCU0_0_Veneer+0x30>)
    MOV PC,R0
2000005e:	4687      	mov	pc, r0
20000060:	00000000 	.word	0x00000000

20000064 <USIC0_0_Veneer>:
    .long 0
/* ======================================================================== */
    .globl USIC0_0_Veneer
USIC0_0_Veneer:
    LDR R0, =USIC0_0_IRQHandler
20000064:	4822      	ldr	r0, [pc, #136]	; (200000f0 <BCCU0_0_Veneer+0x34>)
    MOV PC,R0
20000066:	4687      	mov	pc, r0

20000068 <USIC0_1_Veneer>:
/* ======================================================================== */
    .globl USIC0_1_Veneer
USIC0_1_Veneer:
    LDR R0, =USIC0_1_IRQHandler
20000068:	4822      	ldr	r0, [pc, #136]	; (200000f4 <BCCU0_0_Veneer+0x38>)
    MOV PC,R0
2000006a:	4687      	mov	pc, r0

2000006c <USIC0_2_Veneer>:
/* ======================================================================== */
    .globl USIC0_2_Veneer
USIC0_2_Veneer:
    LDR R0, =USIC0_2_IRQHandler
2000006c:	4822      	ldr	r0, [pc, #136]	; (200000f8 <BCCU0_0_Veneer+0x3c>)
    MOV PC,R0
2000006e:	4687      	mov	pc, r0

20000070 <USIC0_3_Veneer>:
/* ======================================================================== */
    .globl USIC0_3_Veneer
USIC0_3_Veneer:
    LDR R0, =USIC0_3_IRQHandler
20000070:	4822      	ldr	r0, [pc, #136]	; (200000fc <BCCU0_0_Veneer+0x40>)
    MOV PC,R0
20000072:	4687      	mov	pc, r0

20000074 <USIC0_4_Veneer>:
/* ======================================================================== */
    .globl USIC0_4_Veneer
USIC0_4_Veneer:
    LDR R0, =USIC0_4_IRQHandler
20000074:	4822      	ldr	r0, [pc, #136]	; (20000100 <BCCU0_0_Veneer+0x44>)
    MOV PC,R0
20000076:	4687      	mov	pc, r0

20000078 <USIC0_5_Veneer>:
/* ======================================================================== */
    .globl USIC0_5_Veneer
USIC0_5_Veneer:
    LDR R0, =USIC0_5_IRQHandler
20000078:	4822      	ldr	r0, [pc, #136]	; (20000104 <BCCU0_0_Veneer+0x48>)
    MOV PC,R0
2000007a:	4687      	mov	pc, r0

2000007c <VADC0_C0_0_Veneer>:
/* ======================================================================== */
    .globl VADC0_C0_0_Veneer 
VADC0_C0_0_Veneer:
    LDR R0, =VADC0_C0_0_IRQHandler
2000007c:	4822      	ldr	r0, [pc, #136]	; (20000108 <BCCU0_0_Veneer+0x4c>)
    MOV PC,R0
2000007e:	4687      	mov	pc, r0

20000080 <VADC0_C0_1_Veneer>:
/* ======================================================================== */
    .globl VADC0_C0_1_Veneer
VADC0_C0_1_Veneer:
    LDR R0, =VADC0_C0_1_IRQHandler
20000080:	4822      	ldr	r0, [pc, #136]	; (2000010c <BCCU0_0_Veneer+0x50>)
    MOV PC,R0
20000082:	4687      	mov	pc, r0

20000084 <VADC0_G0_0_Veneer>:
/* ======================================================================== */
    .globl VADC0_G0_0_Veneer
VADC0_G0_0_Veneer:
    LDR R0, =VADC0_G0_0_IRQHandler
20000084:	4822      	ldr	r0, [pc, #136]	; (20000110 <BCCU0_0_Veneer+0x54>)
    MOV PC,R0
20000086:	4687      	mov	pc, r0

20000088 <VADC0_G0_1_Veneer>:
/* ======================================================================== */
    .globl VADC0_G0_1_Veneer
VADC0_G0_1_Veneer:
    LDR R0, =VADC0_G0_1_IRQHandler
20000088:	4822      	ldr	r0, [pc, #136]	; (20000114 <BCCU0_0_Veneer+0x58>)
    MOV PC,R0
2000008a:	4687      	mov	pc, r0

2000008c <VADC0_G1_0_Veneer>:
/* ======================================================================== */
    .globl VADC0_G1_0_Veneer
VADC0_G1_0_Veneer:
    LDR R0, =VADC0_G1_0_IRQHandler
2000008c:	4822      	ldr	r0, [pc, #136]	; (20000118 <BCCU0_0_Veneer+0x5c>)
    MOV PC,R0
2000008e:	4687      	mov	pc, r0

20000090 <VADC0_G1_1_Veneer>:
/* ======================================================================== */
    .globl VADC0_G1_1_Veneer
VADC0_G1_1_Veneer:
    LDR R0, =VADC0_G1_1_IRQHandler
20000090:	4822      	ldr	r0, [pc, #136]	; (2000011c <BCCU0_0_Veneer+0x60>)
    MOV PC,R0
20000092:	4687      	mov	pc, r0

20000094 <CCU40_0_Veneer>:
/* ======================================================================== */
    .globl CCU40_0_Veneer
CCU40_0_Veneer:
    LDR R0, =CCU40_0_IRQHandler
20000094:	4822      	ldr	r0, [pc, #136]	; (20000120 <BCCU0_0_Veneer+0x64>)
    MOV PC,R0
20000096:	4687      	mov	pc, r0

20000098 <CCU40_1_Veneer>:
/* ======================================================================== */
    .globl CCU40_1_Veneer
CCU40_1_Veneer:
    LDR R0, =CCU40_1_IRQHandler
20000098:	4822      	ldr	r0, [pc, #136]	; (20000124 <BCCU0_0_Veneer+0x68>)
    MOV PC,R0
2000009a:	4687      	mov	pc, r0

2000009c <CCU40_2_Veneer>:
/* ======================================================================== */
    .globl CCU40_2_Veneer
CCU40_2_Veneer:
    LDR R0, =CCU40_2_IRQHandler
2000009c:	4822      	ldr	r0, [pc, #136]	; (20000128 <BCCU0_0_Veneer+0x6c>)
    MOV PC,R0
2000009e:	4687      	mov	pc, r0

200000a0 <CCU40_3_Veneer>:
/* ======================================================================== */
    .globl CCU40_3_Veneer
CCU40_3_Veneer:
    LDR R0, =CCU40_3_IRQHandler
200000a0:	4822      	ldr	r0, [pc, #136]	; (2000012c <BCCU0_0_Veneer+0x70>)
    MOV PC,R0
200000a2:	4687      	mov	pc, r0

200000a4 <CCU80_0_Veneer>:
/* ======================================================================== */
    .globl CCU80_0_Veneer
CCU80_0_Veneer:
    LDR R0, =CCU80_0_IRQHandler
200000a4:	4822      	ldr	r0, [pc, #136]	; (20000130 <BCCU0_0_Veneer+0x74>)
    MOV PC,R0
200000a6:	4687      	mov	pc, r0

200000a8 <CCU80_1_Veneer>:
/* ======================================================================== */
    .globl CCU80_1_Veneer
CCU80_1_Veneer:
    LDR R0, =CCU80_1_IRQHandler
200000a8:	4822      	ldr	r0, [pc, #136]	; (20000134 <BCCU0_0_Veneer+0x78>)
    MOV PC,R0
200000aa:	4687      	mov	pc, r0

200000ac <POSIF0_0_Veneer>:
/* ======================================================================== */
    .globl POSIF0_0_Veneer
POSIF0_0_Veneer:
    LDR R0, =POSIF0_0_IRQHandler
200000ac:	4822      	ldr	r0, [pc, #136]	; (20000138 <BCCU0_0_Veneer+0x7c>)
    MOV PC,R0
200000ae:	4687      	mov	pc, r0

200000b0 <POSIF0_1_Veneer>:
/* ======================================================================== */
    .globl POSIF0_1_Veneer
POSIF0_1_Veneer:
    LDR R0, =POSIF0_1_IRQHandler
200000b0:	4822      	ldr	r0, [pc, #136]	; (2000013c <BCCU0_0_Veneer+0x80>)
    MOV PC,R0
200000b2:	4687      	mov	pc, r0
	...

200000bc <BCCU0_0_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
    .globl BCCU0_0_Veneer
BCCU0_0_Veneer:
    LDR R0, =BCCU0_0_IRQHandler
200000bc:	4820      	ldr	r0, [pc, #128]	; (20000140 <BCCU0_0_Veneer+0x84>)
    MOV PC,R0
200000be:	4687      	mov	pc, r0
    
    .align 1
    
    .globl HardFault_Veneer
HardFault_Veneer:
    LDR R0, =HardFault_Handler
200000c0:	10001099 	.word	0x10001099
    .long 0
    .long 0
/* ======================================================================== */
    .globl SVC_Veneer
SVC_Veneer:
    LDR R0, =SVC_Handler
200000c4:	10001099 	.word	0x10001099
    .long 0
    .long 0
/* ======================================================================== */
    .globl PendSV_Veneer
PendSV_Veneer:
    LDR R0, =PendSV_Handler
200000c8:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SysTick_Veneer 
SysTick_Veneer:
    LDR R0, =SysTick_Handler
200000cc:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_0_Veneer 
SCU_0_Veneer:
    LDR R0, =SCU_0_IRQHandler
200000d0:	100021e5 	.word	0x100021e5
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_1_Veneer 
SCU_1_Veneer:
    LDR R0, =SCU_1_IRQHandler
200000d4:	100021f1 	.word	0x100021f1
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_2_Veneer
SCU_2_Veneer:
    LDR R0, =SCU_2_IRQHandler
200000d8:	100021fd 	.word	0x100021fd
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_3_Veneer 
SCU_3_Veneer:
    LDR R0, =ERU0_0_IRQHandler
200000dc:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_4_Veneer 
SCU_4_Veneer:
    LDR R0, =ERU0_1_IRQHandler
200000e0:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_5_Veneer 
SCU_5_Veneer:
    LDR R0, =ERU0_2_IRQHandler
200000e4:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_6_Veneer 
SCU_6_Veneer:
    LDR R0, =ERU0_3_IRQHandler
200000e8:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl MATH_Veneer 
MATH_Veneer:
    LDR R0, =MATH0_0_IRQHandler
200000ec:	10001099 	.word	0x10001099
    MOV PC,R0
    .long 0
/* ======================================================================== */
    .globl USIC0_0_Veneer
USIC0_0_Veneer:
    LDR R0, =USIC0_0_IRQHandler
200000f0:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl USIC0_1_Veneer
USIC0_1_Veneer:
    LDR R0, =USIC0_1_IRQHandler
200000f4:	10001e59 	.word	0x10001e59
    MOV PC,R0
/* ======================================================================== */
    .globl USIC0_2_Veneer
USIC0_2_Veneer:
    LDR R0, =USIC0_2_IRQHandler
200000f8:	10001e49 	.word	0x10001e49
    MOV PC,R0
/* ======================================================================== */
    .globl USIC0_3_Veneer
USIC0_3_Veneer:
    LDR R0, =USIC0_3_IRQHandler
200000fc:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl USIC0_4_Veneer
USIC0_4_Veneer:
    LDR R0, =USIC0_4_IRQHandler
20000100:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl USIC0_5_Veneer
USIC0_5_Veneer:
    LDR R0, =USIC0_5_IRQHandler
20000104:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl VADC0_C0_0_Veneer 
VADC0_C0_0_Veneer:
    LDR R0, =VADC0_C0_0_IRQHandler
20000108:	10002c59 	.word	0x10002c59
    MOV PC,R0
/* ======================================================================== */
    .globl VADC0_C0_1_Veneer
VADC0_C0_1_Veneer:
    LDR R0, =VADC0_C0_1_IRQHandler
2000010c:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl VADC0_G0_0_Veneer
VADC0_G0_0_Veneer:
    LDR R0, =VADC0_G0_0_IRQHandler
20000110:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl VADC0_G0_1_Veneer
VADC0_G0_1_Veneer:
    LDR R0, =VADC0_G0_1_IRQHandler
20000114:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl VADC0_G1_0_Veneer
VADC0_G1_0_Veneer:
    LDR R0, =VADC0_G1_0_IRQHandler
20000118:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl VADC0_G1_1_Veneer
VADC0_G1_1_Veneer:
    LDR R0, =VADC0_G1_1_IRQHandler
2000011c:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl CCU40_0_Veneer
CCU40_0_Veneer:
    LDR R0, =CCU40_0_IRQHandler
20000120:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl CCU40_1_Veneer
CCU40_1_Veneer:
    LDR R0, =CCU40_1_IRQHandler
20000124:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl CCU40_2_Veneer
CCU40_2_Veneer:
    LDR R0, =CCU40_2_IRQHandler
20000128:	100028c5 	.word	0x100028c5
    MOV PC,R0
/* ======================================================================== */
    .globl CCU40_3_Veneer
CCU40_3_Veneer:
    LDR R0, =CCU40_3_IRQHandler
2000012c:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl CCU80_0_Veneer
CCU80_0_Veneer:
    LDR R0, =CCU80_0_IRQHandler
20000130:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl CCU80_1_Veneer
CCU80_1_Veneer:
    LDR R0, =CCU80_1_IRQHandler
20000134:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl POSIF0_0_Veneer
POSIF0_0_Veneer:
    LDR R0, =POSIF0_0_IRQHandler
20000138:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl POSIF0_1_Veneer
POSIF0_1_Veneer:
    LDR R0, =POSIF0_1_IRQHandler
2000013c:	10001099 	.word	0x10001099
    .long 0
    .long 0
/* ======================================================================== */
    .globl BCCU0_0_Veneer
BCCU0_0_Veneer:
    LDR R0, =BCCU0_0_IRQHandler
20000140:	10001099 	.word	0x10001099
